-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Servidor: 127.0.0.1
-- Tiempo de generación: 25-06-2024 a las 23:14:52
-- Versión del servidor: 10.4.28-MariaDB
-- Versión de PHP: 8.2.4

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de datos: `entornotsoftlimpia`
--

DELIMITER $$
--
-- Procedimientos
--
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_authenticationEmail` (IN `IN_idEDDEvaluacion` INT, IN `IN_idProyecto` INT, IN `IN_cargoEnProy` VARCHAR(20), IN `IN_cicloEvaluacion` INT, IN `IN_idEDDProyEmpEvaluador` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
      	SET str_mjeInterno = CONCAT('SP_authenticationEmail: Error al insertar registro --> IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - IN_idProyecto: [', IN_idProyecto, '] - IN_cargoEnProy: [', IN_cargoEnProy, '] - IN_idEDDProyEmpEvaluador: [', IN_idEDDProyEmpEvaluador, ']');
 
      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_authenticationEmail', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  END;

            IF IN_idEDDEvaluacion <= 0 THEN
             	SET OUT_CODRESULT = '01';
				SET OUT_MJERESULT = 'El ID de la evaluación debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_idProyecto <= 0 THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El ID del proyecto debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_cargoEnProy) = "" THEN 
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El cargo en el proyecto viene vacío.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_idEDDProyEmpEvaluador <= 0 THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El id del evaluador debe ser mayor a cero.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;  
             ELSEIF FN_validarFechaCorreo(IN_idProyecto, IN_idEDDProyEmpEvaluador, IN_cargoEnProy, IN_cicloEvaluacion) = FALSE THEN 
             	SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Se ha excedido la fecha límite o es inválida.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;   
            ELSE
                IF TRIM(UPPER(IN_cargoEnProy)) IN ('REFERENTE', 'REFERENTES') 
                THEN
                SET OUT_CODRESULT = '00';
				SET OUT_MJERESULT = 'Success'; 
                SELECT TRUE as RESULT, OUT_CODRESULT, OUT_MJERESULT from eddevalproyemp epe 
				INNER JOIN eddproyemp ep ON (
                    ep.idEDDProyEmp = epe.idEDDProyEmpEvaluador
                    AND epe.idEDDEvaluacion = IN_idEDDEvaluacion 
                    AND epe.idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador
                    AND epe.cicloEvaluacion = IN_cicloEvaluacion
                    AND ep.idProyecto = IN_idProyecto
                ) 
                	WHERE epe.evalRespondida = 0
                    AND epe.fechaIniVigenciaEvalRef IS NULL 
                    AND epe.diasVigenciaEvalRef IS NULL
                    AND epe.CorreoLinkEnviadoRef IS NOT NULL
                    OR epe.CorreoLinkEnviadoRef = 1
                ;
                ELSEIF TRIM(UPPER(IN_cargoEnProy)) IN ('COLABORADOR', 'COLABORADORES') 
                THEN
	                SET OUT_CODRESULT = '00';
				    SET OUT_MJERESULT = 'Success';   
 
                	SELECT TRUE as RESULT, OUT_CODRESULT, OUT_MJERESULT from eddevalproyemp epe 
					INNER JOIN eddproyemp ep ON (
                    ep.idEDDProyEmp = epe.idEDDProyEmpEvaluador
                    AND epe.idEDDEvaluacion = IN_idEDDEvaluacion 
                    AND epe.idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador
                    AND epe.cicloEvaluacion = IN_cicloEvaluacion
                    AND ep.idProyecto = IN_idProyecto
                ) 
                	WHERE epe.evalRespondida = 0
                    AND epe.fechaIniVigenciaEvalRef IS NULL 
                    AND epe.diasVigenciaEvalRef IS NULL
                    AND epe.CorreoLinkEnviadoColab IS NOT NULL
                    OR epe.CorreoLinkEnviadoColab = 1
                ;
       			END IF;
     END IF;
 
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_linksEvaluacionDashboard` (IN `IN_idProyecto` INT, IN `IN_cargoEnProy` INT, OUT `OUT_CODRESULT` VARCHAR(3), OUT `OUT_MJERESULT` VARCHAR(100))   BEGIN    
  IF IN_idProyecto <= 0 THEN
      SET OUT_CODRESULT = '01';    
      SET OUT_MJERESULT = 'El ID de la proyecto debe ser mayor a cero.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT;
  ELSEIF TRIM(IN_cargoEnProy) = "" THEN
      SET OUT_CODRESULT = '01';    
      SET OUT_MJERESULT = 'El cargo en proyecto no debe estar vacío.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT;
    
  ELSE    
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

    SELECT OUT_CODRESULT, OUT_MJERESULT, epe.idEDDEvaluacion, UPPER(ev.nomEvaluacion) nomEvaluacion, pe.idProyecto, epe.cicloEvaluacion, UPPER(pe.cargoEnProy) cargoEnProy
    FROM eddevalproyemp epe 
    INNER JOIN eddproyemp pe ON (pe.idEDDProyEmp = epe.idEDDProyEmpEvaluado 
                                AND pe.idProyecto = IN_idProyecto 
                                AND UPPER(pe.cargoEnProy) = IN_cargoEnProy
                                AND pe.isActive = 1  
                                AND epe.isActive = 1)
    INNER JOIN eddevaluacion ev ON (ev.idEDDEvaluacion = epe.idEDDEvaluacion AND ev.isActive = 1)
    GROUP BY pe.cargoEnProy, epe.cicloEvaluacion
    ;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoAlumnoForms` ()   BEGIN
SELECT idAlumno, UPPER(nomAlumno) FROM alumno order by nomAlumno;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoAreaForms` ()   BEGIN
SELECT idArea, UPPER(nomArea) FROM area WHERE isActive = 1 order by nomArea;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoCargoForms` ()   BEGIN
SELECT idCargo, UPPER(nomCargo) FROM cargo WHERE isActive = 1  order by nomCargo;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoCiclosEval` (IN `IN_idProyecto` INT)   BEGIN
    IF IN_idProyecto = 0 THEN
        SELECT idEDDEvalProyEmp, cicloEvaluacion FROM eddevalproyemp WHERE isActive = 1 group by cicloEvaluacion order by cicloEvaluacion;
    ELSE
        SELECT epe.idEDDEvalProyEmp, epe.cicloEvaluacion 
        FROM eddevalproyemp epe 
        INNER JOIN eddproyemp ep ON (ep.idEDDProyEmp = epe.idEDDProyEmpEvaluado AND ep.idProyecto = IN_idProyecto)
        WHERE epe.isActive = 1 group by epe.cicloEvaluacion order by epe.cicloEvaluacion;

    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoClienteForms` ()   BEGIN
SELECT idCliente, UPPER(nomCliente) FROM cliente WHERE isActive = 1 order by nomCliente;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoContactosProy` (IN `IN_idProyecto` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        IF IN_idProyecto < 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'El id del proyecto no puede ser menor a cero';
        ELSE
            SET OUT_CODRESULT = '00';
            SET OUT_MJERESULT = 'SUCCESS';
            SELECT
                OUT_CODRESULT,
                OUT_MJERESULT,
                proy.idEDDProyecto,
                upper(proy.nomProyecto) nomProyecto,
                serv.idServicio,
                UPPER(serv.nomServicio) nomServicio,
                con.idContacto,
                UPPER(con.nomContacto) nomContacto,
                UPPER(con.correoContacto) correoContacto1,
                UPPER(con.correoContacto2) correoContacto2
            FROM eddproyecto proy
            INNER JOIN servicio serv ON (serv.idServicio = proy.idServicio AND proy.idEDDProyecto = IN_idProyecto AND proy.isActive = 1)                           INNER JOIN contacto con ON (con.idServicio = serv.idServicio AND serv.isActive = 1 AND con.isActive = 1)
            ORDER BY con.nomContacto, con.correoContacto, con.correoContacto2   ;
            
        END IF;
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoCursoAlumnoForms` ()   BEGIN
SELECT curAl.idCursoAlumno, CONCAT(UPPER(emp.nomEmpleado), ' - ', UPPER(cur.nomCurso)) AS nomCursoAlumno 
FROM cursoalumno curAl
INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
INNER JOIN empleado emp ON (curAl.idEmpleado = emp.idEmpleado)
WHERE curAl.isActive = 1 
order by emp.nomEmpleado
;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoCursoForms` ()   BEGIN
SELECT idCurso, UPPER(nomCurso) FROM curso WHERE isActive = 1  order by nomCurso;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEddEvalCompetenciaForms` ()   BEGIN
SELECT idEDDEvalCompetencia, UPPER(nomCompetencia) as nomCompetencia FROM eddevalcompetencia WHERE isActive = 1 order by nomCompetencia;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEddEvalPreguntaForms` ()   BEGIN
SELECT idEDDEvalPregunta, UPPER(nomPregunta) as nomPregunta FROM eddevalpregunta WHERE isActive = 1 order by nomPregunta;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEddEvalProyEmpForms` ()   BEGIN
SELECT 
evalProyEmp.idEDDProyEmpEvaluador,
evalProyEmp.idEDDProyEmpEvaluado,
CONCAT(UPPER(eva.nomEvaluacion), ' - ', UPPER(proyEvaluador.nomProyecto), ' - ', UPPER(empEvaluador.nomEmpleado)) as nomEvalEmpEvaluador,
CONCAT(UPPER(eva.nomEvaluacion), ' - ', UPPER(proyEvaluado.nomProyecto), ' - ', UPPER(empEvaluado.nomEmpleado)) as nomEvalEmpEvaluado

FROM eddevalproyemp evalProyEmp
INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
INNER JOIN eddproyecto proyEvaluador ON (proyEmpEvaluador.idProyecto = proyEvaluador.idEDDProyecto)
INNER JOIN eddproyecto proyEvaluado ON (proyEmpEvaluado.idProyecto = proyEvaluado.idEDDProyecto)
INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
INNER JOIN eddevaluacion eva ON (evalProyEmp.idEDDEvaluacion = eva.idEDDEvaluacion)
ORDER BY proyEvaluador.nomProyecto, proyEvaluado.nomProyecto, empEvaluador.nomEmpleado, empEvaluado.nomEmpleado
;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEddEvalRespPregForms` ()   BEGIN
SELECT idEDDEvalRespPreg, UPPER(nomRespPreg) as nomRespPreg FROM eddevalresppreg WHERE isActive = 1 order by nomRespPreg;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEddEvaluacionForms` ()   BEGIN
SELECT idEDDEvaluacion, UPPER(nomEvaluacion) as nomEvaluacion FROM eddevaluacion WHERE isActive = 1 order by nomEvaluacion;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEddProyEmpForms` (IN `IN_idProyecto` INT)   BEGIN
    IF IN_idProyecto != 0 THEN
        SELECT proyEmp.idEDDProyEmp, CONCAT(UPPER(proy.nomProyecto), ' - ', UPPER(emp.nomEmpleado)) as nomProyEmp, UPPER(proyEmp.cargoEnProy) cargoEnProy
        FROM eddproyemp proyEmp
        INNER JOIN eddproyecto proy ON (proyEmp.idProyecto = proy.idEDDProyecto)
        INNER JOIN empleado emp ON (proyEmp.idEmpleado = emp.idEmpleado)
        WHERE proyEmp.isActive = 1 AND proyEmp.idProyecto = IN_idProyecto
        ORDER BY proy.nomProyecto, emp.nomEmpleado;

 

    ELSE

        SELECT proyEmp.idEDDProyEmp, CONCAT(UPPER(proy.nomProyecto), ' - ', UPPER(emp.nomEmpleado)) as nomProyEmp, UPPER(proyEmp.cargoEnProy)cargoEnProy
        FROM eddproyemp proyEmp
        INNER JOIN eddproyecto proy ON (proyEmp.idProyecto = proy.idEDDProyecto)
        INNER JOIN empleado emp ON (proyEmp.idEmpleado = emp.idEmpleado)
        WHERE proyEmp.isActive = 1 
        ORDER BY proy.nomProyecto, emp.nomEmpleado;

    END IF;

 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEmpCargoProy` (IN `IN_idProyecto` INT, IN `IN_Cargo` VARCHAR(30), IN `IN_cicloEvaluacion` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        IF IN_idProyecto < 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'El id del proyecto no puede ser menor a cero';
            
        ELSEIF TRIM(IN_cargo) = '' OR IN_Cargo = NULL THEN 
           	SET OUT_CODRESULT = '00';
        	SET OUT_MJERESULT = 'SUCCESS';
        
        SELECT  OUT_CODRESULT,
            	OUT_MJERESULT,
                a.*, 
                UPPER(emp2.nomEmpleado) evaluado,
                emp2.idEmpleado idEmpleadoEvaluado,
                UPPER(clEvaluado.nomCliente) nomClienteEvaluado
        FROM (
           SELECT
    	
        ep.idEDDProyEmp,
        p.idEDDProyecto,
        UPPER(p.nomProyecto) nomProyecto,
        s.idServicio,
        UPPER(s.nomServicio) nomServicio,
        c.idCliente,
        UPPER(c.nomCliente) nomCliente,
        emp.idEmpleado,
        UPPER(emp.nomEmpleado) nomEmpleado,
        UPPER(ep.cargoEnProy) cargoEnProy,
        emp.correoEmpleado,
        ev.idEDDEvaluacion,
        UPPER(ev.nomEvaluacion) nomEvaluacion,
        epe.idEDDEvalProyEmp,
        epe.idEDDProyEmpEvaluador,
        epe.idEDDProyEmpEvaluado,
        epe.cicloEvaluacion,
        DATE_FORMAT(ev.fechaIni, "%d/%m/%Y") as fechaIni, 
        DATE_FORMAT(ev.fechaFin, "%d/%m/%Y") as fechaFin
        
        FROM eddproyemp ep
          INNER JOIN eddproyecto p ON (p.idEDDProyecto = ep.idProyecto AND ep.idProyecto = IN_idProyecto AND UPPER(ep.cargoEnProy) = 'REFERENTE' AND p.isActive = 1)
          INNER JOIN servicio s ON (s.idServicio = p.idServicio AND S.isActive = 1)
          INNER JOIN cliente c ON (c.idCliente = s.idCliente AND c.isActive = 1)
          INNER JOIN empleado emp ON (emp.idEmpleado = ep.idEmpleado AND emp.isActive = 1)
          INNER JOIN eddevalproyemp epe ON (epe.idEDDProyEmpEvaluador = ep.idEDDProyEmp AND epe.cicloEvaluacion = IN_cicloEvaluacion AND epe.isActive = 1)
          INNER JOIN eddevaluacion ev ON (ev.idEDDEvaluacion = epe.idEDDEvaluacion AND ev.isActive = 1)
        
    ) a
    
  INNER JOIN eddProyemp epe2 ON (epe2.idEDDProyEmp = a.idEDDProyEmpEvaluado AND epe2.idProyecto = a.idEDDProyecto AND epe2.isActive = 1)    
  INNER JOIN empleado emp2 ON (emp2.idEmpleado = epe2.idEmpleado AND emp2.isActive = 1)
  INNER JOIN cliente clEvaluado ON (clEvaluado.idCliente = emp2.idCliente)
  ORDER BY a.nomEmpleado, emp2.nomEmpleado;
                      
           
          
           
        ELSE
        	SET OUT_CODRESULT = '00';
        	SET OUT_MJERESULT = 'SUCCESS';
           SELECT  OUT_CODRESULT,
            	OUT_MJERESULT,
                a.*, 
                UPPER(emp2.nomEmpleado) evaluado,
                emp2.idEmpleado idEmpleadoEvaluado,
                UPPER(clEvaluado.nomCliente) nomClienteEvaluado
        FROM (
           SELECT
    	
        ep.idEDDProyEmp,
        p.idEDDProyecto,
        UPPER(p.nomProyecto) nomProyecto,
        s.idServicio,
        UPPER(s.nomServicio) nomServicio,
        c.idCliente,
        UPPER(c.nomCliente) nomCliente,
        emp.idEmpleado,
        UPPER(emp.nomEmpleado) nomEmpleado,
        UPPER(ep.cargoEnProy) cargoEnProy,
        emp.correoEmpleado,
        ev.idEDDEvaluacion,
        UPPER(ev.nomEvaluacion) nomEvaluacion,
        epe.idEDDEvalProyEmp,
        epe.idEDDProyEmpEvaluador,
        epe.idEDDProyEmpEvaluado,
        epe.cicloEvaluacion,  
        DATE_FORMAT(ev.fechaIni, "%d/%m/%Y") as fechaIni, 
        DATE_FORMAT(ev.fechaFin, "%d/%m/%Y") as fechaFin
        
        FROM eddproyemp ep
          INNER JOIN eddproyecto p ON (p.idEDDProyecto = ep.idProyecto AND ep.idProyecto = IN_idProyecto AND UPPER(ep.cargoEnProy) = IN_Cargo AND p.isActive = 1)
          INNER JOIN servicio s ON (s.idServicio = p.idServicio AND S.isActive = 1)
          INNER JOIN cliente c ON (c.idCliente = s.idCliente AND c.isActive = 1)
          INNER JOIN empleado emp ON (emp.idEmpleado = ep.idEmpleado AND emp.isActive = 1)
          INNER JOIN eddevalproyemp epe ON (epe.idEDDProyEmpEvaluador = ep.idEDDProyEmp AND epe.cicloEvaluacion = IN_cicloEvaluacion AND epe.isActive = 1)
          INNER JOIN eddevaluacion ev ON (ev.idEDDEvaluacion = epe.idEDDEvaluacion AND ev.isActive = 1)
            
        
    ) a
    
    
  INNER JOIN eddProyemp epe2 ON (epe2.idEDDProyEmp = a.idEDDProyEmpEvaluado AND epe2.idProyecto = a.idEDDProyecto AND epe2.isActive = 1)    
  INNER JOIN empleado emp2 ON (emp2.idEmpleado = epe2.idEmpleado AND emp2.isActive = 1)
  INNER JOIN cliente clEvaluado ON (clEvaluado.idCliente = emp2.idCliente)
  ORDER BY a.nomEmpleado, emp2.nomEmpleado;
                
      
        END IF;	
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEmpleadoForms` ()   BEGIN
SELECT idEmpleado, UPPER(nomEmpleado), valorHH FROM empleado WHERE isActive = 1 order by nomEmpleado;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEPEEvaluadores` ()   BEGIN
    SELECT 
    evalProyEmpEvaluador.idEDDProyEmpEvaluador,
    evalProyEmpEvaluador.idEDDEvaluacion,
    UPPER(e.nomEmpleado) nomEmpleado,
    e.idEmpleado idEmpleadoEvaluador
    FROM empleado e
    INNER JOIN eddproyemp proyEmpEvaluador ON (proyEmpEvaluador.idEmpleado = e.idEmpleado)
    INNER JOIN eddevalproyemp evalProyEmpEvaluador ON (evalProyEmpEvaluador.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
    WHERE e.isActive = 1 
    GROUP BY e.nomEmpleado
    ORDER BY e.nomEmpleado
    ;
    
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEPEEvaluados` ()   BEGIN
    SELECT 
    evalProyEmpEvaluado.idEDDProyEmpEvaluado,
    evalProyEmpEvaluado.idEDDEvalProyEmp,
    evalProyEmpEvaluado.idEDDEvaluacion,
    UPPER(e.nomEmpleado) nomEmpleado,
    e.idEmpleado idEmpleadoEvaluado
    FROM empleado e
    INNER JOIN eddproyemp proyEmpEvaluado ON (proyEmpEvaluado.idEmpleado = e.idEmpleado)
    INNER JOIN eddevalproyemp evalProyEmpEvaluado ON (evalProyEmpEvaluado.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
    WHERE e.isActive = 1 
    GROUP BY e.nomEmpleado
    ORDER BY e.nomEmpleado
    ;
    
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoEvaluadoEval` (IN `IN_idEvaluacion` INT, IN `IN_idEDDProyEmpEvaluador` INT, IN `IN_cicloEvaluacion` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        IF IN_idEvaluacion < 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'El id del proyecto no puede ser menor a cero';

        ELSEIF IN_idEDDProyEmpEvaluador < 0 THEN
            SET OUT_CODRESULT = '02';
            SET OUT_MJERESULT = 'El id del evaluador no puede ser menor a cero';
        ELSE    

        SET OUT_CODRESULT = '00';
        SET OUT_MJERESULT = 'SUCCESS';

        SELECT OUT_CODRESULT, OUT_MJERESULT, 
        UPPER(emp.nomEmpleado) nomEvaluado, 
        UPPER(empEvaluador.nomEmpleado) nomEvaluador, 
        epe.idEDDProyEmpEvaluado,
        epe.idEDDEvalProyEmp
        FROM eddevalproyemp epe 
        INNER JOIN eddproyemp ep ON (ep.idEDDProyEmp = epe.idEDDProyEmpEvaluado 
                                     AND epe.idEDDEvaluacion = IN_idEvaluacion 
                                     AND epe.idEDDProyEmpEvaluador = IN_idEDDproyEmpEvaluador 
                                     AND epe.cicloEvaluacion = IN_cicloEvaluacion 
                                     AND epe.evalRespondida = 0 
                                     AND epe.isActive = 1)
        INNER JOIN empleado emp ON (emp.idEmpleado = ep.idEmpleado AND emp.isActive = 1)
        INNER JOIN eddproyemp epEvaluador ON (epEvaluador.idEDDProyEmp = IN_idEDDproyEmpEvaluador)
        INNER JOIN empleado empEvaluador ON (empEvaluador.idEmpleado = epEvaluador.idEmpleado)
        ;                             


        END IF;	
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoPaisForms` ()   BEGIN
SELECT idPais, UPPER(nomPais) FROM pais WHERE isActive = 1  order by nomPais;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoProyectoForms` (IN `IN_idServicio` VARCHAR(50))   BEGIN
  IF TRIM(IN_idServicio) = "" THEN
	SELECT idEDDProyecto, UPPER(nomProyecto) FROM eddproyecto WHERE isActive = 1 order by nomProyecto;
  ELSE
	SELECT idEDDProyecto, UPPER(nomProyecto) FROM eddproyecto WHERE FIND_IN_SET(eddproyecto.idServicio ,IN_idServicio) AND isActive = 1 order by nomProyecto;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoProyectosActivosForms` ()   BEGIN
    SELECT p.idEDDProyecto, 
    UPPER(p.nomProyecto) nomProyecto, 
    DATE_FORMAT(p.fechaInicio, "%d-%m-%Y") as fechaIni,
    DATE_FORMAT(p.fechaFin, "%d-%m-%Y") as fechaFin,
    ac.presupuestoTotal
    ,IF (now() <= p.fechaFin, "activo", "inactivo") condicion
    ,ac.idAcop
    FROM eddproyecto p 
    INNER JOIN ihhacop ac ON (ac.idProyecto = p.idEDDProyecto AND ac.isActive = 1 AND p.isActive = 1)
    WHERE now() <= p.fechaFin 
    ORDER BY p.nomProyecto;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoRamoExamenForms` ()   BEGIN
SELECT idRamoExamen, UPPER(nomExamen) FROM ramoexamen WHERE isActive = 1  order by nomExamen;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoRamoForms` ()   BEGIN
SELECT idRamo, UPPER(nomRamo) FROM ramo WHERE isActive = 1 order by nomRamo;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoRolForms` ()   BEGIN
SELECT idRolUsuario, UPPER(nomRol) FROM rolusuario WHERE isActive = 1  order by nomRol;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoServicioForms` (IN `IN_idCliente` VARCHAR(50))   BEGIN
    IF TRIM(IN_idCliente) = ""  THEN
        SELECT idServicio, UPPER(nomServicio) FROM servicio WHERE isActive = 1 order by nomServicio;
    ELSE
        SELECT idServicio, UPPER(nomServicio) FROM servicio WHERE FIND_IN_SET(servicio.idCliente ,IN_idCliente) AND isActive = 1 order by nomServicio;
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoSesionForms` ()   BEGIN
SELECT idSesion, UPPER(nomSesion) FROM sesion WHERE isActive = 1 order by nomSesion;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoSubsistemaForms` ()   BEGIN
SELECT idSubsistema, UPPER(nomSubsistema) as nomSubsistema FROM subsistema WHERE isActive = 1  order by nomSubsistema;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoTipoPerfilForms` ()   BEGIN
SELECT idTipoPerfil, UPPER(nomTipoPerfil) as nomTipoPerfil FROM tipoperfil WHERE isActive = 1  order by nomTipoPerfil;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AUX_listadoTipoProyectos` ()   BEGIN
SELECT UPPER(subTipoConfDato) subTipoConfDato, idConfDatos FROM confdatos WHERE isActive = 1 AND tipoConfDato = 'TIPO_PROYECTO' order by subTipoConfDato;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_cambiarEstado` (IN `IN_nombreTabla` VARCHAR(40), IN `IN_idRegistro` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
      	SET str_mjeInterno = CONCAT('SP_cambiarEstado: Error al modificar registro --> IN_nombreTabla: [', IN_nombreTabla, '] - idRegistro: [', idRegistro, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');
 
      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_cambiarEstado', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  END;
		 -- Validación de parámetros
            IF IN_idRegistro IS NULL 
            OR IN_nombreTabla is NULL 
            OR IN_usuarioModificacion is NULL 
            OR IN_nombreTabla = "%null%" 
            OR IN_usuarioModificacion = "%null%" 
             THEN
               SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
               SET OUT_CODRESULT = '01';
               SELECT OUT_MJERESULT, OUT_CODRESULT;
 
             ELSEIF TRIM(IN_nombreTabla) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El nombre de la tabla viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_idRegistro <= 0 THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del registro debe ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
              ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El usuario administrador quien modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                ELSEIF UPPER(IN_nombreTabla) NOT IN ('ALUMNO','AREA','CARGO','CLIENTE','CONTACTO','CURSO','CURSOALUMNO','CURSOALUMNO_SESION','EMPLEADO','NOTAEXAMEN','RAMO','RAMOEXAMEN','RELATORRAMO','REQCURSO','SERVICIO','SESION', 'EDDPROYECTO', 'EDDPROYEMP', 'EMPTIPOPERFIL', 'EMPSUBSIST') THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'La tabla seleccionada no existe.'; 
                SELECT OUT_CODRESULT, OUT_MJERESULT;
 
            ELSE	
            	-- Reconocimiento de tabla para cada caso
                   SET AUTOCOMMIT = 0;
                   START TRANSACTION;
                -- Alumno
            	IF TRIM(IN_nombreTabla) = 'alumno' THEN
               	   UPDATE alumno SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion WHERE idAlumno = IN_idRegistro;
                   COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                    SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', alum.idAlumno, UPPER(alum.nomAlumno), UPPER(alum.correoAlumno), alum.telefonoAlumno, UPPER(serv.nomServicio), UPPER(area.nomArea), UPPER(pais.nomPais), UPPER(cargo.nomCargo) 
                    FROM alumno alum 
                    INNER JOIN servicio serv, area area, pais pais, cargo cargo 
                    WHERE alum.idPais = pais.idPais AND alum.idArea = area.idArea AND alum.idCargo = cargo.idCargo AND alum.idServicio = serv.idServicio AND alum.isActive = true AND alum.idAlumno = IN_idRegistro;
                    -- Cliente
             	ELSEIF TRIM(IN_nombreTabla) = 'cliente' THEN
                    UPDATE cliente SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idCliente = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', cli.idCliente, UPPER(cli.nomCliente), UPPER(cli.direccionCliente), UPPER(pais.nomPais) 
                    FROM cliente cli 
                    INNER JOIN pais pais 
                    WHERE cli.idPais = pais.idPais AND cli.isActive = true AND cli.idCliente = IN_idRegistro;
                    -- Contacto
                    ELSEIF TRIM(IN_nombreTabla) = 'contacto' THEN
                    UPDATE contacto SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idContacto = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', UPPER(con.nomContacto), UPPER(con.correoContacto), con.telefonoContacto, con.fechaIni, con.fechaFin, UPPER(serv.nomServicio)
                    FROM contacto con
                    INNER JOIN servicio serv ON (con.idServicio = serv.idServicio)
                    WHERE con.idContacto = IN_idRegistro;
                    -- Curso
                    ELSEIF TRIM(IN_nombreTabla) = 'curso' THEN
                    UPDATE curso SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idCurso = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', cur.idCurso, UPPER(cur.codCurso), UPPER(cur.nomCurso), UPPER(cur.tipoHH), cur.duracionCursoHH, cur.cantSesionesCurso 
                    FROM curso cur 
                    WHERE cur.idCurso = IN_idRegistro;
                    -- CursoAlumno
                    ELSEIF TRIM(IN_nombreTabla) = 'cursoalumno' THEN
                    UPDATE cursoalumno SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idCursoAlumno = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', curAl.idCursoAlumno, curAl.fechaIni, curAl.horaIni, curAl.fechaFin, curAl.horaFin, curAl.porcAsistencia, curAl.porcParticipacion, UPPER(curAl.claseAprobada), curAl.porcAprobacion,UPPER(curAl.estadoCurso),UPPER(al.nomAlumno), UPPER(cur.nomCurso)
                    FROM cursoalumno curAl
                    INNER JOIN alumno al ON (curAl.idAlumno = al.idAlumno)
                    INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
                    WHERE curAl.isActive = true AND curAl.idCursoAlumno = IN_idRegistro
                    ORDER BY curAl.idCursoAlumno ASC;
                    -- CursoAlumnoSesion
                    ELSEIF TRIM(IN_nombreTabla) = 'cursoalumno_sesion' THEN
                    UPDATE cursoalumno_sesion SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idCursoAlumnoSesion = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', curAlSe.idCursoAlumnoSesion, curAlSe.fechaIni, curAlSe.fechaFin, curAlSe.asistencia, curAlSe.participacion, UPPER(se.nomSesion), curAl.idCursoAlumno
                    FROM cursoalumno_sesion curAlSe
                    INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
                    INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAL.idCursoAlumno)
                    WHERE curAlSe.idCursoAlumnoSesion = IN_idRegistro;
                    -- Empleado
                    ELSEIF TRIM(IN_nombreTabla) = 'empleado' THEN
                    UPDATE empleado SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idEmpleado = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', emp.idEmpleado, UPPER(emp.nomEmpleado), UPPER(emp.correoEmpleado), emp.telefonoEmpleado, UPPER(ar.nomArea), UPPER(pa.nomPais), UPPER(ca.nomCargo)
                    FROM empleado emp 
                    INNER JOIN area ar ON (emp.idArea = ar.idArea)
                    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
                    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
					WHERE emp.idEmpleado = IN_idRegistro;
                    -- NotaExamen
                    ELSEIF TRIM(IN_nombreTabla) = 'notaexamen' THEN
                    UPDATE notaexamen SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idNotaExamen = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	 SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', notaEx.idNotaExamen, notaEx.notaExamen, UPPER(notaEx.apruebaExamen), UPPER(ramoEx.nomExamen), cursoAl.idCursoAlumno
                    FROM notaexamen notaEx 
                    INNER JOIN ramoexamen ramoEx ON (notaEx.idRamoExamen = ramoEx.idRamoExamen)
                    INNER JOIN cursoalumno cursoAl ON (notaEx.idCursoAlumno = cursoAl.idCursoAlumno)
                    WHERE notaEx.isActive = true and notaEx.idNotaExamen = IN_idRegistro;
 
                    
                    -- Ramo
                    ELSEIF TRIM(IN_nombreTabla) = 'ramo' THEN
                    UPDATE ramo SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idRamo = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', ram.idRamo, UPPER(ram.codRamo), UPPER(ram.nomRamo), UPPER(ram.tipoRamo), UPPER(ram.tipoRamoHH), ram.duracionRamoHH, ram.cantSesionesRamo, UPPER(cur.nomCurso)
                    FROM ramo ram 
                    INNER JOIN curso cur ON (ram.idCurso = cur.idCurso)
                    WHERE ram.idRamo = IN_idRegistro;
                     -- RamoExamen
                    ELSEIF TRIM(IN_nombreTabla) = 'ramoexamen' THEN
                    UPDATE ramoexamen SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idRamoExamen = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', UPPER(ramEx.nomExamen), ramEx.fechaExamen, ramEx.isActive, UPPER(ram.nomRamo) 					 FROM ramoexamen ramEx
                    INNER JOIN ramo ram ON (ramEx.idRamo = ram.idRamo)
                    WHERE ramEx.idRamoExamen = IN_idRegistro;
                    -- RelatorRamo
                    ELSEIF TRIM(IN_nombreTabla) = 'relatorramo' THEN
                    UPDATE relatorramo SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idRelatorRamo = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', relRam.fechaIni, relRam.fechaFin, UPPER(emp.nomEmpleado), UPPER(ram.nomRamo)
                    FROM relatorramo relRam 
                    INNER JOIN empleado em ON (relRam.idEmpleado = emp.idEmpleado) 
                    INNER JOIN ramo ram ON (relRam.idRamo = ram.idRamo) 
                    WHERE relRam.idRelatorRamo = IN_idRegistro;
                    -- ReqCurso
                    ELSEIF TRIM(IN_nombreTabla) = 'reqcurso' THEN
                    UPDATE reqcurso SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idReqCurso = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', reCur.idReqCurso, UPPER(cur.nomCurso), UPPER(curReq.nomCurso) as requisitoCurso 
                    FROM reqcurso reCur
                    INNER JOIN curso cur ON (reCur.idCurso = cur.idCurso)
                    INNER JOIN curso curReq ON (reCur.idCursoRequisito = curReq.idCurso)
                    WHERE reqCur.idReqCurso = IN_idRegistro;
                    -- Servicio
                    ELSEIF TRIM(IN_nombreTabla) = 'servicio' THEN
                    UPDATE servicio SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idServicio = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', serv.idServicio, UPPER(serv.nomServicio), serv.isActive, UPPER(cli.nomCliente)
                    FROM servicio serv
                    INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)
                    WHERE serv.idServicio = IN_idRegistro;
                    -- Sesion
                    ELSEIF TRIM(IN_nombreTabla) = 'sesion' THEN
                    UPDATE sesion SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idSesion = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                    SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), UPPER(ram.nomRamo)
                    FROM sesion se 
                    INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
                    WHERE se.idSesion = IN_idRegistro;
                    -- Edd proyecto
                    ELSEIF TRIM(IN_nombreTabla) = 'eddproyecto' THEN
                    UPDATE eddproyecto SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idEDDProyecto = IN_idRegistro;
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                   SELECT OUT_MJERESULT, OUT_CODRESULT, proy.idEDDProyecto, proy.idServicio, UPPER(nomProyecto) as nomProyecto, DATE_FORMAT(proy.fechaInicio, "%d-%m-%Y") as fechaIni, DATE_FORMAT(proy.fechaFin, "%d-%m-%Y") as fechaFin, UPPER(serv.nomServicio) as nomServicio
                       FROM eddproyecto proy 
                       INNER JOIN servicio serv ON (proy.idServicio = serv.idServicio)
                       WHERE proy.idEDDProyecto = IN_idRegistro;
                    -- EDD PROYECTO EMPLEADO
                    ELSEIF TRIM(IN_nombreTabla) = 'eddproyemp' THEN

                         UPDATE eddproyemp SET isActive = !isActive, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                    WHERE idEDDProyEmp = IN_idRegistro;
                        COMMIT;
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';
                        SELECT OUT_MJERESULT, OUT_CODRESULT, proyEmp.idEDDProyEmp, UPPER(proy.nomProyecto) as nomProyecto, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(proyEmp.cargoEnProy) as cargoEnProy
                        FROM eddproyemp proyEmp
                        INNER JOIN eddproyecto proy ON (proyEmp.idProyecto = proy.idEDDProyecto)
                        INNER JOIN empleado emp ON (proyEmp.idEmpleado = emp.idEmpleado)
                        WHERE proyEmp.idEDDProyEmp = IN_idRegistro;
                     -- EMPTIPOPERFIL
                    ELSEIF TRIM(IN_nombreTabla) = 'emptipoperfil' THEN
                        UPDATE emptipoperfil SET 
                        isActive = (!isActive), 
                        fechaModificacion = now(), 
                        usuarioModificacion = IN_usuarioModificacion 
                    	WHERE idEmpTipoPerfil = IN_idRegistro;
                        COMMIT;
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';
                        SELECT OUT_CODRESULT, OUT_MJERESULT, etp.isActive, etp.idEmpTipoPerfil, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(tp.nomTipoPerfil) as nomTipoPerfil
                        FROM emptipoperfil etp
                        INNER JOIN tipoperfil tp ON (etp.idTipoPerfil = tp.idTipoPerfil)
                        INNER JOIN empleado emp ON (etp.idEmpleado = emp.idEmpleado)
                        WHERE etp.idEmpTipoPerfil = IN_idRegistro; 
                    -- EMPSUBSIST
                    ELSEIF TRIM(IN_nombreTabla) = 'empsubsist' THEN
                        UPDATE empsubsist SET 
                        isActive = !isActive, 
                        fechaModificacion = 
                        CURRENT_TIMESTAMP, 
                        usuarioModificacion = IN_usuarioModificacion 
                        WHERE idEmpSubsist = IN_idRegistro;
 
                    	COMMIT;
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';
                            SELECT OUT_CODRESULT, OUT_MJERESULT, empSubs.idEmpSubsist, 
                            UPPER(emp.nomEmpleado) as nomEmpleado, 	
                            UPPER(sub.nomSubsistema) as nomSubsistema
                              FROM empsubsist empSubs
                              INNER JOIN empleado emp ON (empSubs.idEmpleado = emp.idEmpleado)
                              INNER JOIN subsistema sub ON (empSubs.idSubsistema = sub.idSubsistema)
                              WHERE empSubs.idEmpSubsist = IN_idRegistro;
 
                END IF;
            END IF;          			
        END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_cambiarEstadoEnvCorreo` (IN `IN_cargoEnProy` VARCHAR(20), IN `IN_idProyecto` INT, IN `IN_cicloEvaluacion` INT, OUT `out_codResp` CHAR(2), OUT `out_msjResp` VARCHAR(200))   BEGIN
  DECLARE num_cantDiasVigencia INT;
  DECLARE num_idEDDEvalProyEmp INT;
  DECLARE date_fechaIniVigenciaEvalRef DATE;  
  DECLARE num_diasVigenciaEvalRef INT;
  DECLARE bool_CorreoLinkEnviadoRef TINYINT;
  DECLARE date_fechaIniVigenciaEvalColab DATE;
  DECLARE num_diasVigenciaEvalRefColab INT;
  DECLARE bool_CorreoLinkEnviadoColab TINYINT;
  DECLARE done INT;
  DECLARE num_contadorResp INT;
  DECLARE num_auxIdEvaluado INT;
  DECLARE num_contReg INT DEFAULT 0;
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  
  DECLARE cur1 CURSOR FOR 
  SELECT epe.idEDDEvalProyEmp, epe.fechaIniVigenciaEvalRef, epe.diasVigenciaEvalRef, epe.CorreoLinkEnviadoRef, epe.fechaIniVigenciaEvalColab, epe.diasVigenciaEvalRefColab, epe.CorreoLinkEnviadoColab FROM eddevalproyemp epe
	INNER JOIN eddproyemp ep ON (ep.idEDDProyEmp = epe.idEDDProyEmpEvaluador AND ep.idProyecto = IN_idProyecto AND ep.cargoEnProy = IN_cargoEnProy AND epe.cicloEvaluacion = IN_cicloEvaluacion);
    
  DECLARE CONTINUE HANDLER FOR NOT FOUND 
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;

      IF num_contReg <= 0 THEN
        SET done = 1;
        SET out_codResp = '02';
        SET out_msjResp = concat('SIN DATOS (', str_msgMySQL, ')');
        SELECT out_codResp, out_msjResp;

      ELSE
        SET done = 2;
      END IF;
    END;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      

      SET out_codResp = '01';
      SET out_msjResp = str_msgMySQL;
        SELECT out_codResp, out_msjResp;

    END;


  -- Obtiene cantidad de dias de vigencia 
  SELECT datoNoVisible INTO num_cantDiasVigencia 
  FROM confDatos WHERE tipoConfDato = 'EMAIL' AND subTipoConfDato = 'DIAS_VIGENCIA' AND isActive = 1;

 -- SET num_contadorResp = 1;
 -- SET num_auxIdEvaluado = 0;
 
  OPEN cur1;
  loop_actRegCorreo:LOOP
    FETCH cur1 INTO num_idEDDEvalProyEmp, date_fechaIniVigenciaEvalRef, num_diasVigenciaEvalRef, bool_CorreoLinkEnviadoRef, date_fechaIniVigenciaEvalColab, num_diasVigenciaEvalRefColab, bool_CorreoLinkEnviadoColab;
    -- Si no encuentra más registros, sale del loop.
    IF done = 1 OR done = 2 THEN
      LEAVE loop_actRegCorreo;
    END IF;

    SET num_contReg = num_contReg + 1;
	
    IF TRIM(UPPER(IN_cargoEnProy)) IN ('REFERENTE','REFERENTES') THEN
    	UPDATE eddevalproyemp SET
        fechaIniVigenciaEvalRef = now(),
        diasVigenciaEvalRef = num_cantDiasVigencia,
        CorreoLinkEnviadoRef = 1
        WHERE idEDDEvalProyEmp = num_idEDDEvalProyEmp;
        
    ELSEIF TRIM(UPPER(IN_cargoEnProy)) IN ('COLABORADOR','COLABORADORES') THEN
        UPDATE eddevalproyemp SET
            fechaIniVigenciaEvalColab = now(),
            diasVigenciaEvalRefColab = num_cantDiasVigencia,
            CorreoLinkEnviadoColab = 1
            WHERE idEDDEvalProyEmp = num_idEDDEvalProyEmp;
    END IF;
    

  END LOOP;

  CLOSE cur1;

  IF done = 2 THEN
    SET out_codResp = '00';
    SET out_msjResp = 'Success';
    SELECT out_codResp, out_msjResp;

    
  END IF;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_CambiarEvalRespondida` (IN `IN_idEDDEvalProyEmp` INT, IN `IN_fechaIniEvaluacion` DATETIME, IN `IN_fechaFinEvaluacion` DATETIME, OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN

  IF IN_idEDDEvalProyEmp <= 0 THEN
     SET OUT_MJERESULT = "EL IN_idEDDEvalProyEmp debe ser mayor a cero";
      SELECT OUT_MJERESULT;

  ELSE
    UPDATE eddevalproyemp SET
    fechaIni = IN_fechaIniEvaluacion,
    fechaFin = IN_fechaFinEvaluacion,
    evalRespondida = 1
    WHERE 
    idEDDEvalProyEmp = IN_idEDDEvalProyEmp ;

  END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_CambiarVerEnDashboard` (IN `IN_idEDDEvalProyResp` INT, IN `IN_verEnDashboard` TINYINT, IN `IN_ordenDashboard` INT, IN `IN_idEmpleado` INT, IN `IN_idEDDProyEmpEvaluado` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;
          SET str_mjeInterno = CONCAT('SP_CambiarVerEnDashboard: Error al insertar registro --> IN_idEDDEvalProyResp: [', IN_idEDDEvalProyResp, '] - IN_verEnDashboard: [', IN_verEnDashboard, '] - IN_ordenDashboard: [', IN_ordenDashboard, ']');

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_CambiarVerEnDashboard', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;
          SET OUT_CODRESULT = '13';
          SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
          SELECT OUT_MJERESULT, OUT_CODRESULT;
  	END;
            IF IN_idEDDEvalProyResp IS NULL 
            OR IN_verEnDashboard IS NULL 
            OR IN_ordenDashboard IS NULL

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_idEDDEvalProyResp <= 0 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'IN_idEDDEvalProyResp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_verEnDashboard NOT IN (0,1) THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'IN_verEnDashboard debe ser verdadero o falso';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
             UPDATE eddevalproyresp SET 
             verEnDashboard = IN_verEnDashboard, 
             ordenDashboard = IN_ordenDashboard
             WHERE idEDDEvalProyResp = IN_idEDDEvalProyResp;

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';
                
    SELECT 
    OUT_CODRESULT, OUT_MJERESULT,
    proyResp.idEDDEvalProyResp,
    proyResp.idEDDEvaluacion, 
    proyResp.idEDDProyEmp, 
    UPPER(proyResp.respuesta) as respuesta, 
    proyResp.idEDDEvalProyEmp, 
    proyResp.idEDDEvalRespPreg, 
    UPPER(pregunta.nomPregunta) as pregunta,
    pregunta.ordenPregunta,
    UPPER(empEvaluado.nomEmpleado) as nomEvaluado,
    UPPER(empEvaluador.nomEmpleado) as nomEvaluador,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    proyResp.verEnDashboard,
    proyResp.ordenDashboard,
    UPPER(competencia.nomCompetencia) as nomCompetencia
    FROM eddEvalProyResp proyResp
    LEFT JOIN eddevalpregunta pregunta ON (proyResp.idEDDEvalPregunta = pregunta.idEDDEvalPregunta AND pregunta.isActive = 1)
    LEFT JOIN eddevalcompetencia competencia ON (competencia.idEDDEvalCompetencia = pregunta.idEDDEvalCompetencia AND competencia.isActive = 1)
    INNER JOIN eddproyemp proyEmp ON (proyEmp.idEDDProyEmp = IN_idEmpleado)
    INNER JOIN eddevalproyemp evalproyEmp ON (evalproyEmp.idEDDEvalProyEmp = proyResp.idEDDEvalProyEmp 
                                              AND evalproyEmp.evalRespondida = 1 
                                              AND evalproyEmp.idEDDProyEmpEvaluador = proyEmp.idEDDProyEmp
                                              AND evalproyEmp.idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado
                                             )
    INNER JOIN eddevalproyemp empEvaluados ON (proyResp.idEDDEvalProyEmp = empEvaluados.idEDDEvalProyEmp)                                         
    INNER JOIN eddproyemp proyEmpEvaluado ON (proyEmpEvaluado.idEDDProyEmp = empEvaluados.idEDDProyEmpEvaluado)                   
    INNER JOIN eddproyemp proyEmpEvaluador ON (proyEmpEvaluador.idEDDProyEmp = empEvaluados.idEDDProyEmpEvaluador)
    INNER JOIN empleado empEvaluado ON (empEvaluado.idEmpleado = proyEmpEvaluado.idEmpleado)
    INNER JOIN empleado empEvaluador ON (empEvaluador.idEmpleado = proyEmpEvaluador.idEmpleado)
    INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
    WHERE proyResp.idEDDEvalProyResp = IN_idEDDEvalProyResp;
  END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_COMENTARIOS_EVAL` (IN `in_idEvaluacion` INT, IN `IN_idProyecto` INT, IN `IN_cicloEvaluacion` INT, OUT `out_codResp` CHAR(2), OUT `out_msjResp` VARCHAR(200))   BEGIN
  DECLARE num_cantMjesADesplegar INT;
  DECLARE num_idEDDProyEmpEvaluado INT;
  DECLARE num_idEvaluador INT;  
  DECLARE str_nomEvaluador VARCHAR(50);
  DECLARE num_idEvaluado INT;
  DECLARE str_nomEvaluado VARCHAR(50);
  DECLARE num_ordenDashboard INT;
  DECLARE str_respuesta VARCHAR(500);
  DECLARE done INT;
  DECLARE num_contadorResp INT;
  DECLARE num_auxIdEvaluado INT;
  DECLARE num_contReg INT DEFAULT 0;
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE cur1 CURSOR FOR SELECT epe.idEDDProyEmpEvaluado, em1.idEmpleado idEvaluador, em1.nomEmpleado nomEvaluador, em2.idEmpleado idEvaluado, em2.nomEmpleado nomEvaluado, epr.ordenDashboard, epr.respuesta
                          FROM eddproyemp pe
     inner join eddevalproyemp epe on (pe.idProyecto = IN_idProyecto and epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp and pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion) 
                            INNER JOIN eddEvalProyResp epr ON (epe.idEDDEvaluacion = in_idEvaluacion AND epe.evalRespondida = 1 AND epe.isActive = 1 AND epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp)
                            INNER JOIN eddProyEmp pe1 ON (pe1.idEDDProyEmp = epe.idEDDProyEmpEvaluador)
                            INNER JOIN empleado em1 ON (em1.idEmpleado = pe1.idEmpleado)
                            INNER JOIN eddProyEmp pe2 ON (pe2.idEDDProyEmp = epe.idEDDProyEmpEvaluado)
                            INNER JOIN empleado em2 ON (em2.idEmpleado = pe2.idEmpleado)
                          WHERE epr.respuesta IS NOT NULL
                            AND epr.verEnDashboard = 1
                            AND epr.ordenDashboard IS NOT NULL
                          ORDER BY em2.idEmpleado, epr.ordenDashboard;
  DECLARE CONTINUE HANDLER FOR NOT FOUND 
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;

      IF num_contReg <= 0 THEN
        SET done = 1;
        SET out_codResp = '02';
        SET out_msjResp = concat('SIN DATOS (', str_msgMySQL, ')');
        SELECT out_codResp, out_msjResp;

      ELSE
        SET done = 2;
      END IF;
    END;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      

      SET out_codResp = '01';
      SET out_msjResp = str_msgMySQL;
        SELECT out_codResp, out_msjResp;

    END;

  -- DROP TABLE IF EXISTS tmpComentarios;
  CREATE TEMPORARY TABLE tmpComentarios (
    idEDDProyEmpEvaluado INT,
    idEvaluador INT,
    nomEvaluador VARCHAR(50),
    idEvaluado INT,
    nomEvaluado VARCHAR(50),
    ordenDashboard INT,
    respuesta VARCHAR(500)
  ) Engine=InnoDB;

 

  -- Obtiene cantidad de mensajes a desplegar de cada evaluador de la encuesta recibida.alter
  SELECT datoVisible INTO num_cantMjesADesplegar 
  FROM confDatos WHERE tipoConfDato = 'COMENTARIOS' AND subTipoConfDato = 'CANT_MAX_EVAL' AND isActive = 1;

  SET num_contadorResp = 1;
  SET num_auxIdEvaluado = 0;

  OPEN cur1;
  loop_respEval: LOOP
    FETCH cur1 INTO num_idEDDProyEmpEvaluado, num_idEvaluador, str_nomEvaluador, num_idEvaluado, str_nomEvaluado, num_ordenDashboard, str_respuesta;
    -- Si no encuentra más registros, sale del loop.
    IF done = 1 OR done = 2 THEN
      LEAVE loop_respEval;
    END IF;

    SET num_contReg = num_contReg + 1;

    IF num_auxIdEvaluado != num_idEvaluado THEN
      SET num_contadorResp = 1;
    END IF;

--   IF (num_auxIdEvaluado = 0 OR num_auxIdEvaluado = num_idEvaluado) AND num_cantMjesADesplegar > num_contadorResp THEN
    IF num_cantMjesADesplegar >= num_contadorResp THEN
      INSERT INTO tmpComentarios (idEDDProyEmpEvaluado, idEvaluador, nomEvaluador, idEvaluado, nomEvaluado, ordenDashboard, respuesta)
        VALUES(num_idEDDProyEmpEvaluado, num_idEvaluador, str_nomEvaluador, num_idEvaluado, str_nomEvaluado, num_ordenDashboard, str_respuesta);

      SET num_contadorResp = num_contadorResp + 1;      
    END IF;

    SET num_auxIdEvaluado = num_idEvaluado;
  END LOOP;

  CLOSE cur1;

  IF done = 2 THEN
    SET out_codResp = '00';
    SET out_msjResp = 'Success';
    SELECT *, out_codResp, out_msjResp FROM tmpComentarios;

 
    
  END IF;

  DROP TABLE IF EXISTS tmpComentarios;


END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_COMPETENCIAS_EVAL` (IN `in_idEvaluacion` INT, IN `IN_idProyecto` INT, IN `IN_cicloEvaluacion` INT, OUT `out_codResp` CHAR(2), OUT `out_msjResp` VARCHAR(200))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      

      SET out_codResp = '01';
      SET out_msjResp = str_msgMySQL;
    END;

    -- Obtiene las competencias incluidas en una encuesta, asociadas a cada evaluado y
  -- los porcentajes de satisfacción (BUENO / MUY BUENO) por evaluado para cada una de estas.
    
    SET out_codResp = '00';
  SET out_msjResp = 'Success'; 

 SELECT out_codResp, out_msjResp, UPPER(em1.nomEmpleado) nomEvaluador, UPPER(em2.nomEmpleado) nomEmpleado, a.nomCompetencia, a.cantPregComp, a.cantRespOK, a.porcAprobComp
  FROM (
      
    SELECT epe.idEDDProyEmpEvaluador, epe.idEDDProyEmpEvaluado, ec.nomCompetencia, 
    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantPregComp, 
    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK, 
    round(sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) * 100 / 
    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)), 2) porcAprobComp
    FROM eddproyemp pe
     inner join eddevalproyemp epe on (pe.idProyecto = IN_idProyecto and epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp and pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion) 
      INNER JOIN eddEvalProyResp epr ON (epe.idEDDEvaluacion = in_idEvaluacion AND epe.evalRespondida = 1 AND epe.isActive = 1 AND epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp)  
      INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1 AND erp.nomRespPreg != '<TEXTO>')
      INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta and ep.isActive = 1)
      INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)
    GROUP BY epe.idEDDProyEmpEvaluador, epe.idEDDProyEmpEvaluado, ec.nomCompetencia
    ORDER BY ec.nomCompetencia, epe.idEDDProyEmpEvaluador) a
    
    INNER JOIN eddProyEmp pe1 ON (pe1.idEDDProyEmp = a.idEDDProyEmpEvaluador)
    INNER JOIN eddProyEmp pe2 ON (pe2.idEDDProyEmp = a.idEDDProyEmpEvaluado)
    INNER JOIN empleado em1 ON (em1.idEmpleado = pe1.idEmpleado)
    INNER JOIN empleado em2 ON (em2.idEmpleado = pe2.idEmpleado);

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_COMPETENCIAS_GENERAL_EVAL` (IN `IN_idCliente` VARCHAR(30), IN `IN_idServicio` VARCHAR(30), IN `IN_idProyecto` VARCHAR(30), IN `IN_tipoComparacion` VARCHAR(30), IN `IN_tipoCargo` VARCHAR(30), IN `IN_fechaIni` DATETIME, IN `IN_fechaFin` DATETIME, IN `IN_cicloEvaluacion` INT, OUT `out_codResp` CHAR(2), OUT `out_msjResp` VARCHAR(200))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      

      SET out_codResp = '01';
      SET out_msjResp = str_msgMySQL;
      SELECT out_codResp, out_msjResp;

    END;

        IF FN_validarMultiIDS(IN_idCliente) = 0 THEN 
            SET out_codResp = '02';
            SET out_msjResp = 'El/los id los clientes son inválidos';
            SELECT out_codResp, out_msjResp;
        
        ELSEIF TRIM(UPPER(IN_tipoComparacion)) NOT IN ('GENERAL','MES', 'AÑO') THEN
            SET out_codResp = '04';
            SET out_msjResp = 'El IN_tipoComparacion debe ser "GENERAL" o "MES".';
            SELECT out_codResp, out_msjResp;
        ELSEIF TRIM(UPPER(IN_tipoCargo)) NOT IN ('REFERENTE','COLABORADOR', 'TODOS') THEN
            SET out_codResp = '05';
            SET out_msjResp = 'El IN_tipoCargo debe ser "REFERENTE","COLABORADOR" O "TODOS"(sin filtro).';
            SELECT out_codResp, out_msjResp;    
        ELSEIF IN_fechaINI = IN_fechaFin THEN   
            SET out_codResp = '06';
            SET out_msjResp = 'Las fechas no pueden ser iguales.';
            SELECT out_codResp, out_msjResp;     

        ELSE    

    -- Obtiene las competencias incluidas en una encuesta, asociadas a cada evaluado y
    -- los porcentajes de satisfacción (BUENO / MUY BUENO) por evaluado para cada una de estas.

        IF TRIM(UPPER(IN_tipoComparacion)) = 'GENERAL' AND TRIM(UPPER(IN_tipoCargo)) = 'TODOS' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                SET out_codResp = '00';
                SET out_msjResp = 'Success'; 
                SELECT out_codResp, out_msjResp, a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.nomCompetencia, a.tipoProyecto,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                a.cantRespOK,
                a.cantPregComp, a.cantResp, 
                a.cicloEvaluacion
                FROM (
                    SELECT
                    cli.idCliente,
                    UPPER(cli.nomCliente) nomCliente,
                    ser.idServicio,
                    UPPER(ser.nomServicio) nomServicio,
                    pe.idProyecto,
                    UPPER(proy.nomProyecto) nomProyecto,
                    UPPER(proy.tipoProyecto) tipoProyecto,
                    DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                    DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                    count(*) cantPregComp,
                    sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                    UPPER(ec.nomCompetencia) nomCompetencia,
                    epe.cicloEvaluacion
                    FROM eddproyemp pe
                    INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                    INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                    INNER JOIN eddproyecto proy ON ( proy.idServicio = ser.idServicio AND proy.isActive = 1)
                    INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                    INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                    INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                    INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                    INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                    WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                    GROUP BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion , ec.nomCompetencia
                    ORDER BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia ) a
                INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia 
                ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN  

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                SET out_codResp = '03';
                SET out_msjResp = 'El/los id del servicio son inválidos';
                SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 
                    SELECT out_codResp, out_msjResp, a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.nomCompetencia, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia
                        ORDER BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia ) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia
                    ;

                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN  

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                SET out_codResp = '03';
                SET out_msjResp = 'El/los id del servicio son inválidos';
                SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 
                    SELECT out_codResp, out_msjResp, a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.nomCompetencia, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia
                        ORDER BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia ) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia
                    ;

                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN  

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '04';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 
                    SELECT out_codResp, out_msjResp, a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.nomCompetencia, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente, ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia ) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN  

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '04';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 
                    SELECT out_codResp, out_msjResp, a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK, a.nomCompetencia,
                    a.cantPregComp, a.cantResp, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente, ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente, ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia  ) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
            
            END IF;

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'MES' AND TRIM(UPPER(IN_tipoCargo)) = 'TODOS' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente, ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), ec.nomCompetencia, pe.idProyecto, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion,
                    YEAR(a.epeFechaIni)*100 + MONTH(a.epeFechaIni)
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                        SET out_codResp = '00';
                        SET out_msjResp = 'Success'; 

                        SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                        a.cantRespOK,
                        a.nomCompetencia, a.cicloEvaluacion
                        FROM (
                            SELECT
                            cli.idCliente,
                            UPPER(cli.nomCliente) nomCliente,
                            ser.idServicio,
                            UPPER(ser.nomServicio) nomServicio,
                            pe.idProyecto,
                            UPPER(proy.nomProyecto) nomProyecto,
                            UPPER(proy.tipoProyecto) tipoProyecto,
                            DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                            DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                            count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                            sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                            UPPER(ec.nomCompetencia) nomCompetencia,
                            epe.cicloEvaluacion
                            FROM eddproyemp pe
                            INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                            INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                            INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                            INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                            INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                            INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                            INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                            INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                            WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                            GROUP BY cli.nomCliente, ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), ec.nomCompetencia, pe.idProyecto, epe.cicloEvaluacion
                            ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                        INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                        GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, YEAR(a.epeFechaIni)*100 + MONTH(a.epeFechaIni), a.cicloEvaluacion
                        ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;
                END IF;   

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = ''  AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                        SET out_codResp = '00';
                        SET out_msjResp = 'Success'; 

                        SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                        a.cantRespOK,
                        a.cantPregComp, a.cantResp, 
                        a.nomCompetencia, a.cicloEvaluacion
                        FROM (
                            SELECT
                            cli.idCliente,
                            UPPER(cli.nomCliente) nomCliente,
                            ser.idServicio,
                            UPPER(ser.nomServicio) nomServicio,
                            pe.idProyecto,
                            UPPER(proy.nomProyecto) nomProyecto,
                            UPPER(proy.tipoProyecto) tipoProyecto,
                            DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                            DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                            count(*) cantPregComp,
                            sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                            sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                            UPPER(ec.nomCompetencia) nomCompetencia,
                            epe.cicloEvaluacion
                            FROM eddproyemp pe
                            INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                            INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                            INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                            INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                            INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                            INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                            INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                            INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                            WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                            GROUP BY cli.nomCliente, ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), ec.nomCompetencia, pe.idProyecto, epe.cicloEvaluacion
                            ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                        INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                        GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, YEAR(a.epeFechaIni)*100 + MONTH(a.epeFechaIni), a.cicloEvaluacion
                        ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;
                END IF;   
    
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 
            
                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                        SET out_codResp = '00';
                        SET out_msjResp = 'Success'; 

                        SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin,a.tipoProyecto,
                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                        a.cantRespOK,
                        a.cantPregComp, a.cantResp,
                        a.nomCompetencia, a.cicloEvaluacion
                        FROM (
                            SELECT
                            cli.idCliente,
                            UPPER(cli.nomCliente) nomCliente,
                            ser.idServicio,
                            UPPER(ser.nomServicio) nomServicio,
                            pe.idProyecto,
                            UPPER(proy.nomProyecto) nomProyecto,
                            UPPER(proy.tipoProyecto) tipoProyecto,
                            DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                            DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                            count(*) cantPregComp,
                            sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                            sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                            UPPER(ec.nomCompetencia) nomCompetencia,
                            epe.cicloEvaluacion
                            FROM eddproyemp pe
                            INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                            INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                            INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                            INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                            INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                            INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                            INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                            INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                            WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                            GROUP BY cli.nomCliente, ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), ec.nomCompetencia, pe.idProyecto, epe.cicloEvaluacion
                            ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                        INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                        GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                        ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 
            
                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                        SET out_codResp = '00';
                        SET out_msjResp = 'Success'; 

                        SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,

                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                        SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                        a.cantRespOK, 
                        a.cantPregComp, a.cantResp,
                        a.nomCompetencia, a.cicloEvaluacion
                        FROM (
                            SELECT
                            cli.idCliente,
                            UPPER(cli.nomCliente) nomCliente,
                            ser.idServicio,
                            UPPER(ser.nomServicio) nomServicio,
                            pe.idProyecto,
                            UPPER(proy.nomProyecto) nomProyecto,
                            UPPER(proy.tipoProyecto) tipoProyecto,
                            DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                            DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                            count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                            sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                            UPPER(ec.nomCompetencia) nomCompetencia,
                            epe.cicloEvaluacion
                            FROM eddproyemp pe
                            INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                            INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                            INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                            INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                            INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                            INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                            INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                            INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                            WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                            GROUP BY cli.nomCliente, ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), ec.nomCompetencia, pe.idProyecto, epe.cicloEvaluacion
                            ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                        INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                        GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                        ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;    
             
            END IF;    

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'AÑO' AND TRIM(UPPER(IN_tipoCargo)) = 'TODOS' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), ec.nomCompetencia, pe.idProyecto, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, a.porcAprobComp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)),
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), ec.nomCompetencia,pe.idProyecto, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), ec.nomCompetencia,pe.idProyecto, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, a.porcAprobComp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
              
            END IF;

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'GENERAL' AND TRIM(UPPER(IN_tipoCargo)) = 'REFERENTE' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN
        
                SET out_codResp = '00';
                SET out_msjResp = 'Success'; 

                SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                a.cantRespOK,
                a.cantPregComp, a.cantResp,
                a.nomCompetencia, a.cicloEvaluacion
                FROM (
                    SELECT
                    cli.idCliente,
                    UPPER(cli.nomCliente) nomCliente,
                    ser.idServicio,
                    UPPER(ser.nomServicio) nomServicio,
                    pe.idProyecto,
                    UPPER(proy.nomProyecto) nomProyecto,
                    UPPER(proy.tipoProyecto) tipoProyecto,
                    DATE_FORMAT(epe.fechaIni, "%d/%m/%Y %H:%i:%s") as epeFechaIni, 
                    DATE_FORMAT(epe.fechaFin, "%d/%m/%Y %H:%i:%s") as epeFechaFin,
                    count(*) cantPregComp,
                    sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                    UPPER(ec.nomCompetencia) nomCompetencia,
                    epe.cicloEvaluacion
                    FROM eddproyemp pe
                    INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                    INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                    INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                    INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                    INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                    INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                    INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                    INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                    WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                    GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                    ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
           
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;   

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                    END IF;       

             END IF;

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'MES' AND TRIM(UPPER(IN_tipoCargo)) = 'REFERENTE' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN
            
                SET out_codResp = '00';
                SET out_msjResp = 'Success'; 

                SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,  
                a.cantRespOK,
                a.cantPregComp, a.cantResp,
                a.nomCompetencia, a.cicloEvaluacion
                FROM (
                    SELECT
                    cli.idCliente,
                    UPPER(cli.nomCliente) nomCliente,
                    ser.idServicio,
                    UPPER(ser.nomServicio) nomServicio,
                    pe.idProyecto,
                    UPPER(proy.nomProyecto) nomProyecto,
                    UPPER(proy.tipoProyecto) tipoProyecto,
                    DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                    DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                    count(*) cantPregComp,
                    sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                    UPPER(ec.nomCompetencia) nomCompetencia,
                    epe.cicloEvaluacion
                    FROM eddproyemp pe
                    INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                    INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                    INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                    INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                    INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                    INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                    INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                    INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                    WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                    GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                    ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  
                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 and epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  
                END IF;    

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

                END IF;
                    
            END IF;

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'AÑO' AND TRIM(UPPER(IN_tipoCargo)) = 'REFERENTE' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                SET out_codResp = '00';
                SET out_msjResp = 'Success'; 

                SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                a.cantRespOK,
                a.cantPregComp, a.cantResp,
                a.nomCompetencia, a.cicloEvaluacion
                FROM (
                    SELECT
                    cli.idCliente,
                    UPPER(cli.nomCliente) nomCliente,
                    ser.idServicio,
                    UPPER(ser.nomServicio) nomServicio,
                    pe.idProyecto,
                    UPPER(proy.nomProyecto) nomProyecto,
                    UPPER(proy.tipoProyecto) tipoProyecto,
                    DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                    DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                    count(*) cantPregComp,
                    sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                    UPPER(ec.nomCompetencia) nomCompetencia,
                    epe.cicloEvaluacion
                    FROM eddproyemp pe
                    INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                    INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                    INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                    INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                    INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                    INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                    INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                    INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)
            
                    WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                    GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                    ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)
                

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                    
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)
                

                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, 
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)
                
                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)
                
                        WHERE pe.cargoEnProy IN ('REFERENTE') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a 
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;  

                END IF;

            END IF;   

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'GENERAL' AND TRIM(UPPER(IN_tipoCargo)) = 'COLABORADOR' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                SET out_codResp = '00';
                SET out_msjResp = 'Success'; 

                SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                a.cantRespOK,
                a.cantPregComp, a.cantResp,
                a.nomCompetencia, a.cicloEvaluacion
                FROM (
                    SELECT
                    cli.idCliente,
                    UPPER(cli.nomCliente) nomCliente,
                    ser.idServicio,
                    UPPER(ser.nomServicio) nomServicio,
                    pe.idProyecto,
                    UPPER(proy.nomProyecto) nomProyecto,
                    UPPER(proy.tipoProyecto) tipoProyecto,
                    DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                    DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                    count(*) cantPregComp,
                    sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                    UPPER(ec.nomCompetencia) nomCompetencia,
                    epe.cicloEvaluacion
                    FROM eddproyemp pe
                    INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                    INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                    INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                    INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                    INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                    INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                    INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                    INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                    WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                    GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                    ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                        SET out_codResp = '03';
                        SET out_msjResp = 'El/los id del servicio son inválidos';
                        SELECT out_codResp, out_msjResp;
                        
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;
                END IF;    

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                        SET out_codResp = '03';
                        SET out_msjResp = 'El/los id del servicio son inválidos';
                        SELECT out_codResp, out_msjResp;
                        
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;
                END IF;    
         
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, 
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;


                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;


                END IF;

            END IF;

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'MES' AND TRIM(UPPER(IN_tipoCargo)) = 'COLABORADOR' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                SET out_codResp = '00';
                SET out_msjResp = 'Success'; 

                SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                a.cantRespOK,
                a.cantPregComp, a.cantResp,
                a.nomCompetencia, a.cicloEvaluacion
                FROM (
                    SELECT
                    cli.idCliente,
                    UPPER(cli.nomCliente) nomCliente,
                    ser.idServicio,
                    UPPER(ser.nomServicio) nomServicio,
                    pe.idProyecto,
                    UPPER(proy.nomProyecto) nomProyecto,
                    UPPER(proy.tipoProyecto) tipoProyecto,
                    DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                    DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                    count(*) cantPregComp,
                    sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                    UPPER(ec.nomCompetencia) nomCompetencia,
                    epe.cicloEvaluacion
                    FROM eddproyemp pe
                    INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                    INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                    INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                    INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                    INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                    INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                    INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                    INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                    WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                    GROUP BY cli.nomCliente,ser.nomServicio,pe.idProyecto, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                    ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                 IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                        SET out_codResp = '03';
                        SET out_msjResp = 'El/los id del servicio son inválidos';
                        SELECT out_codResp, out_msjResp;
                        
                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;
                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN

                 IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                        SET out_codResp = '03';
                        SET out_msjResp = 'El/los id del servicio son inválidos';
                        SELECT out_codResp, out_msjResp;
                        
                ELSE
                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;
                END IF;
        
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%m/%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%m/%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni)*100 + MONTH(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion 
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia;

                END IF;
            
            END IF;

        ELSEIF TRIM(UPPER(IN_tipoComparacion)) = 'AÑO' AND TRIM(UPPER(IN_tipoCargo)) = 'COLABORADOR' THEN

            IF TRIM(IN_idServicio) = '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN
                    
                SET out_codResp = '00';
                SET out_msjResp = 'Success'; 

                SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                a.cantRespOK,
                a.cantPregComp, a.cantResp,
                a.nomCompetencia, a.cicloEvaluacion
                FROM (
                    SELECT
                    cli.idCliente,
                    UPPER(cli.nomCliente) nomCliente,
                    ser.idServicio,
                    UPPER(ser.nomServicio) nomServicio,
                    pe.idProyecto,
                    UPPER(proy.nomProyecto) nomProyecto,
                    UPPER(proy.tipoProyecto) tipoProyecto,
                    DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                    DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                    count(*) cantPregComp,
                    sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                    sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                    UPPER(ec.nomCompetencia) nomCompetencia,
                    epe.cicloEvaluacion
                    FROM eddproyemp pe
                    INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                    INNER JOIN servicio ser ON (ser.idCliente = cli.idCliente AND ser.isActive = 1)
                    INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                    INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                    INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                    INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                    INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                    INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                    WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                    GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                    ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia; 

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion = 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                        SET out_codResp = '03';
                        SET out_msjResp = 'El/los id del servicio son inválidos';
                        SELECT out_codResp, out_msjResp;
                        
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia; 


                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) = '' AND IN_cicloEvaluacion != 0 THEN

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                        SET out_codResp = '03';
                        SET out_msjResp = 'El/los id del servicio son inválidos';
                        SELECT out_codResp, out_msjResp;
                        
                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia; 


                END IF;
            
            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion = 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp,a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp,
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia; 

                END IF;

            ELSEIF TRIM(IN_idServicio) != '' AND TRIM(IN_idProyecto) != '' AND IN_cicloEvaluacion != 0 THEN 

                IF FN_validarMultiIDS(IN_idServicio) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del servicio son inválidos';
                    SELECT out_codResp, out_msjResp;
                ELSEIF FN_validarMultiIDS(IN_idProyecto) = 0 THEN
                    SET out_codResp = '03';
                    SET out_msjResp = 'El/los id del proyecto son inválidos';
                    SELECT out_codResp, out_msjResp;

                ELSE

                    SET out_codResp = '00';
                    SET out_msjResp = 'Success'; 

                    SELECT out_codResp, out_msjResp, a.idCliente, a.nomCliente, a.idServicio, a.nomServicio, a.idProyecto, a.nomProyecto, a.epeFechaIni, a.epeFechaFin, a.tipoProyecto,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('REFERENTE','REFERENTES'), 1,0 )) cantReferentes,
                    SUM(IF(UPPER(pe2.cargoEnProy) IN ('COLABORADOR','COLABORADORES'), 1,0 )) cantColaboradores,
                    a.cantRespOK,
                    a.cantPregComp, a.cantResp, 
                    a.nomCompetencia, a.cicloEvaluacion
                    FROM (
                        SELECT
                        cli.idCliente,
                        UPPER(cli.nomCliente) nomCliente,
                        ser.idServicio,
                        UPPER(ser.nomServicio) nomServicio,
                        pe.idProyecto,
                        UPPER(proy.nomProyecto) nomProyecto,
                        UPPER(proy.tipoProyecto) tipoProyecto,
                        DATE_FORMAT(epe.fechaIni, "%Y") as epeFechaIni, 
                        DATE_FORMAT(epe.fechaFin, "%Y") as epeFechaFin,
                        count(*) cantPregComp,
                        sum(IF(erp.nomRespPreg IN ('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO', 'NO SATISFACTORIO', 'MEDIO'), 1, 0)) cantResp,
                        sum(IF(erp.nomRespPreg IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) cantRespOK,
                        UPPER(ec.nomCompetencia) nomCompetencia,
                        epe.cicloEvaluacion
                        FROM eddproyemp pe
                        INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                        INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                        INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                        INNER JOIN eddevalproyemp epe ON (pe.idProyecto = proy.idEDDProyecto  AND epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion)
                        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.evalRespondida = 1 AND epe.isActive = 1)  
                        INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1)
                        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = erp.idEDDEvalPregunta AND ep.tipoResp = 'A' AND ep.isActive = 1)
                        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia and ec.isActive = 1)

                        WHERE pe.cargoEnProy IN ('COLABORADOR') AND epe.fechaIni BETWEEN IN_fechaIni AND IN_fechaFin
                        GROUP BY cli.nomCliente,ser.nomServicio, YEAR(epe.fechaIni), pe.idProyecto, ec.nomCompetencia, epe.cicloEvaluacion
                        ORDER BY cli.nomCliente,ser.nomServicio, pe.idProyecto, epe.cicloEvaluacion, ec.nomCompetencia) a
                    INNER JOIN eddProyEmp pe2 ON (pe2.idProyecto = a.idProyecto)
                    GROUP BY a.nomCliente, a.nomServicio, a.idProyecto, a.nomCompetencia, a.cicloEvaluacion
                    ORDER BY a.nomCliente, a.nomServicio, a.idProyecto, a.cicloEvaluacion, a.nomCompetencia; 

                END IF;

            END IF;
        END IF;
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_desactivarImpugnacionEmp` (IN `IN_idImpugnacionEmp` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_desactivarImpugnacionEmp: Error al modificar registro --> IN_idImpugnacionEmp: [', IN_idImpugnacionEmp, ']');

 

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_desactivarImpugnacionEmp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idImpugnacionEmp IS NULL 

         THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF IN_idImpugnacionEmp <= 0 THEN
                   SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El id de impugnación debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;       

            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;

                UPDATE ihhimpugnacionemp 
                SET 
                isActive = 0
                WHERE idImpugnacionEmp = IN_idImpugnacionEmp;

                COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';
            END IF;
            
               SELECT OUT_MJERESULT, OUT_CODRESULT;
        END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_duplicarRefEddEvalProyEmp` (OUT `out_codResp` CHAR(2), OUT `out_msjResp` VARCHAR(200))   BEGIN
  DECLARE num_cantDiasIntervalo INT;
  DECLARE int_idEDDEvaluacion INT;
  DECLARE int_idEDDEvalProyEmp INT;
  DECLARE int_idEDDProyEmpEvaluador INT;  
  DECLARE int_idEDDProyEmpEvaluado INT;  
  DECLARE int_cicloEvaluacion INT;  
  DECLARE date_fechaIniVigenciaProyecto DATE;
  DECLARE int_nuevoCicloEvaluacion INT;
  DECLARE tinyint_vigenciaProyecto TINYINT;
  DECLARE int_idProyecto INT;
  DECLARE varchar_cargoEnProy VARCHAR(50);
  DECLARE varchar_tipoProyecto VARCHAR(50);
  
  
  DECLARE done INT;
  DECLARE num_contadorResp INT;
  DECLARE num_auxIdEvaluado INT;
  DECLARE num_contReg INT DEFAULT 0;
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  
  DECLARE cur1 CURSOR FOR 
  SELECT 
  epe.idEDDEvalProyEmp, 
  epe.idEDDEvaluacion, 
  epe.idEDDProyEmpEvaluador, 
  epe.idEDDProyEmpEvaluado, 
  MAX(epe.cicloEvaluacion) cicloEvaluacion,
  p.fechaInicio fechaIniProyecto,
  p.idEDDProyecto idEDDProyecto,
  UPPER(ed.cargoEnProy) cargoEnProy,
  IF(p.fechaFin is not null,
      IF(DATE(p.fechaInicio) < CURRENT_DATE() AND CURRENT_DATE < DATE(p.fechaFin), 1, 0), -- fecha fin definida. Se verifica que la fecha actual esté entre el periodo establecido
      1 -- fecha fin indefinida, se considera como proyecto vigente
    ) AS vigenciaProyecto,
  UPPER(p.tipoProyecto) tipoProyecto
  
  FROM eddevalproyemp epe 
  INNER JOIN eddproyemp ed ON (ed.idEDDProyEmp = epe.idEDDProyEmpEvaluador AND ed.isActive = 1)
  INNER JOIN eddproyecto p ON (p.idEDDProyecto = ed.idProyecto AND p.isActive = 1)
  WHERE epe.isActive = 1 
  GROUP BY epe.idEDDEvaluacion, epe.idEDDProyEmpEvaluador, epe.idEDDProyEmpEvaluado;
  
    
  DECLARE CONTINUE HANDLER FOR NOT FOUND 
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;

      IF num_contReg <= 0 THEN
        SET done = 1;
        SET out_codResp = '02';
        SET out_msjResp = concat('SIN DATOS (', str_msgMySQL, ')');
        SELECT out_codResp, out_msjResp;

      ELSE
        SET done = 2;
      END IF;
    END;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      

      SET out_codResp = '01';
      SET out_msjResp = str_msgMySQL;
        SELECT out_codResp, out_msjResp;

    END;

     -- DROP TABLE IF EXISTS tmpComentarios;
  CREATE TEMPORARY TABLE tmpCiclosEval (
    numCicloEval INT,
    idProyecto INT,
    cargoEnProy VARCHAR(50)
  ) Engine=InnoDB;



 
  OPEN cur1;
  loop_duplicarRegistros:LOOP
    
    FETCH cur1 INTO int_idEDDEvalProyEmp, int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado, int_cicloEvaluacion, date_fechaIniVigenciaProyecto, int_idProyecto, varchar_cargoEnProy, tinyint_vigenciaProyecto, varchar_tipoProyecto;
    
    -- Si no encuentra más registros, sale del loop.
    IF done = 1 OR done = 2 THEN
      LEAVE loop_duplicarRegistros;
    END IF;

    SET num_contReg = num_contReg + 1;  

    -- Obtiene el valor del nuevo ciclo
    SELECT FN_EXISTE_REGEDDEVALPROYEMP(int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado) INTO int_nuevoCicloEvaluacion;
    
    -- Obtiene cantidad de dias de intervalo entre ciclos 
  SELECT datoNoVisible INTO num_cantDiasIntervalo 
  FROM confDatos WHERE tipoConfDato = 'TIPO_PROYECTO' AND UPPER(subTipoConfDato) = varchar_tipoProyecto AND isActive = 1;
    

    -- Primero valida si el proyecto está vigente, si es así, verifica que hayan transcurrido 6 meses desde el anterior ciclo y por último si el ciclo es 0, es decir, no se realizó ninguna evaluación, actualiza el valor a 1, si no continúa con otro ciclo.
    IF tinyint_vigenciaProyecto = 1 THEN -- Proyecto vigente?
      IF DATE_ADD(DATE(date_fechaIniVigenciaProyecto), INTERVAL (num_cantDiasIntervalo * int_nuevoCicloEvaluacion) DAY) = CURDATE() THEN -- Pasaron 6 meses?
        IF int_nuevoCicloEvaluacion < 1 THEN -- Ya se inició un ciclo?
        INSERT INTO tmpCiclosEval (numCicloEval, idProyecto, cargoEnProy) VALUES (int_nuevoCicloEvaluacion, int_idProyecto, varchar_cargoEnProy);

            
              -- CALL `SP_editarEddEvalProyEmp`(int_idEDDEvalProyEmp, int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado, 1, 0, 1, 'admin_SYSTEM', @p0,@p1);

        ELSEIF int_nuevoCicloEvaluacion > 1 THEN

        INSERT INTO tmpCiclosEval (numCicloEval, idProyecto, cargoEnProy) VALUES (int_nuevoCicloEvaluacion, int_idProyecto, varchar_cargoEnProy);
            
            
               CALL `SP_insertarEddEvalProyEmp`(int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado, int_nuevoCicloEvaluacion, 0, 1, 'admin_SYSTEM', @p0,@p1);

        END IF;
      END IF;
    END IF;




   
  END LOOP;

  CLOSE cur1;

  IF done = 2 THEN
    SET out_codResp = '00';
    SET out_msjResp = 'Success';
    SELECT *, out_codResp, out_msjResp from tmpCiclosEval;

    DROP TABLE IF EXISTS tmpCiclosEval;


  END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_duplicarRefEddEvalProyEmp_manual` (IN `IN_idProyecto` INT, IN `IN_cargoEnProy` VARCHAR(40), OUT `out_codResp` CHAR(2), OUT `out_msjResp` VARCHAR(200))   BEGIN
  DECLARE num_cantDiasIntervalo INT;
  DECLARE int_idEDDEvaluacion INT;
  DECLARE int_idEDDEvalProyEmp INT;
  DECLARE int_idEDDProyEmpEvaluador INT;  
  DECLARE int_idEDDProyEmpEvaluado INT;  
  DECLARE int_cicloEvaluacion INT;  
  DECLARE date_fechaIniVigenciaProyecto DATE;
  DECLARE int_nuevoCicloEvaluacion INT;
  DECLARE tinyint_vigenciaProyecto TINYINT;
  DECLARE int_idProyecto INT;
  DECLARE varchar_cargoEnProy VARCHAR(50);
  
  
  DECLARE done INT;
  DECLARE num_contadorResp INT;
  DECLARE num_auxIdEvaluado INT;
  DECLARE num_contReg INT DEFAULT 0;
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  
  DECLARE cur1 CURSOR FOR 
  SELECT 
  epe.idEDDEvalProyEmp, 
  epe.idEDDEvaluacion, 
  epe.idEDDProyEmpEvaluador, 
  epe.idEDDProyEmpEvaluado, 
  MAX(epe.cicloEvaluacion) cicloEvaluacion,
  p.fechaInicio fechaIniProyecto,
  p.idEDDProyecto idEDDProyecto,
  UPPER(ed.cargoEnProy) cargoEnProy,
  IF(p.fechaFin is not null,
      IF(DATE(p.fechaInicio) < CURRENT_DATE() AND CURRENT_DATE < DATE(p.fechaFin), 1, 0), -- fecha fin definida. Se verifica que la fecha actual esté entre el periodo establecido
      1 -- fecha fin indefinida, se considera como proyecto vigente
    ) AS vigenciaProyecto
  FROM eddevalproyemp epe 
  INNER JOIN eddproyemp ed ON (ed.idEDDProyEmp = epe.idEDDProyEmpEvaluador AND ed.isActive = 1)
  INNER JOIN eddproyecto p ON (p.idEDDProyecto = ed.idProyecto AND 
                               ed.idProyecto = IN_idProyecto AND 
                               UPPER(ed.cargoEnProy) = UPPER(IN_cargoEnProy) AND 
                               p.isActive = 1)
  WHERE epe.isActive = 1
  GROUP BY epe.idEDDEvaluacion, epe.idEDDProyEmpEvaluador, epe.idEDDProyEmpEvaluado;
  
    
  DECLARE CONTINUE HANDLER FOR NOT FOUND 
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;

      IF num_contReg <= 0 THEN
        SET done = 1;
        SET out_codResp = '02';
        SET out_msjResp = concat('SIN DATOS (', str_msgMySQL, ')');
        SELECT out_codResp, out_msjResp;

      ELSE
        SET done = 2;
      END IF;
    END;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      

      SET out_codResp = '01';
      SET out_msjResp = str_msgMySQL;
        SELECT out_codResp, out_msjResp;

    END;

     -- DROP TABLE IF EXISTS tmpComentarios;
  CREATE TEMPORARY TABLE tmpCiclosEval (
    numCicloEval INT
  ) Engine=InnoDB;


 
  OPEN cur1;
  loop_duplicarRegistros:LOOP
    
    FETCH cur1 INTO int_idEDDEvalProyEmp, int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado, int_cicloEvaluacion, date_fechaIniVigenciaProyecto, int_idProyecto, varchar_cargoEnProy, tinyint_vigenciaProyecto;
    
    -- Si no encuentra más registros, sale del loop.
    IF done = 1 OR done = 2 THEN
      LEAVE loop_duplicarRegistros;
    END IF;

    SET num_contReg = num_contReg + 1;  

    -- Obtiene el valor del nuevo ciclo
    SELECT FN_EXISTE_REGEDDEVALPROYEMP(int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado) INTO int_nuevoCicloEvaluacion;

    
    -- Primero valida si el proyecto está vigente, consutla si el ciclo es 0, es decir, no se realizó ninguna evaluación, actualiza el valor a 1, si no continúa con otro ciclo.
    IF tinyint_vigenciaProyecto = 1 THEN -- Proyecto vigente?
        IF int_nuevoCicloEvaluacion < 1 THEN -- Ya se inició un ciclo?
      
          INSERT INTO tmpCiclosEval (numCicloEval) VALUES (int_nuevoCicloEvaluacion);

          CALL `SP_editarEddEvalProyEmp`(int_idEDDEvalProyEmp, int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado, 1, 0, 1, 'admin_SYSTEM', @p0,@p1);

        ELSEIF int_nuevoCicloEvaluacion > 1 THEN

          INSERT INTO tmpCiclosEval (numCicloEval) VALUES (int_nuevoCicloEvaluacion);

         CALL `SP_insertarEddEvalProyEmp`(int_idEDDEvaluacion, int_idEDDProyEmpEvaluador, int_idEDDProyEmpEvaluado, int_nuevoCicloEvaluacion, 0, 1, 'admin_SYSTEM', @p0,@p1);

      END IF;
    END IF;

   
  END LOOP;

  CLOSE cur1;

  IF done = 2 THEN
    SET out_codResp = '00';
    SET out_msjResp = 'Success';
    SELECT *, out_codResp, out_msjResp from tmpCiclosEval;

    DROP TABLE IF EXISTS tmpCiclosEval;
  END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarAlumno` (IN `IN_idAlumno` INT, IN `IN_nomAlumno` VARCHAR(50), IN `IN_correoAlumno` VARCHAR(100), IN `IN_telefonoAlumno` VARCHAR(15), IN `IN_idPais` INT, IN `IN_idServicio` INT, IN `IN_idArea` INT, IN `IN_idCargo` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarAlumno: Error al insertar registro --> IN_idAlumno: [', IN_idAlumno, '] - IN_nomAlumno: [', IN_nomAlumno, '] - IN_correoAlumno: [', IN_correoAlumno, '] - IN_telefonoAlumno: [', IN_telefonoAlumno, '] - IN_idPais: [', IN_idPais, '] - IN_idServicio: [', IN_idServicio, '] - IN_idArea: [', IN_idArea, '] - IN_idCargo: [', IN_idCargo, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarAlumno', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

                IF IN_idAlumno IS NULL 
                OR IN_nomAlumno IS NULL 
                OR IN_correoAlumno IS NULL
                OR IN_idPais is NULL
                OR IN_idServicio is NULL
                OR IN_idCargo is NULL
                OR IN_idArea = NULL
                OR IN_usuarioAdmin is NULL

                OR IN_idAlumno = "%null%"
                OR IN_nomAlumno = "%null%"
                OR IN_correoAlumno = "%null%"
                OR IN_idPais = "%null%"
                OR IN_idServicio = "%null%"
                OR IN_idCargo = "%null%"
                OR IN_idArea = "%null%"
                OR IN_usuarioAdmin = "%null%" 
            
             THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idAlumno) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'ID del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
			 ELSEIF TRIM(IN_nomAlumno) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Nombre del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_correoAlumno) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Correo del alumno viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idPais) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'País del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idServicio) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'Servicio del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idCargo) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'Cargo del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idArea) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'Área del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
       			UPDATE alumno SET nomAlumno = IN_nomAlumno, correoAlumno = IN_correoAlumno, idPais = IN_idPais, idServicio = IN_idServicio, idArea = IN_idArea, idCargo = IN_idCargo, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioAdmin WHERE idAlumno = IN_idAlumno;
                
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', alum.idAlumno, UPPER(alum.nomAlumno), UPPER(alum.correoAlumno), UPPER(alum.telefonoAlumno), UPPER(serv.nomServicio), UPPER(ar.nomArea), UPPER(pa.nomPais), UPPER(car.nomCargo)
FROM alumno alum 
INNER JOIN area ar ON (alum.idArea = ar.idArea)
INNER JOIN pais pa ON (alum.idPais = pa.idPais)
INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE alum.idAlumno = IN_idAlumno;
     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarCliente` (IN `IN_idCliente` INT, IN `IN_nomCliente` VARCHAR(100), IN `IN_direccionCliente` VARCHAR(100), IN `IN_idPais` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarCliente: Error al insertar registro --> IN_idCliente: [', IN_idCliente, '] - IN_nomCliente: [', IN_nomCliente, '] - IN_direccionCliente: [', IN_direccionCliente, '] - IN_idPais: [', IN_idPais, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarCliente', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idCliente IS NULL 
            OR IN_nomCliente IS NULL 
            OR IN_direccionCliente IS NULL
            OR IN_idPais is NULL
            OR IN_usuarioAdmin is NULL
            
            OR IN_nomCliente = "%null%"
            OR IN_direccionCliente = "%null%"
            OR IN_usuarioAdmin = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
             
             ELSEIF TRIM(IN_idCliente) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'ID del cliente viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
			 ELSEIF TRIM(IN_nomCliente) = '' THEN
             
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Nombre del cliente viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_direccionCliente) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Dirección del cliente viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idPais) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'País del cliente viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF FN_EXISTE_NOMCLIENTE(IN_nomCliente, IN_idCliente) = True THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El nombre del cliente ya está registrado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   
            
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE cliente SET nomCliente = IN_nomCliente, direccionCliente = IN_direccionCliente, idPais = IN_idPais, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioAdmin WHERE idCliente = IN_idCliente;
             
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_CODRESULT, OUT_MJERESULT, cli.idCliente, UPPER(cli.nomCliente), UPPER(cli.direccionCliente), UPPER(cli.isActive), UPPER(pa.nomPais), cli.idPais
                FROM cliente cli
                INNER JOIN pais pa ON (cli.idPais = pa.idPais)
                WHERE cli.idCliente = IN_idCliente;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarContacto` (IN `IN_idContacto` INT, IN `IN_nomContacto` VARCHAR(50), IN `IN_correoContacto` VARCHAR(100), IN `IN_telefonoContacto` VARCHAR(15), IN `IN_isActive` BOOLEAN, IN `IN_idServicio` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarContacto: Error al insertar registro --> IN_idContacto: [', IN_idContacto, '] - IN_nomContacto: [', IN_nomContacto, '] - IN_correoContacto: [', IN_correoContacto, '] - IN_telefonoContacto: [', IN_telefonoContacto, '] - IN_isActive: [', IN_isActive, '] - IN_idServicio: [', IN_idServicio, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarContacto', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idContacto IS NULL 
            OR IN_nomContacto IS NULL 
            OR IN_correoContacto IS NULL
            OR IN_telefonoContacto is NULL
            OR IN_isActive is NULL
            OR IN_idServicio is NULL
            OR IN_usuarioAdmin is NULL
            
            OR IN_idContacto = "%null%"
            OR IN_nomContacto = "%null%"
            OR IN_correoContacto = "%null%"
            OR IN_telefonoContacto = "%null%" 
            OR IN_isActive = "%null%" 
            OR IN_idServicio = "%null%" 
            OR IN_usuarioAdmin = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idContacto) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'ID del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
			 ELSEIF TRIM(IN_nomContacto) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Nombre del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_correoContacto) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Correo del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_telefonoContacto) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Telefono del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
       		
                
             ELSEIF TRIM(IN_isActive) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idServicio) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'IDServicio del contacto viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE contacto SET nomContacto = IN_nomContacto, correoContacto = IN_correoContacto, telefonoContacto = IN_telefonoContacto, idServicio = IN_idServicio, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioAdmin WHERE idContacto = IN_idContacto;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT',con.idContacto, UPPER(con.nomContacto), UPPER(con.correoContacto), con.telefonoContacto, con.fechaIni, con.fechaFin, UPPER(serv.nomServicio), OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT' from contacto con INNER JOIN servicio serv WHERE con.idServicio = serv.idServicio AND con.idContacto = IN_idContacto;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarCurso` (IN `IN_idCurso` INT, IN `IN_CODCURSO` VARCHAR(20), IN `IN_NOMCURSO` VARCHAR(50), IN `IN_TIPOHH` VARCHAR(12), IN `IN_DURACIONCURSOHH` DOUBLE, IN `IN_CANTSESIONESCURSO` INT, IN `IN_ISACTIVE` TINYINT, IN `IN_USUARIOMODIFICACION` VARCHAR(15), OUT `OUT_IDCURSO` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE str_mjeInterno VARCHAR(500);
  -- Declare exception handler for failed insert
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      ROLLBACK;
        
      SET str_mjeInterno = CONCAT('SP_editarCurso: Error al insertar registro --> IN_idCurso: [', IN_idCurso, '] - IN_CODCURSO: [', IN_CODCURSO, '] - IN_NOMCURSO: [', IN_NOMCURSO, '] - IN_TIPOHH: [', IN_TIPOHH, '] - IN_CANTSESIONESCURSO: [', IN_CANTSESIONESCURSO, '] - IN_ISACTIVE: [', IN_ISACTIVE, '] - IN_USUARIOMODIFICACION: [', IN_USUARIOMODIFICACION, ']');

      INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      VALUES(null, 'SP_editarCurso', str_codMySQL, str_msgMySQL, now(), '11', str_mjeInterno);
      COMMIT;
        
      SET OUT_CODRESULT = '11';
      SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
    END;
  IF IN_CODCURSO IS NULL OR IN_NOMCURSO IS NULL OR IN_TIPOHH IS NULL OR IN_DURACIONCURSOHH IS NULL OR IN_CANTSESIONESCURSO IS NULL OR IN_ISACTIVE IS NULL OR IN_USUARIOMODIFICACION IS NULL THEN
    SET OUT_CODRESULT = '01';
		SET OUT_MJERESULT = 'Uno o más parámetros viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF TRIM(IN_CODCURSO) = '' THEN
    SET OUT_CODRESULT = '02';
		SET OUT_MJERESULT = 'Código de curso viene vacío';

        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
  ELSEIF TRIM(IN_NOMCURSO) = '' THEN
    SET OUT_CODRESULT = '03';
		SET OUT_MJERESULT = 'Nombre de curso viene vacío';
         SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF UPPER(IN_TIPOHH) NOT IN('ACADEMICAS', 'CRONOLOGICAS', 'MIXTO') THEN
    SET OUT_CODRESULT = '04';
		SET OUT_MJERESULT = 'El tipo de horas del curso es incorrecto --> ACADEMICAS/CRONOLOGICAS/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  ELSEIF IN_DURACIONCURSOHH <= 0 THEN
    SET OUT_CODRESULT = '05';
		SET OUT_MJERESULT = 'La duración del curso en horas debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF IN_CANTSESIONESCURSO <= 0 THEN
    SET OUT_CODRESULT = '06';
		SET OUT_MJERESULT = 'La cantidad de sesiones del curso debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF IN_ISACTIVE NOT IN(0, 1) THEN
    SET OUT_CODRESULT = '07';
		SET OUT_MJERESULT = 'El estado del curso debe ser Verdadero (1) o Falso (0)';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF TRIM(IN_USUARIOMODIFICACION) = '' THEN
    SET OUT_CODRESULT = '08';
		SET OUT_MJERESULT = 'Usuario viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
          ELSEIF trim(IN_idCurso) = "" THEN
    SET OUT_CODRESULT = '09';
		SET OUT_MJERESULT = 'El ID del curso ya viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSE
    SET AUTOCOMMIT = 0;
    START TRANSACTION;
      
      UPDATE curso SET codCurso = IN_CODCURSO, nomCurso = IN_NOMCURSO, tipoHH = IN_TIPOHH, duracionCursoHH = IN_DURACIONCURSOHH, cantSesionesCurso = IN_CANTSESIONESCURSO, isActive = IN_ISACTIVE, fechaModificacion = 	CURRENT_TIMESTAMP, usuarioModificacion = IN_USUARIOMODIFICACION WHERE idCurso = IN_idCurso;

      SET OUT_IDCURSO = last_insert_id();
      SET OUT_CODRESULT = '00';
      SET OUT_MJERESULT = 'Success';
      
  END IF;   
  	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', cur.idCurso, UPPER(cur.codCurso),
  UPPER(cur.nomCurso), UPPER(cur.tipoHH), cur.duracionCursoHH, cur.cantSesionesCurso 
	FROM curso cur 
	WHERE cur.idCurso = IN_idCurso;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarCursoAlumno` (IN `IN_idCursoAlumno` INT, IN `IN_fechaIni` DATE, IN `IN_horaIni` TIME, IN `IN_fechaFin` DATE, IN `IN_horaFin` TIME, IN `IN_porcAsistencia` INT, IN `IN_porcParticipacion` INT, IN `IN_claseAprobada` CHAR(1), IN `IN_porcAprobacion` INT, IN `IN_estadoCurso` VARCHAR(15), IN `IN_isActive` TINYINT, IN `IN_idEmpleado` INT, IN `IN_idCurso` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarCursoAlumno: Error al editar registro --> IN_idCursoAlumno: [', IN_idCursoAlumno, '] - IN_fechaIni: [', IN_fechaIni, '] - IN_horaIni: [', IN_horaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_horaFin: [', IN_horaFin, '] - IN_porcAsistencia: [', IN_porcAsistencia, '] - IN_porcParticipacion: [', IN_porcParticipacion, '] - IN_claseAprobada: [', IN_claseAprobada, '] - IN_porcAprobacion: [', IN_porcAprobacion, '] - IN_estadoCurso: [', IN_estadoCurso, '] - IN_isActive: [', IN_isActive, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_idCurso: [', IN_idCurso, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarCursoAlumno', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idCursoAlumno IS NULL 
            OR IN_fechaIni IS NULL 
            OR IN_horaIni IS NULL
            OR IN_fechaFin is NULL
            OR IN_horaFin is NULL
            OR IN_porcAsistencia is NULL
            OR IN_porcParticipacion = NULL
            OR IN_claseAprobada is NULL
            OR IN_porcAprobacion is NULL
            OR IN_estadoCurso is NULL
            OR IN_isActive is NULL
            OR IN_idCurso is NULL
            OR IN_idEmpleado is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idCursoAlumno = "%null%"
            OR IN_fechaIni = "%null%"
            OR IN_horaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_horaFin = "%null%"
            OR IN_claseAprobada = "%null%"
            OR IN_estadoCurso = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idCurso = "%null%" 
            OR IN_idEmpleado = "%null%" 
            OR IN_usuarioModificacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
				
              ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
			 ELSEIF IN_porcParticipacion < 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El porcentaje de participación debe ser igual o mayor a 0 (cero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcParticipacion > 100 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El porcentaje de participación debe ser igual o menor a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAsistencia < 0 THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El porcentaje de asistencia debe ser igual o mayor a 0 (cero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAsistencia > 100 THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El porcentaje de asistencia debe ser igual o menor a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
  
             ELSEIF TRIM(IN_claseAprobada) = '' THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'Clase aprobada viene vacío (S o N)';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAprobacion < 0 THEN
   				SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'El porcentaje de aprobación debe ser igual o mayor a 0 (cero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAprobacion > 100 THEN
   				SET OUT_CODRESULT = '11';
				SET OUT_MJERESULT = 'El porcentaje de aprobación debe ser igual o menor a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_estadoCurso) = '' THEN
   				SET OUT_CODRESULT = '12';
				SET OUT_MJERESULT = 'Estado del curso viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_isActive NOT IN(0, 1) THEN
        		SET OUT_CODRESULT = '13';
				SET OUT_MJERESULT = 'El estado activo del curso debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
        
             ELSEIF IN_idCurso <= 0 THEN
   				SET OUT_CODRESULT = '14';
				SET OUT_MJERESULT = 'El id del curso tiene que ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEmpleado <= 0 THEN
   				SET OUT_CODRESULT = '15';
				SET OUT_MJERESULT = 'El id del Alumno tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoAlumno <= 0 THEN
   				SET OUT_CODRESULT = '16';
				SET OUT_MJERESULT = 'El id del cursoAlumno tiene que ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '17';
				SET OUT_MJERESULT = 'El usuario administrador quien modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
                UPDATE cursoalumno SET 
                fechaIni = IN_fechaIni, 
                horaIni = IN_horaIni, 
                fechaFin = IN_fechaFin, 
                horaFin = IN_horaFin, 
                porcAsistencia = IN_porcAsistencia, 
                claseAprobada = IN_claseAprobada, 
                porcAprobacion = IN_porcAprobacion, 
                porcParticipacion = IN_porcParticipacion, 
                estadoCurso = IN_estadoCurso, 
                isActive = IN_isActive, 
                idEmpleado = IN_idEmpleado, 
                idCurso = IN_idCurso, 
                fechaModificacion = CURRENT_TIMESTAMP, 
                usuarioModificacion = IN_usuarioModificacion 
                WHERE idCursoAlumno = IN_idCursoAlumno;
                

             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT, OUT_CODRESULT, curAl.idCursoAlumno, curAl.fechaIni, curAl.horaIni, curAl.fechaFin, curAl.horaFin, curAl.porcAsistencia, curAl.porcParticipacion, IF(curAl.claseAprobada = "S", "SÍ", "NO") as claseAprobada, 
                curAl.porcAprobacion,
                IF(curAl.estadoCurso = 1, "ACTIVADO", "DESACTIVADO") as estadoCurso, 
                UPPER(emp.nomEmpleado),
                UPPER(cur.nomCurso)
                FROM cursoalumno curAl
                INNER JOIN empleado emp ON (curAl.idEmpleado = emp.idEmpleado)
                INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
                WHERE curAl.idCursoAlumno = IN_idCursoAlumno;

     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarCursoAlumnoSesion` (IN `IN_idCursoAlumnoSesion` INT, IN `IN_fechaIni` DATE, IN `IN_fechaFin` DATE, IN `IN_asistencia` INT, IN `IN_participacion` INT, IN `IN_isActive` TINYINT, IN `IN_idSesion` INT, IN `IN_idCursoAlumno` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500), IN `IN_horaFin` TIME, IN `IN_horaIni` TIME)   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarCursoAlumnoSesion: Error al insertar registro --> IN_idCursoAlumnoSesion: [', IN_idCursoAlumnoSesion, '] - IN_horaFin: [', IN_horaFin, '] - IN_horaIni: [', IN_horaIni, '] - IN_fechaIni: [', IN_fechaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_asistencia: [', IN_asistencia, '] - IN_participacion: [', IN_participacion, '] - IN_isActive: [', IN_isActive, '] - IN_idSesion: [', IN_idSesion, '] - IN_idCursoAlumno: [', IN_idCursoAlumno, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarCursoAlumnoSesion', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idCursoAlumnoSesion IS NULL 
            OR IN_fechaIni IS NULL 
            OR IN_fechaFin IS NULL
            OR IN_horaFin IS NULL
            OR IN_horaIni IS NULL
            OR IN_asistencia is NULL
            OR IN_participacion is NULL
            OR IN_isActive is NULL
            OR IN_idSesion = NULL
            OR IN_idCursoAlumno is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idCursoAlumnoSesion = "%null%"
            OR IN_fechaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_horaFin = "%null%"
            OR IN_horaIni = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idSesion = "%null%"
            OR IN_idCursoAlumno = "%null%"
            OR IN_usuarioModificacion = "%null%"

            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
				
              ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
			 ELSEIF IN_asistencia < 0 OR IN_asistencia > 100 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'La asistencia debe ser igual o mayor a 0 (cero) y menor o igual a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_participacion > 100 OR IN_participacion < 0 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'La participación debe ser igual o mayor a 0 (cero) y menor o igual a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
               ELSEIF IN_isActive NOT IN(0, 1) THEN
        		SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El estado del curso debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
        
             ELSEIF IN_idSesion <= 0 THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El id de la sesión tiene que ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoAlumno <= 0 THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El id del cursoAlumno tiene que ser mayor a cero';    
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoAlumnoSesion <= 0 THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El id del cursoAlumnoSesion tiene que ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'El usuario administrador quien modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
                ELSEIF TRIM(IN_horaIni) = '' THEN
   				SET OUT_CODRESULT = '11';
				SET OUT_MJERESULT = 'La hora inicio viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
                ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '12';
				SET OUT_MJERESULT = 'La hora fin viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
               	UPDATE cursoalumno_sesion SET fechaIni = IN_fechaIni, fechaFin = IN_fechaFin, horaIni= IN_horaIni, horaFin = IN_horaFin, asistencia = IN_asistencia, participacion = IN_participacion, isActive = IN_isActive, idSesion = IN_idSesion, idCursoAlumno = IN_idCursoAlumno, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion 
                WHERE idCursoAlumnoSesion = IN_idCursoAlumnoSesion;
                

             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', curAlSe.idCursoAlumnoSesion, 
                DATE_FORMAT(curAlSe.fechaIni, "%d-%m-%Y") as fechaIni, 
                DATE_FORMAT(curAlSe.fechaFin, "%d-%m-%Y") as fechaFin,
                curAlSe.horaIni, 
                curAlSe.horaFin,  
                curAlSe.asistencia, curAlSe.participacion, UPPER(se.nomSesion), curAl.idCursoAlumno
                FROM cursoalumno_sesion curAlSe
                INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
                INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAL.idCursoAlumno)
                WHERE curAlSe.idCursoAlumnoSesion = IN_idCursoAlumnoSesion;
                

     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddEvalCompetencia` (IN `IN_idEDDEvalCompetencia` INT, IN `IN_nomCompetencia` VARCHAR(50), IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarEddEvalCompetencia: Error al insertar registro --> IN_idEDDEvalCompetencia: [', IN_idEDDEvalCompetencia, '] - IN_nomCompetencia: [', IN_nomCompetencia, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarEddEvalCompetencia', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idEDDEvalCompetencia IS NULL 
            OR IN_nomCompetencia IS NULL 
            OR IN_isActive IS NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idEDDEvalCompetencia = "%null%"
            OR IN_nomCompetencia = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioModificacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
            
			 ELSEIF TRIM(IN_nomCompetencia) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Nombre de la competencia viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_isActive NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF TRIM(IN_idEDDEvalCompetencia) <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El ID EddEvalCompetencia debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE eddevalcompetencia SET nomCompetencia = IN_nomCompetencia, isActive = IN_isActive, fechaModificacion = now(), usuarioModificacion = IN_UsuarioModificacion
             WHERE idEDDEvalCompetencia = IN_idEDDEvalCompetencia;
                COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_CODRESULT, OUT_MJERESULT,
                evalComp.idEDDEvalCompetencia,
                UPPER(evalComp.nomCompetencia) as nomCompetencia
                FROM eddevalcompetencia evalComp
                WHERE evalComp.idEDDEvalCompetencia = IN_idEDDEvalCompetencia;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddEvalPregunta` (IN `IN_idEDDEvalPregunta` INT, IN `IN_nomPregunta` VARCHAR(300), IN `IN_ordenPregunta` INT, IN `IN_isActive` TINYINT, IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDEvalCompetencia` INT, IN `IN_preguntaObligatoria` TINYINT, IN `IN_tipoResp` CHAR, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

 

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

 

          SET str_mjeInterno = CONCAT('SP_insertarEddEvalPregunta: Error al insertar registro --> IN_idEDDEvalPregunta: [', IN_idEDDEvalPregunta, '] - IN_nomPregunta: [', IN_nomPregunta, '] - IN_ordenPregunta: [', IN_ordenPregunta, '] - IN_isActive: [', IN_isActive, '] - IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - IN_idEDDEvalCompetencia: [', IN_idEDDEvalCompetencia, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

 

 

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_insertarEddEvalPregunta', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

 

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

 

  END;

 

 

            IF IN_idEDDEvalPregunta IS NULL 
            OR IN_nomPregunta IS NULL 
            OR IN_ordenPregunta IS NULL 
            OR IN_isActive IS NULL
            OR IN_idEDDEvaluacion IS NULL
            -- OR IN_idEDDEvalCompetencia IS NULL
            OR IN_usuarioModificacion is NULL

 

            OR IN_idEDDEvalPregunta = "%null%"
            OR IN_nomPregunta = "%null%"
            OR IN_ordenPregunta = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idEDDEvaluacion = "%null%"
            -- OR IN_idEDDEvalCompetencia = "%null%"
            OR IN_usuarioModificacion = "%null%"

 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF TRIM(IN_nomPregunta) = '' THEN
                   SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El Nombre Respuesta Pregunta viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

 

             ELSEIF IN_isActive NOT IN (0, 1) THEN
                   SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF IN_idEDDEvaluacion <= 0 THEN
                   SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El idEDDEvaluacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF TRIM(UPPER(IN_tipoResp)) = 'A' AND IN_idEDDEvalCompetencia <= 0 THEN

                   SET OUT_CODRESULT = '06';
                   SET OUT_MJERESULT = 'El idEDDEvalCompetencia debe ser mayor a cero en preguntas alternativas';
                   SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF IN_idEDDEvalPregunta < 0 THEN

                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El IN_idEDDEvalPregunta debe ser mayor a cero';

                SELECT OUT_CODRESULT, OUT_MJERESULT;

 

            ELSE

                SET AUTOCOMMIT = 0;

                START TRANSACTION;

 

                 UPDATE eddevalpregunta SET 
                 nomPregunta = IN_nomPregunta, 
                 ordenPregunta = IN_ordenPregunta, 
                 isActive = IN_isActive, 
                 idEDDEvaluacion = IN_idEDDEvaluacion, 
                 idEDDEvalCompetencia = IN_idEDDEvalCompetencia,
                 tipoResp = IN_tipoResp,
                 preguntaObligatoria = IN_preguntaObligatoria,
                 usuarioModificacion = IN_usuarioModificacion,
                 fechaModificacion = now() 
                 WHERE idEDDEvalPregunta = IN_idEDDEvalPregunta;

 

             COMMIT;

                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

 

                 SELECT OUT_CODRESULT, OUT_MJERESULT, preg.idEDDEvalPregunta, UPPER(preg.nomPregunta) as nomPregunta, preg.ordenPregunta, preg.idEDDEvaluacion, preg.idEDDEvalCompetencia,
                preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
                UPPER(eval.nomEvaluacion) as nomEvaluacion, UPPER(comp.nomCompetencia) as nomCompetencia
                FROM eddevalpregunta preg
                INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
                INNER JOIN eddevalcompetencia comp ON (preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia)
                WHERE preg.idEDDEvalPregunta = IN_idEDDEvalPregunta;
     END IF;

 

 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddEvalProyEmp` (IN `IN_idEDDEvalProyEmp` INT, IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDProyEmpEvaluador` INT, IN `IN_idEDDProyEmpEvaluado` INT, IN `IN_cicloEvaluacion` INT, IN `IN_evalRespondida` TINYINT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_editarEddEvalProyEmp: Error al insertar registro --> IN_idEDDEvalProyEmp: [', IN_idEDDEvalProyEmp, '] - IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - IN_idEDDProyEmpEvaluador: [', IN_idEDDProyEmpEvaluador, '] - IN_idEDDProyEmpEvaluado: [', IN_idEDDProyEmpEvaluado, '] - IN_evalRespondida: [', IN_evalRespondida, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_editarEddEvalProyEmp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
          SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
          SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idEDDEvalProyEmp IS NULL 
            OR IN_idEDDEvaluacion IS NULL 
            OR IN_idEDDProyEmpEvaluador IS NULL 
            OR IN_idEDDProyEmpEvaluado IS NULL  
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion is NULL

            OR IN_idEDDEvalProyEmp = "%null%"
            OR IN_idEDDEvaluacion = "%null%"
            OR IN_idEDDProyEmpEvaluador = "%null%"
            OR IN_idEDDProyEmpEvaluado = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioModificacion = "%null%"

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDEvaluacion <= 0 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El idEDDEvaluacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDProyEmpEvaluador <= 0 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El IN_idEDDProyEmpEvaluador debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDProyEmpEvaluado <= 0 THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El IN_idEDDProyEmpEvaluado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_evalRespondida NOT IN (0, 1) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'La evalRespondida debe ser verdadero o falso';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_isActive NOT IN (0, 1) THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;             

             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

              ELSEIF IN_idEDDEvalProyEmp <= 0 THEN
                SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'El idEDDEvalProyEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

              ELSEIF IN_idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluado THEN
                SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'El Evaluador no debe ser igual al evaluado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;      

            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            UPDATE eddevalproyemp SET
            idEDDEvaluacion = IN_idEDDEvaluacion,
            idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador,
            idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado,
            cicloEvaluacion = IN_cicloEvaluacion,
            evalRespondida = IN_evalRespondida,
            isActive = IN_isActive,
            fechaModificacion = now(),
            usuarioModificacion = IN_usuarioModificacion
            WHERE idEDDEvalProyEmp = IN_idEDDEvalProyEmp;

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';
		/*
               SELECT OUT_CODRESULT, OUT_MJERESULT,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%m:%i") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%m:%i") as fechaFin, 
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               evalProyEmp.cicloEvaluacion
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp;
              */ 
     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddEvalProyResp` (IN `IN_idEDDEvalProyResp` INT, IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDProyEmp` INT, IN `IN_respuesta` VARCHAR(500), IN `IN_isActive` TINYINT, IN `IN_idEDDEvalProyEmp` INT, IN `IN_idEDDEvalPregunta` INT, IN `IN_idEDDEvalRespPreg` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_insertarEddEvalProyResp: Error al insertar registro --> IN_idEDDEvalProyResp: [', IN_idEDDEvalProyResp, '] - IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - IN_idEDDProyEmp: [', IN_idEDDProyEmp, '] - IN_respuesta: [', IN_respuesta, '] - IN_isActive: [', IN_isActive, '] - IN_idEDDEvalProyEmp: [', IN_idEDDEvalProyEmp, '] - IN_idEDDEvalPregunta: [', IN_idEDDEvalPregunta, '] - IN_idEDDEvalRespPreg: [', IN_idEDDEvalRespPreg, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

 

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_insertarEddEvalProyResp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

 

            IF IN_idEDDEvalProyResp IS NULL 
            OR IN_idEDDEvaluacion IS NULL 
            OR IN_idEDDProyEmp IS NULL 
            OR IN_respuesta IS NULL 
            OR IN_isActive IS NULL 
            OR IN_idEDDEvalProyEmp IS NULL 
            OR IN_idEDDEvalPregunta IS NULL 
            OR IN_idEDDEvalRespPreg IS NULL
            OR IN_usuarioModificacion is NULL

            OR IN_idEDDEvalProyResp = "%null%"
            OR IN_idEDDEvaluacion = "%null%"
            OR IN_idEDDProyEmp = "%null%"
            OR IN_respuesta = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idEDDEvalProyEmp = "%null%"
            OR IN_idEDDEvalPregunta = "%null%"
            OR IN_idEDDEvalRespPreg = "%null%"
            OR IN_usuarioModificacion = "%null%" 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDEvaluacion <= 0 THEN
                   SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El idEDDEvaluacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDProyEmp <= 0 THEN
                   SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El idEDDProyEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_respuesta) = '' THEN
                   SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'La respuesta a la pregunta viene vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   

 

             ELSEIF IN_isActive NOT IN (0, 1) THEN
                   SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDEvalProyEmp <= 0 THEN
                   SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El idEDDEvalProyEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDEvalPregunta <= 0 THEN
                   SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El idEDDEvalPregunta debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDEvalRespPreg <= 0 THEN
                   SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'El idEDDEvalRespPreg debe ser mayor a cero';

                SELECT OUT_MJERESULT, OUT_CODRESULT;   

 

             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                   SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDEvalProyResp <= 0 THEN
                   SET OUT_CODRESULT = '10';
                SET OUT_MJERESULT = 'El idEDDEvalProyResp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;       

            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            UPDATE eddevalproyresp SET
            idEDDEvaluacion = IN_idEDDevaluacion,
            idEDDProyEmp = IN_idEDDProyEmp,
            respuesta = IN_respuesta,
            isActive = IN_isActive,
            idEDDEvalProyEmp = IN_idEDDEvalProyEmp,
            idEDDEvalPregunta = IN_idEDDEvalPregunta,
            idEDDEvalRespPreg = IN_idEDDEvalRespPreg,
            fechaModificacion = now(),
            usuarioModificacion = IN_usuarioModificacion
            WHERE idEDDEvalProyResp = IN_idEDDEvalProyResp;
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

               SELECT OUT_CODRESULT, OUT_MJERESULT, proyResp.idEDDEvalProyResp, proyResp.idEDDEvaluacion, proyResp.idEDDProyEmp, UPPER(proyResp.respuesta) as respuesta, proyResp.idEDDEvalProyEmp, proyResp.idEDDEvalPregunta, proyResp.idEDDEvalRespPreg,
               UPPER(eval.nomEvaluacion) as nomEvaluacion, UPPER(evalPregunta.nomPregunta) as nomPregunta, UPPER(evalRespPreg.nomRespPreg) as nomRespPreg
               FROM eddevalproyresp proyResp
               INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
               INNER JOIN eddevalproyemp evalProyEmp ON (proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp)
               INNER JOIN eddevalpregunta evalPregunta ON (proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta)
               INNER JOIN eddevalresppreg evalRespPreg ON (proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg)
               WHERE proyResp.idEDDEvalProyResp = IN_idEDDEvalProyResp;
     END IF;

 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddEvalRespPreg` (IN `IN_idEDDEvalRespPreg` INT, IN `IN_nomRespPreg` VARCHAR(50), IN `IN_ordenRespPreg` INT, IN `IN_isActive` TINYINT, IN `IN_idEDDEvalPregunta` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarEddEvalRespPreg: Error al insertar registro --> IN_idEDDEvalRespPreg: [', IN_idEDDEvalRespPreg, '] - IN_nomRespPreg: [', IN_nomRespPreg, '] - IN_ordenRespPreg: [', IN_ordenRespPreg, '] - IN_isActive: [', IN_isActive, '] - IN_idEDDEvalPregunta: [', IN_idEDDEvalPregunta, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarEddEvalRespPreg', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idEDDEvalRespPreg IS NULL 
            OR IN_nomRespPreg IS NULL 
            OR IN_ordenRespPreg IS NULL 
            OR IN_isActive IS NULL
            OR IN_idEDDEvalPregunta IS NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idEDDEvalRespPreg = "%null%"
            OR IN_nomRespPreg = "%null%"
            OR IN_ordenRespPreg = "%null%"
            OR IN_idEDDEvalPregunta = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioModificacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
            
			 ELSEIF TRIM(IN_nomRespPreg) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El Nombre Respuesta Pregunta viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_isActive NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEDDEvalPregunta <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idEDDEvalPregunta debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEDDEvalRespPreg <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idEDDEvalRespPreg debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
			UPDATE eddevalresppreg SET 
            nomRespPreg = IN_nomRespPreg, 
            ordenRespPreg = IN_ordenRespPreg, 
            isActive = IN_isActive, 
            idEDDEvalPregunta = IN_idEDDEvalPregunta, 
            fechaModificacion = now(), 
            usuarioModificacion = IN_usuarioModificacion
            WHERE idEDDEvalRespPreg = IN_idEDDEvalRespPreg;
    
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
               SELECT OUT_CODRESULT, OUT_MJERESULT, respPreg.idEDDEvalRespPreg, UPPER(respPreg.nomRespPreg) as nomRespPreg, respPreg.ordenRespPreg, respPreg.idEDDEvalPregunta, UPPER(evaPreg.nomPregunta) as nomPregunta
               FROM eddevalresppreg respPreg
               INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
               WHERE respPreg.idEDDEvalRespPreg = IN_idEDDEvalRespPreg;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddEvaluacion` (IN `IN_idEDDEvaluacion` INT, IN `IN_nomEvaluacion` VARCHAR(50), IN `IN_tipoEvaluacion` VARCHAR(15), IN `IN_fechaIni` DATETIME, IN `IN_fechaFin` DATETIME, IN `IN_descFormulario` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
      	SET str_mjeInterno = CONCAT('SP_editarEddEvaluacion: Error al insertar registro --> IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - IN_nomEvaluacion: [', IN_nomEvaluacion, '] - IN_tipoEvaluacion: [', IN_tipoEvaluacion, '] - IN_fechaIni: [', IN_fechaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');
 
      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarEddEvaluacion', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  END;
 
            IF IN_idEDDEvaluacion IS NULL 
            OR IN_tipoEvaluacion IS NULL 
            OR IN_tipoEvaluacion IS NULL 
            OR IN_fechaIni IS NULL
            OR IN_fechaFin IS NULL
            OR IN_isActive IS NULL
            OR IN_usuarioModificacion is NULL
            OR IN_idEDDEvaluacion = "%null%"
            OR IN_nomEvaluacion = "%null%"
            OR IN_tipoEvaluacion = "%null%"
            OR IN_fechaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioModificacion = "%null%" 
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
			 ELSEIF TRIM(IN_nomEvaluacion) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El nombre de la evaluacion viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_tipoEvaluacion) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El tipo evaluacion viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_isActive NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
 
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idEDDEvaluacion) <= 0 THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El idEDDEvaluacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  
             ELSEIF TRIM(IN_descFormulario) = '' THEN
   				SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'La descripción del formulario no puede estar vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  
            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                	UPDATE eddevaluacion SET
                    nomEvaluacion = IN_nomEvaluacion,
                    tipoEvaluacion = IN_tipoEvaluacion,
					descFormulario = IN_descFormulario,
                    fechaIni = IN_fechaIni,
                    fechaFin = IN_fechaFin,
                    fechaModificacion = now(),
                    usuarioModificacion = IN_usuarioModificacion
                    WHERE idEDDEvaluacion = IN_idEDDEvaluacion;

             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
             	SELECT OUT_CODRESULT, OUT_MJERESULT, 
                idEDDEvaluacion,
                UPPER(nomEvaluacion) as nomEvaluacion, 
                UPPER(tipoEvaluacion) as tipoEvaluacion, 
                DATE_FORMAT(fechaIni, "%d/%m/%Y") as fechaIni,
                DATE_FORMAT(fechaFin, "%d/%m/%Y") as fechaFin,
                descFormulario
                FROM eddevaluacion
                WHERE idEDDEvaluacion = IN_idEDDEvaluacion;
     END IF;
 
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddProyecto` (IN `IN_idEDDProyecto` INT, IN `IN_nomProyecto` VARCHAR(50), IN `IN_fechaIni` DATE, IN `IN_fechaFin` DATE, IN `IN_tipoProyecto` VARCHAR(50), IN `IN_isActive` BOOLEAN, IN `IN_idServicio` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarEddProyecto: Error al insertar registro --> IN_idEDDProyecto: [', IN_idEDDProyecto, '] - IN_nomProyecto: [', IN_nomProyecto, '] - IN_fechaInicio: [', IN_fechaIni, '] - IN_fechaIni: [', IN_fechaFin, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarEddProyecto', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_nomProyecto IS NULL 
            OR IN_idEDDProyecto IS NULL
            OR IN_fechaIni IS NULL
            OR IN_isActive is NULL
            OR IN_idServicio is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_nomProyecto = "%null%"
            OR IN_fechaIni = "%null%"
            OR IN_isActive = "%null%" 
            OR IN_idServicio = "%null%" 
            OR IN_usuarioModificacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            


           ELSEIF TRIM(IN_fechaFin) != '0000-00-00' THEN

             IF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '03';
		SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '04';
	        SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
           END IF;     

             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idServicio) <= 0 THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'IDServicio del proyecto debe ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El usuario administrador quien modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             
             ELSEIF TRIM(IN_nomProyecto) = '' THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El nombre del proyecto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEDDProyecto <= 0 THEN
    			SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'El IN_idEDDProyecto debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF TRIM(IN_tipoProyecto) = '' THEN
    			SET OUT_CODRESULT = '11';
				SET OUT_MJERESULT = 'El tipo de proyecto viene vacío.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;    
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE eddproyecto SET 
             nomProyecto = IN_nomProyecto, 
             fechaInicio = IN_fechaIni, 
             fechaFin = IF(IN_fechaFin = '0000-00-00', NULL, IN_fechaFin), 
             tipoProyecto = IN_tipoProyecto, 
             isActive = IN_isActive, 
             idServicio = IN_idServicio, 
             fechaModificacion = CURRENT_TIMESTAMP, 
             usuarioModificacion = IN_usuarioModificacion 
             WHERE idEDDProyecto = IN_idEDDProyecto;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
                SELECT OUT_CODRESULT, OUT_MJERESULT, proy.idEDDProyecto, UPPER(nomProyecto) as nomProyecto, DATE_FORMAT(proy.fechaInicio, "%d-%m-%Y") as fechaIni, DATE_FORMAT(proy.fechaFin, "%d-%m-%Y") as fechaFin, UPPER(serv.nomServicio) as nomServicio, UPPER(proy.tipoProyecto) tipoProyecto
                FROM eddproyecto proy 
                INNER JOIN servicio serv ON (proy.idServicio = serv.idServicio)
                WHERE proy.idEDDProyecto = IN_idEDDProyecto; 
                
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEddProyEmp` (IN `IN_idEDDProyEmp` INT, IN `IN_idProyecto` INT, IN `IN_idEmpleado` INT, IN `IN_cargoEnProy` VARCHAR(15), IN `IN_isActive` BOOLEAN, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarEddProyEmp: Error al insertar registro --> IN_idEDDProyEmp: [', IN_idEDDProyEmp, '] - IN_idProyecto: [', IN_idProyecto, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_cargoEnProy: [', IN_cargoEnProy, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarEddProyEmp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idEDDProyEmp IS NULL 
            OR IN_idProyecto IS NULL 
            OR IN_idEmpleado IS NULL
            OR IN_cargoEnProy is NULL
            OR IN_isActive is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idEDDProyEmp = "%null%"
            OR IN_idProyecto = "%null%"

            OR IN_idEmpleado = "%null%"
            OR IN_cargoEnProy = "%null%" 
            OR IN_isActive = "%null%" 
            OR IN_usuarioModificacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idProyecto <= 0 THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El ID del proyecto debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEmpleado <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del empleado debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_cargoEnProy) = "" THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El cargo en el proyecto viene vacío.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

                ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
                ELSEIF IN_idEDDProyEmp <= 0 THEN
    			SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El ID ProyEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE eddproyemp SET idProyecto = IN_idProyecto, idEmpleado = IN_idEmpleado, cargoEnProy = IN_cargoEnProy, isActive = IN_isActive, fechaModificacion = now(), usuarioModificacion = IN_usuarioModificacion 
             WHERE idEddProyEmp = IN_idEDDProyEmp;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
                SELECT OUT_CODRESULT, OUT_MJERESULT, proyemp.idEDDProyEmp, UPPER(proy.nomProyecto) as nomProyecto, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(proyemp.cargoEnProy) as cargoEnProy
                FROM eddproyemp proyemp 
                INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyemp.idProyecto)
                INNER JOIN empleado emp ON (proyemp.idEmpleado = emp.idEmpleado)
                WHERE proyemp.idEDDProyEmp = IN_idEDDProyEmp; 
                
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEmpleado` (IN `IN_idEmpleado` INT, IN `IN_nomEmpleado` VARCHAR(50), IN `IN_correoEmpleado` VARCHAR(100), IN `IN_telefonoEmpleado` VARCHAR(15), IN `IN_idPais` INT, IN `IN_idArea` INT, IN `IN_idCargo` INT, IN `IN_idCliente` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_editarEmpleado: Error al modificar registro --> IN_idEmpleado: [', IN_idEmpleado, '] - IN_nomEmpleado: [', IN_nomEmpleado, '] - IN_correoEmpleado: [', IN_correoEmpleado, '] - IN_telefonoEmpleado: [', IN_telefonoEmpleado, '] - IN_idPais: [', IN_idPais, '] - IN_idArea: [', IN_idArea, '] - IN_idCargo: [', IN_idCargo, '] - IN_idCliente: [', IN_idCliente, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');

 

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_editarEmpleado', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

 

            IF IN_nomEmpleado IS NULL 
            OR IN_idEmpleado IS NULL 
            OR IN_correoEmpleado IS NULL 
            OR IN_idPais is NULL 
            OR IN_idCargo is NULL 
            OR IN_idArea = NULL 
            OR IN_usuarioAdmin is NULL 
            OR IN_idEmpleado = "%null%" 
            OR IN_nomEmpleado = "%null%" 
            OR IN_correoEmpleado = "%null%" 
            OR IN_idPais = "%null%" 
            OR IN_idCargo = "%null%" 
            OR IN_idArea = "%null%" 
            OR IN_usuarioAdmin = "%null%" 

         THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF TRIM(IN_nomEmpleado) = '' THEN
                   SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'Nombre del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF TRIM(IN_correoEmpleado) = '' THEN
                   SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'Correo del empleado viene vacío';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF TRIM(IN_idPais) = '' THEN
                   SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'País del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF TRIM(IN_idCargo) = '' THEN
                   SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'Cargo del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF TRIM(IN_idArea) = '' THEN
                   SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'Área del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF TRIM(IN_idEmpleado) = '' THEN
                   SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'EL ID del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
                   SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

         ELSEIF IN_idCliente <= 0 THEN
                   SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'El idCliente debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;       


 

            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;

                UPDATE empleado 
                SET 
                nomEmpleado = IN_nomEmpleado, 
                correoEmpleado = IN_correoEmpleado, 
                telefonoEmpleado = IN_telefonoEmpleado, 
                idPais = IN_idPais, 
                idArea = IN_idArea, 
                idCargo = IN_idCargo, 
                idCliente = IN_idCliente, 
                fechaModificacion = CURRENT_TIMESTAMP, 
                usuarioModificacion = IN_usuarioAdmin 
                WHERE idEmpleado = IN_idEmpleado;

                COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';
            END IF;
                               SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT',emp.idEmpleado, UPPER(emp.nomEmpleado), UPPER(emp.correoEmpleado), emp.telefonoEmpleado, UPPER(ar.nomArea), UPPER(pa.nomPais), UPPER(ca.nomCargo), UPPER(cli.nomCliente) nomCliente
                    FROM empleado emp 
                    INNER JOIN area ar ON (emp.idArea = ar.idArea)
                    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
                    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
                    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
                    WHERE emp.idEmpleado = IN_idEmpleado;
        END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEmpSubsist` (IN `IN_idEmpSubsist` INT, IN `IN_idEmpleado` INT, IN `IN_idSubsistema` INT, IN `IN_isActive` BOOLEAN, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarEmpSubsist: Error al insertar registro --> IN_idEmpSubsist: [', IN_idEmpSubsist, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_idSubsistema: [', IN_idSubsistema, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarEmpSubsist', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idEmpSubsist IS NULL 
            OR IN_idEmpleado IS NULL 
            OR IN_idSubsistema IS NULL
            OR IN_isActive is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idEmpSubsist = "%null%"
            OR IN_idEmpleado = "%null%"
            OR IN_idSubsistema = "%null%"
            OR IN_isActive = "%null%" 
            OR IN_usuarioModificacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idEmpleado <= 0 THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El ID del empleado debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idSubsistema <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del subsistema debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEmpSubsist <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del EmpSubsistema debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE empsubsist SET idEmpleado = IN_idEmpleado, idSubsistema = IN_idSubsistema, isActive = IN_isActive, fechaModificacion = now(), usuarioModificacion = IN_usuarioModificacion WHERE idEmpSubsist = IN_idEmpSubsist;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
              SELECT OUT_CODRESULT, OUT_MJERESULT, empSubs.idEmpSubsist, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(sub.nomSubsistema) as nomSubsistema
              FROM empsubsist empSubs
              INNER JOIN empleado emp ON (empSubs.idEmpleado = emp.idEmpleado)
              INNER JOIN subsistema sub ON (empSubs.idSubsistema = sub.idSubsistema)
              WHERE empSubs.idEmpSubsist = IN_idEmpSubsist;
                
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarEmpTipoPerfil` (IN `IN_idEmpTipoPerfil` INT, IN `IN_idEmpleado` INT, IN `IN_idTipoPerfil` INT, IN `IN_isActive` BOOLEAN, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarEmpTipoPerfil: Error al insertar registro --> IN_idEmpTipoPerfil: [', IN_idEmpTipoPerfil, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_idTipoPerfil: [', IN_idTipoPerfil, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarEmpTipoPerfil', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idEmpTipoPerfil IS NULL 
            OR IN_idEmpleado IS NULL 
            OR IN_idTipoPerfil IS NULL
            OR IN_isActive is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idEmpTipoPerfil = "%null%"
            OR IN_idEmpleado = "%null%"
            OR IN_idTipoPerfil = "%null%" 
            OR IN_isActive = "%null%" 
            OR IN_usuarioModificacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idEmpleado <= 0 THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El ID del empleado debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idTipoPerfil <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del tipoPerfil debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

                ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El usuario administrador quien modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEmpTipoPerfil <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del EmpTipoPerfil debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                UPDATE emptipoperfil SET idEmpleado = IN_idEmpleado, idTipoPerfil = IN_idTipoPerfil, isActive = IN_isActive, fechaModificacion = now(), usuarioModificacion = IN_usuarioModificacion WHERE idEmpTipoPerfil = IN_idEmpTipoPerfil;
             
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
               SELECT OUT_CODRESULT, OUT_MJERESULT, etp.idEmpTipoPerfil, UPPER(tp.nomTipoPerfil), UPPER(emp.nomEmpleado)
               FROM emptipoperfil etp
               INNER JOIN tipoperfil tp ON (etp.idTipoPerfil = tp.idTipoPerfil)
               INNER JOIN empleado emp ON (etp.idEmpleado = emp.idEmpleado)
               WHERE etp.idEmpTipoPerfil = IN_idEmpTipoPerfil;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarNotaExamen` (IN `IN_idNotaExamen` INT, IN `IN_notaExamen` INT, IN `IN_apruebaExamen` CHAR(2), IN `IN_isActive` BOOLEAN, IN `IN_idRamoExamen` INT, IN `IN_idCursoAlumno` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarNotaExamen: Error al insertar registro --> IN_idNotaExamen: [', IN_idNotaExamen, '] - IN_notaExamen: [', IN_notaExamen, '] - IN_apruebaExamen: [', IN_apruebaExamen, '] - IN_isActive: [', IN_isActive, '] - IN_idRamoExamen: [', IN_idRamoExamen, '] - IN_idCursoAlumno: [', IN_idCursoAlumno, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarNotaExamen', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idNotaExamen IS NULL 
            OR IN_notaExamen IS NULL 
            OR IN_apruebaExamen IS NULL
            OR IN_isActive is NULL
            OR IN_idRamoExamen is NULL
            OR IN_idCursoAlumno is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idNotaExamen = "%null%"
            OR IN_notaExamen = "%null%"
            OR IN_apruebaExamen = "%null%"
            OR IN_isActive = "%null%" 
            OR IN_idRamoExamen = "%null%" 
            OR IN_idCursoAlumno = "%null%" 
            OR IN_usuarioModificacion = "%null%" 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';

            
			 ELSEIF IN_notaExamen < 0 OR IN_notaExamen > 10 THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'La nota tiene que ser mayor o igual a 0 (cero) y menor o igual a 10 (diez)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_apruebaExamen) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Aprueba examen viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_isActive) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idRamoExamen <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idRamoExamen tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoAlumno <= 0 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El idCursoAlumno tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idNotaExamen <= 0 THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El idNotaExamen tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El usuario administrador quien modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
            	UPDATE notaexamen SET notaExamen = IN_notaExamen, apruebaExamen = IN_apruebaExamen, isActive = IN_isActive, idRamoExamen = IN_idRamoExamen, idCursoAlumno = IN_idCursoAlumno, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion WHERE idNotaExamen = IN_idNotaExamen;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', notaEx.idNotaExamen, notaEx.notaExamen, UPPER(notaEx.apruebaExamen), UPPER(ramoEx.nomExamen), cursoAl.idCursoAlumno
                FROM notaexamen notaEx 
                INNER JOIN ramoexamen ramoEx ON (notaEx.idRamoExamen = ramoEx.idRamoExamen)
                INNER JOIN cursoalumno cursoAl ON (notaEx.idCursoAlumno = cursoAl.idCursoAlumno)
                WHERE notaEx.isActive = true and notaEx.idNotaExamen = IN_idNotaExamen;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarRamo` (IN `IN_idRamo` INT, IN `IN_CODRAMO` VARCHAR(20), IN `IN_NOMRAMO` VARCHAR(50), IN `IN_TIPORAMO` VARCHAR(10), IN `IN_TIPORAMOHH` VARCHAR(12), IN `IN_DURACIONRAMOHH` DOUBLE, IN `IN_CANTSESIONESRAMO` INT, IN `IN_ISACTIVE` TINYINT, IN `IN_IDCURSO` INT, IN `IN_USUARIOMODIFICACION` VARCHAR(15), OUT `OUT_IDRAMO` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE str_mjeInterno VARCHAR(500);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      ROLLBACK;
        
      SET str_mjeInterno = CONCAT('SP_editarRamo: Error al insertar registro --> IN_idRamo: [', IN_idRamo, '] - IN_CODRAMO: [', IN_CODRAMO, '] - IN_NOMRAMO: [', IN_NOMRAMO, '] - IN_TIPORAMO: [', IN_TIPORAMO, '] - IN_TIPORAMOHH: [', IN_TIPORAMOHH, '] - IN_CANTSESIONESRAMO: [', IN_CANTSESIONESRAMO, '] - IN_ISACTIVE: [', IN_ISACTIVE, '] - IN_IDCURSO: [', IN_IDCURSO, '] - IN_USUARIOCREACION: [', IN_USUARIOCREACION, ']');

      INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      VALUES(null, 'SP_editarRamo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      COMMIT;
        
      SET OUT_CODRESULT = '13';
      SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
    END;

  IF IN_CODRAMO IS NULL OR IN_NOMRAMO IS NULL OR IN_TIPORAMO IS NULL OR IN_TIPORAMOHH IS NULL OR IN_DURACIONRAMOHH IS NULL OR IN_CANTSESIONESRAMO IS NULL OR IN_ISACTIVE IS NULL OR IN_IDCURSO IS NULL OR IN_USUARIOMODIFICACION IS NULL OR IN_idRamo IS NULL THEN
    SET OUT_CODRESULT = '01';
		SET OUT_MJERESULT = 'Uno o más parámetros viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_CODRAMO) = '' THEN
    SET OUT_CODRESULT = '02';
		SET OUT_MJERESULT = 'Código de ramo viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_NOMRAMO) = '' THEN
    SET OUT_CODRESULT = '03';
		SET OUT_MJERESULT = 'Nombre de ramo viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPORAMO) NOT IN('PRESENCIAL', 'REMOTO', 'MIXTO') THEN
    SET OUT_CODRESULT = '04';
		SET OUT_MJERESULT = 'El tipo de ramo es incorrecto --> PRESENCIAL/REMOTO/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPORAMOHH) NOT IN('ACADEMICAS', 'CRONOLOGICAS', 'MIXTO') THEN
    SET OUT_CODRESULT = '05';
		SET OUT_MJERESULT = 'El tipo de horas del ramo es incorrecto --> ACADEMICAS/CRONOLOGICAS/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_DURACIONRAMOHH <= 0 THEN
    SET OUT_CODRESULT = '06';
		SET OUT_MJERESULT = 'La duración del ramo en horas debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  
  ELSEIF IN_CANTSESIONESRAMO <= 0 THEN
    SET OUT_CODRESULT = '07';
		SET OUT_MJERESULT = 'La cantidad de sesiones del ramo debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_ISACTIVE NOT IN(0, 1) THEN
    SET OUT_CODRESULT = '08';
		SET OUT_MJERESULT = 'El estado del ramo debe ser Verdadero (1) o Falso (0)';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_IDCURSO <= 0 THEN
    SET OUT_CODRESULT = '09';
		SET OUT_MJERESULT = 'El id del curso debe ser mayor a cero';    
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_USUARIOMODIFICACION) = '' THEN
    SET OUT_CODRESULT = '10';
		SET OUT_MJERESULT = 'Usuario modificación viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF FN_EXISTE_CODRAMO(IN_CODRAMO) = True THEN
    SET OUT_CODRESULT = '11';
		SET OUT_MJERESULT = 'El código del ramo ya está registrado';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  ELSEIF IN_idRamo <= 0 THEN
    SET OUT_CODRESULT = '12';
		SET OUT_MJERESULT = 'El ID del ramo viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSE
    SET AUTOCOMMIT = 0;
    START TRANSACTION;
    
      UPDATE ramo SET codRamo = IN_CODRAMO, nomRamo = IN_NOMRAMO, tipoRamo = IN_TIPORAMO, tipoRamoHH = IN_TIPORAMOHH, duracionRamoHH = IN_DURACIONRAMOHH, isActive = IN_ISACTIVE, idCurso = IN_IDCURSO, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_USUARIOMODIFICACION WHERE idRamo = IN_idRamo;
           
      COMMIT;

    SET OUT_IDRAMO = last_insert_id();
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

  END IF;   
  SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', ram.idRamo, UPPER(ram.codRamo), UPPER(ram.nomRamo), UPPER(ram.tipoRamo), UPPER(ram.tipoRamoHH), ram.duracionRamoHH, ram.cantSesionesRamo, UPPER(cur.nomCurso)
    FROM ramo ram 
    INNER JOIN curso cur ON (ram.idCurso = cur.idCurso)
    WHERE ram.idRamo = IN_idRamo;
  
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarRamoExamen` (IN `IN_idRamoExamen` INT, IN `IN_nomExamen` VARCHAR(50), IN `IN_fechaExamen` DATE, IN `IN_isActive` BOOLEAN, IN `IN_idRamo` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarRamoExamen: Error al insertar registro --> IN_idRamoExamen: [', IN_idRamoExamen, '] - IN_nomExamen: [', IN_nomExamen, '] - IN_fechaExamen: [', IN_fechaExamen, '] - IN_isActive: [', IN_isActive, '] - IN_idRamo: [', IN_idRamo, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarRamoExamen', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idRamoExamen IS NULL 
            OR IN_nomExamen IS NULL 
            OR IN_fechaExamen IS NULL
            OR IN_isActive is NULL
            OR IN_idRamo is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idRamoExamen = "%null%"
            OR IN_nomExamen = "%null%"
            OR IN_fechaExamen = "%null%"
            OR IN_isActive = "%null%" 
            OR IN_idRamo = "%null%" 
            OR IN_usuarioModificacion = "%null%" 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

            
			 ELSEIF TRIM(IN_nomExamen) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El nombre del examen viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_fechaExamen) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'La fecha examen viene vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_isActive) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del registro debe ser 0 (falso) o 1 (verdadero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idRamo <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idRamo tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idRamoExamen <= 0 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El idRamoExamen tiene que ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El usuario administrador quien modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE ramoexamen SET nomExamen = IN_nomExamen, fechaExamen = IN_fechaExamen, isActive = IN_isActive, idRamo = IN_idRamo, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion WHERE idRamoExamen = IN_idRamoExamen;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
               	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', ramEx.idRamoExamen, UPPER(ramEx.nomExamen), ramEx.fechaExamen, ramEx.isActive, UPPER(ram.nomRamo) FROM ramoexamen ramEx
                INNER JOIN ramo ram ON (ramEx.idRamo = ram.idRamo)
                WHERE ramEx.idRamoExamen = IN_idRamoExamen;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarRelatorRamo` (IN `IN_idRelatorRamo` INT, IN `IN_fechaIni` DATETIME, IN `IN_fechaFin` DATETIME, IN `IN_isActive` TINYINT, IN `IN_idEmpleado` INT, IN `IN_idRamo` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarRelatorRamo: Error al insertar registro --> IN_idRelatorRamo: [', IN_idRelatorRamo, '] - IN_fechaIni: [', IN_fechaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_isActive: [', IN_isActive, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_idRamo: [', IN_idRamo, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarRelatorRamo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idRelatorRamo IS NULL 
            OR IN_fechaIni IS NULL 
            OR IN_fechaFin IS NULL
            OR IN_isActive is NULL
            OR IN_idEmpleado is NULL
            OR IN_idRamo is NULL
           
            
            OR IN_idRelatorRamo = "%null%"
            OR IN_fechaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idEmpleado = "%null%"
            OR IN_idRamo = "%null%"
            
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
             
             ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_isActive NOT IN(0, 1) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del curso debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

			ELSEIF IN_idEmpleado <= 0 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El id del empleado debe ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idRamo <= 0 THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El id del ramo debe ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idRelatorRamo <= 0 THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El id del relatorRamo debe ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             	UPDATE relatorramo SET fechaIni = IN_fechaIni, fechaFin = IN_fechaFin, isActive = IN_isActive, idEmpleado = IN_idEmpleado, idRamo = IN_idRamo, fechaModificacion = now(), usuarioModificacion = IN_usuarioModificacion WHERE idRelatorRamo = IN_idRelatorRamo;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT',relRam.idRelatorRamo, relRam.fechaIni, relRam.fechaFin, UPPER(emp.nomEmpleado), UPPER(ram.nomRamo)
                FROM relatorramo relRam 
                INNER JOIN empleado emp ON (relRam.idEmpleado = emp.idEmpleado) 
                INNER JOIN ramo ram ON (relRam.idRamo = ram.idRamo) 
                WHERE relRam.idRelatorRamo = IN_idRelatorRamo;
     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarReqCurso` (IN `IN_idReqCurso` INT, IN `IN_isActive` TINYINT, IN `IN_idCurso` INT, IN `IN_idCursoRequisito` INT, IN `IN_usuarioModificacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarReqCurso: Error al insertar registro --> IN_idReqCurso: [', IN_idReqCurso, '] - IN_isActive: [', IN_isActive, '] - IN_idCurso: [', IN_idCurso, '] - IN_idCursoRequisito: [', IN_idCursoRequisito, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarReqCurso', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idReqCurso IS NULL 
            OR IN_isActive IS NULL 
            OR IN_idCurso IS NULL
            OR IN_idCursoRequisito is NULL
            OR IN_usuarioModificacion is NULL
            
            OR IN_idReqCurso = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idCurso = "%null%"
            OR IN_idCursoRequisito = "%null%"
            OR IN_usuarioModificacion = "%null%"
            
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_isActive NOT IN(0, 1) THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El estado del ramo debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCurso <= 0 THEN
 				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El id del curso tiene que ser mayor a cero';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoRequisito <= 0 THEN
 				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El id del requisito tiene que ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idReqCurso <= 0 THEN
 				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idReqCurso tiene que ser mayor a cero';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF FN_EXISTE_REQCURSO(IN_idCursoRequisito, IN_idCurso) = True THEN
    			SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El requisito para este curso ya se encuentra registrado';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El usuario administrador modifica el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
            UPDATE reqcurso SET idCurso = IN_idCurso, idCursoRequisito = IN_idCursoRequisito, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioModificacion WHERE idReqCurso = IN_idReqCurso;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', reCur.idReqCurso, UPPER(cur.nomCurso), UPPER(curReq.nomCurso) as requisitoCurso 
                FROM reqcurso reCur
                INNER JOIN curso cur ON (reCur.idCurso = cur.idCurso)
                INNER JOIN curso curReq ON (reCur.idCursoRequisito = curReq.idCurso)
                WHERE reCur.idReqCurso = IN_idReqCurso;
              
     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarResumenHHAuto` (IN `IN_idResumenPerProy` INT, IN `IN_costoMensual` DOUBLE, IN `IN_saldoMensual` DOUBLE, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE auxIdProyecto INT; -- id del proyecto del registro a modificar
          DECLARE auxMes VARCHAR(10); -- mes del registro a modificar
          DECLARE auxSaldoPresupuesto DOUBLE; -- saldo del presupuesto total anterior

          DECLARE auxSaldoMensualAnterior DOUBLE; -- saldo del presupuesto mensual anterior
          DECLARE auxPresupuestoMensualFijo DOUBLE; -- Presupuesto mensual fijo calculado matemáticamente


          DECLARE auxPresupuestoAcumulado DOUBLE; -- Presupuesto acumulado

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_editarResumenHHAuto: Error al insertar registro --> IN_idResumenPerProy: [', IN_idResumenPerProy, '] - IN_costoMensual: [', IN_costoMensual, '] - IN_saldoMensual: [', IN_saldoMensual, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_editarResumenHHAuto', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;
  		
            IF IN_idResumenPerProy < 1 THEN
                SET OUT_MJERESULT = "EL id del resumen debe ser mayor a cero";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

              -- id, mes del registro a modificar
              SELECT idProyecto, mes, presupuestoMensual into auxIdProyecto, auxMes, auxPresupuestoMensualFijo
              FROM ihhresumenperiodoproyecto 
              WHERE idresumenperproy = IN_idResumenPerProy; 

              -- saldo del presupuesto total del mes anterior, si no existe retorna el presupuesto total original de la tabla acop
              SELECT FN_obtenerPresupuestoProyecto(auxIdProyecto,auxMes) INTO auxSaldoPresupuesto;

              -- saldo del presupuesto mensual del mes anterior, si no existe retorna el presupuesto mensual original de la tabla resumen
              SELECT FN_obtenerSaldoAnterior(auxIdProyecto,auxMes) INTO auxSaldoMensualAnterior;

              
              SELECT (auxPresupuestoMensualFijo + IF(auxPresupuestoMensualFijo = auxSaldoMensualAnterior, 0, auxSaldoMensualAnterior)) into auxPresupuestoAcumulado ;

              UPDATE ihhresumenperiodoproyecto SET
              costoMensual = IN_costoMensual,
              presupuestoAcumulado = auxPresupuestoAcumulado,
              saldoMensual = (auxPresupuestoAcumulado - IN_costoMensual),
              saldoPresupuesto = (auxSaldoPresupuesto - IN_costoMensual),
              usuarioModificacion = IN_usuarioModificacion,
              fechaModificacion = now()
             WHERE idresumenperproy = IN_idResumenPerProy;
             
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

			SELECT
            OUT_CODRESULT, OUT_MJERESULT ;
                       
     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarServicio` (IN `IN_idServicio` INT, IN `IN_nomServicio` VARCHAR(100), IN `IN_idCliente` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_editarServicio: Error al insertar registro --> IN_idServicio: [', IN_idServicio, '] - IN_nomServicio: [', IN_nomServicio, '] - IN_idCliente: [', IN_idCliente, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_editarServicio', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idServicio IS NULL 
            OR IN_nomServicio IS NULL 
            OR IN_idCliente IS NULL
            OR IN_usuarioAdmin is NULL
            
            OR IN_idServicio = "%null%"
            OR IN_nomServicio = "%null%"
            OR IN_idCliente = "%null%"
            OR IN_usuarioAdmin = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

            
			 ELSEIF TRIM(IN_nomServicio) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Nombre del servicio viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idCliente) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Dirección del cliente viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
    
             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_idServicio) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El ID del servicio viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             UPDATE servicio SET nomServicio = IN_nomServicio, idCliente = IN_idCliente, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion = IN_usuarioAdmin WHERE idServicio = IN_idServicio;
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
   
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', serv.idServicio, UPPER(serv.nomServicio), serv.isActive, UPPER(cli.nomCliente)
        FROM servicio serv
        INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)
        WHERE serv.idServicio = IN_idServicio;
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_editarSesion` (IN `IN_idSesion` INT, IN `IN_NROSESION` INT, IN `IN_NOMSESION` VARCHAR(50), IN `IN_TIPOSESION` VARCHAR(10), IN `IN_TIPOSESIONHH` VARCHAR(12), IN `IN_DURACIONSESIONHH` DOUBLE, IN `IN_ISACTIVE` TINYINT, IN `IN_IDRAMO` INT, IN `IN_USUARIOMODIFICACION` VARCHAR(15), OUT `OUT_IDSESION` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE str_mjeInterno VARCHAR(500);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      ROLLBACK;
        
      SET str_mjeInterno = CONCAT('SP_editarSesion: Error al insertar registro --> ] - IN_idSesion: [', IN_idSesion, '] - IN_NROSESION: [', IN_NROSESION, '] - IN_NOMSESION: [', IN_NOMSESION, '] - IN_TIPOSESION: [', IN_TIPOSESION, '] - IN_TIPOSESIONHH: [', IN_TIPOSESIONHH, '] - IN_ISACTIVE: [', IN_ISACTIVE, '] - IN_IDRAMO: [', IN_IDRAMO, '] - IN_USUARIOMODIFICACION: [', IN_USUARIOMODIFICACION, ']');

      INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      VALUES(null, 'SP_editarSesion', str_codMySQL, str_msgMySQL, now(), '12', str_mjeInterno);
      COMMIT;
        
      SET OUT_CODRESULT = '12';
      SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
    END;

  IF IN_NROSESION IS NULL OR IN_NOMSESION IS NULL OR IN_TIPOSESION IS NULL OR IN_TIPOSESIONHH IS NULL OR IN_DURACIONSESIONHH IS NULL OR IN_ISACTIVE IS NULL OR IN_IDRAMO IS NULL OR IN_USUARIOMODIFICACION IS NULL OR IN_idSesion IS NULL THEN
    SET OUT_CODRESULT = '01';
		SET OUT_MJERESULT = 'Uno o más parámetros viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_NROSESION <= 0 THEN
    SET OUT_CODRESULT = '02';
		SET OUT_MJERESULT = 'Nro de sesión debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_NOMSESION) = '' THEN
    SET OUT_CODRESULT = '03';
		SET OUT_MJERESULT = 'Nombre de sesión viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPOSESION) NOT IN('PRESENCIAL', 'REMOTO', 'MIXTO') THEN
    SET OUT_CODRESULT = '04';
		SET OUT_MJERESULT = 'El tipo de sesión es incorrecto --> PRESENCIAL/REMOTO/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPOSESIONHH) NOT IN('ACADEMICAS', 'CRONOLOGICAS', 'MIXTO') THEN
    SET OUT_CODRESULT = '05';
		SET OUT_MJERESULT = 'El tipo de horas de la sesión es incorrecto --> ACADEMICAS/CRONOLOGICAS/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_DURACIONSESIONHH <= 0 THEN
    SET OUT_CODRESULT = '06';
		SET OUT_MJERESULT = 'La duración de la sesión en horas debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_ISACTIVE NOT IN(0, 1) THEN
    SET OUT_CODRESULT = '07';
		SET OUT_MJERESULT = 'El estado de la sesión debe ser Verdadero (1) o Falso (0)';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_IDRAMO <= 0 THEN
    SET OUT_CODRESULT = '08';
		SET OUT_MJERESULT = 'El id del ramo debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_USUARIOMODIFICACION) = '' THEN
    SET OUT_CODRESULT = '09';
		SET OUT_MJERESULT = 'Usuario viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_idSesion) <= 0 THEN
    SET OUT_CODRESULT = '10';
		SET OUT_MJERESULT = 'El ID de la sesión debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSE
    SET AUTOCOMMIT = 0;
    START TRANSACTION;
	UPDATE sesion SET nroSesion = IN_NROSESION, nomSesion = IN_NOMSESION, tipoSesion = IN_TIPOSESION, tipoSesionHH = IN_TIPOSESIONHH, duracionSesionHH = IN_DURACIONSESIONHH, isActive = IN_ISACTIVE, fechaModificacion = CURRENT_TIMESTAMP, usuarioModificacion= IN_USUARIOMODIFICACION WHERE idSesion = IN_idSesion;
      COMMIT;

    SET OUT_IDSESION = last_insert_id();
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

  END IF;   
  SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), UPPER(ram.nomRamo)
    FROM sesion se 
    INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
    WHERE se.idSesion = IN_idSesion;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_actualizarDatosResumen_auto` (IN `IN_mes` INT, IN `IN_idProyecto` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN 
    DECLARE int_mesActual INT;
    DECLARE db_costoActual DOUBLE;
    DECLARE db_saldoActual DOUBLE;
    DECLARE int_mesAnterior INT;
    DECLARE db_costoAnterior DOUBLE;
    DECLARE db_saldoAnterior DOUBLE;
    DECLARE dt_fechaActual DATE;
    DECLARE dt_fechaAnterior DATE;
    DECLARE db_saldoPresupuestoAnterior DOUBLE;

    DECLARE db_presupuestoMensual DOUBLE;
    
    DECLARE done INT;
    DECLARE num_contReg INT DEFAULT 0;
    DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
    DECLARE str_msgMySQL VARCHAR(100);
    DECLARE cursor1 CURSOR FOR 
        SELECT rpp.mes, rpp.presupuestoMensual
        FROM ihhresumenperiodoproyecto rpp 
        WHERE mes >= IN_mes AND rpp.idProyecto = IN_idProyecto 
        ORDER BY rpp.mes;
        
    -- Si no hay más registros
    DECLARE CONTINUE HANDLER FOR NOT FOUND 
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;

      IF num_contReg <= 0 THEN
        SET done = 1;
        SET OUT_CODRESULT = '02';
        SET OUT_MJERESULT = concat('SIN DATOS (', str_msgMySQL, ')');
        SELECT OUT_CODRESULT, OUT_MJERESULT;
      ELSE
        SET done = 2;
      END IF;
    END;

    -- Handler para errores
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      

      SET OUT_CODRESULT = '01';
      SET OUT_MJERESULT = str_msgMySQL;
      SELECT OUT_CODRESULT, OUT_MJERESULT;

    END;

    -- Obtengo el YYYYMM anterior
    -- Convertir YYYYMM a una fecha usando el primer día del mes
    SET dt_fechaActual = STR_TO_DATE(CONCAT(IN_mes, '01'), '%Y%m%d');
    
    -- Obtener el primer día del mes anterior
    SET dt_fechaAnterior = DATE_SUB(dt_fechaActual, INTERVAL 1 MONTH);
    
    -- Convertir la fecha anterior al formato YYYYMM
    SET int_mesAnterior = DATE_FORMAT(dt_fechaAnterior, '%Y%m');

    OPEN cursor1;
        loop_registros: LOOP

        FETCH cursor1 INTO int_mesActual, db_presupuestoMensual;
        
        -- Si no encuentra más registros, sale del loop.
        IF done = 1 OR done = 2 THEN
            LEAVE loop_registros;
        END IF;
        
        SET num_contReg = num_contReg + 1;
        -- Obtengo los datos del mes anterior
        
        CALL SP_obtener_costo_saldo_mes(int_mesAnterior, IN_idProyecto, @saldoAnterior, @costoAnterior);
       -- SET db_costoAnterior = @costoAnterior;
        SET db_saldoAnterior = @saldoAnterior;

        -- Obtengo los datos del mes actual
        CALL SP_obtener_costo_saldo_mes(int_mesActual, IN_idProyecto, @saldoActual, @costoActual);
        SET db_costoActual = @costoActual;
        SET db_saldoActual = @saldoActual;

        -- Obtengo datos del mes anterior
        SELECT saldoPresupuesto INTO db_saldoPresupuestoAnterior FROM ihhresumenperiodoproyecto WHERE mes = int_mesAnterior AND idProyecto = IN_idProyecto;


        -- -- Actualizo la tabla resumen
        UPDATE `ihhresumenperiodoproyecto` SET 
        `presupuestoAcumulado`= db_presupuestoMensual + db_saldoAnterior, 
        `costoMensual`= db_costoActual,
        `saldoMensual`= (db_presupuestoMensual + db_saldoAnterior) - db_costoActual, 
        `saldoPresupuesto`= db_saldoPresupuestoAnterior - db_costoActual,
        `usuarioModificacion`='admin_sistema',
        `fechaModificacion`= now() 
        WHERE 
        mes = int_mesActual 
        AND idProyecto = IN_idProyecto;

        -- Actualizar el mes anterior para la siguiente iteración
        SET int_mesAnterior = int_mesActual;
        END LOOP;

        IF done = 2 THEN
        SET OUT_CODRESULT = '00';
        SET OUT_MJERESULT = 'Actualización completada';

    END IF;
    CLOSE cursor1;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_aux_listadoAcops` (OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        SET OUT_CODRESULT = "00";
        SET OUT_MJERESULT = "Operación exitosa.";
        
           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           a.idAcop,
           UPPER(p.nomProyecto) nomProyecto
           FROM ihhacop a
           INNER JOIN eddproyecto p ON (p.idEDDProyecto = a.idProyecto AND p.isActive = 1 AND a.isActive = 1)
           ORDER BY p.nomProyecto;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_aux_listadoElementos` (OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        SET OUT_CODRESULT = "00";
        SET OUT_MJERESULT = "Operación exitosa.";
        
           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           ei.idElementoImp,
           UPPER(ei.nomElemento) nomElemento
           FROM ihhelementoimp ei
           WHERE ei.isActive = 1
           ORDER BY ei.nomElemento;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_aux_listadoImpugnacionEmp` (OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        SET OUT_CODRESULT = "00";
        SET OUT_MJERESULT = "Operación exitosa.";
        
           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           ie.idImpugnacionEmp,
           CONCAT (UPPER(emp.nomEmpleado), ' - ', UPPER(p.nomProyecto), ' - ', UPPER(per.nomPeriodo)) nomImpugnacionEmp
           FROM ihhimpugnacionemp ie
           INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
           INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
           INNER JOIN eddproyecto p ON (p.idEDDProyecto = a.idProyecto AND p.isActive = 1)
           INNER JOIN ihhperiodo per ON (per.idPeriodo = ie.idPeriodo AND per.isActive = 1);
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_aux_listadoPeriodos` (OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        SET OUT_CODRESULT = "00";
        SET OUT_MJERESULT = "Operación exitosa.";
        
           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           p.idPeriodo,
           UPPER(p.nomPeriodo) nomPeriodo
           FROM ihhperiodo p
           WHERE p.isActive = 1
           ORDER BY p.nomPeriodo;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_aux_listadoTipoElemento` (OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        SET OUT_CODRESULT = "00";
        SET OUT_MJERESULT = "Operación exitosa.";
        
           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           te.idTipoElemento,
           UPPER(te.nomTipoElemento) nomTipoElemento
           FROM ihhtipoelemento te
           WHERE te.isActive = 1
           ORDER BY te.nomTipoElemento;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_aux_listadoTipoPeriodo` (OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        SET OUT_CODRESULT = "00";
        SET OUT_MJERESULT = "Operación exitosa.";
        
           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           tp.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo
           FROM ihhtipoPeriodo tp
           WHERE tp.isActive = 1
           ORDER BY tp.nomTipoPeriodo;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_aux_listadoValorHH` (`IN_idProyecto` INT, `IN_mes` VARCHAR(10))   BEGIN
    SELECT 
    idEmpleado,
    UPPER(nomEmpleado) nomEmpleado,
    FN_obtenerValorHH(idEmpleado, IN_idProyecto, IN_mes) valorHH
    from empleado;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_cargaDatosBase` (IN `IN_nomCliente` VARCHAR(100), IN `IN_dirCliente` VARCHAR(100), IN `IN_paisCliente` VARCHAR(30), IN `IN_servicioCliente` VARCHAR(250), IN `IN_nomContCliente` VARCHAR(100), IN `IN_correoContCliente1` VARCHAR(100), IN `IN_correoContCliente2` VARCHAR(100), IN `IN_telefonoContCliente` INT, IN `IN_fechaIniVigContacto` DATE, IN `IN_fechaFinVigContacto` DATE, IN `IN_nomProyecto` VARCHAR(300), IN `IN_fechaIniProyecto` DATE, IN `IN_fechaFinProyecto` DATE, IN `IN_tipoProyecto` VARCHAR(30), IN `IN_presupuestoTotal` FLOAT, IN `IN_nombreColaborador` VARCHAR(100), IN `IN_cargoEnProyecto` VARCHAR(50), IN `IN_correoColaborador` VARCHAR(100), IN `IN_cargoColaborador` VARCHAR(100), IN `IN_telefonoColaborador` INT, IN `IN_paisColaborador` VARCHAR(30), IN `IN_areaColaborador` VARCHAR(50), IN `IN_valorHHColaborador` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN

/* Esta SP se encarga de recibir los datos cargados en un archivo CSV para luego realizar diferentes validaciones comprobando cada ID y luego llama a distintas SP para almacenar los datos en las tablas correspondientes */

          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE int_idPais INT;
          DECLARE int_idCliente INT;
          DECLARE int_idServicio INT;
          DECLARE int_idContacto INT;
          DECLARE int_idProyecto INT;
          DECLARE int_idColaborador INT;
          DECLARE int_idEddProyEmp INT;
          DECLARE int_idPaisColaborador INT;
          DECLARE int_idAreaColaborador INT;
          DECLARE vch_cargoEnProyecto VARCHAR(30);
          DECLARE int_cargoColaborador int;
          DECLARE vch_nomUsuario VARCHAR(50);
          DECLARE vch_password VARCHAR(10);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_cargaDatosBase: Error al insertar registro --> 
          IN_nomCliente: [', IN_nomCliente, ']
          - IN_dirCliente: [', IN_dirCliente, '] 
          - IN_paisCliente: [', IN_paisCliente, '] 
          - IN_servicioCliente: [', IN_servicioCliente, ']
          - IN_nomContCliente: [', IN_nomContCliente, ']
          - IN_correoContCliente1: [', IN_correoContCliente1, ']
          - IN_correoContCliente2: [', IN_correoContCliente2, ']
          - IN_telefonoContCliente: [', IN_telefonoContCliente, ']
          - IN_fechaIniVigContacto: [', IN_fechaIniVigContacto, ']
          - IN_fechaFinVigContacto: [', IN_fechaFinVigContacto, ']
          - IN_nomProyecto: [', IN_nomProyecto, ']
          - IN_fechaIniProyecto: [', IN_fechaIniProyecto, ']
          - IN_fechaFinProyecto: [', IN_fechaFinProyecto, ']
          - IN_tipoProyecto: [', IN_tipoProyecto, ']
          - IN_nombreColaborador: [', IN_nombreColaborador, ']
          - IN_cargoEnProyecto: [', IN_cargoEnProyecto, ']
          - IN_cargoColaborador: [', IN_cargoColaborador, ']
          - IN_correoColaborador: [', IN_correoColaborador, ']
          - IN_telefonoColaborador: [', IN_telefonoColaborador, ']
          - IN_paisColaborador: [', IN_paisColaborador, ']
          - IN_areaColaborador: [', IN_areaColaborador, ']
          - IN_valorHHColaborador: [', IN_valorHHColaborador, ']
          ');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_cargaDatosBase', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

        SET AUTOCOMMIT = 0;
        START TRANSACTION;

        -- Valida el registro del país, si no, lo crea devolviendo el ID
        SELECT FN_existePais(IN_paisCliente) into int_idPais;

        -- Valida el registro cliente
        SELECT FN_existeCliente(IN_nomCliente) INTO int_idCliente;
        IF int_idCliente <= 0 THEN
            CALL SP_insertarCliente(UPPER(TRIM(IN_nomCliente)), TRIM(IN_dirCliente), int_idPais, 'admin_sistema', @p0, @p1);
            SET int_idCliente = LAST_INSERT_ID();
        END IF;

        -- Valida el registro servicio
        SELECT FN_existeServicioCliente(IN_servicioCliente) INTO int_idServicio;
        IF int_idServicio <= 0 THEN
            CALL SP_insertarServicio(UPPER(TRIM(IN_servicioCliente)), int_idCliente,'admin_sistema', @p0, @p1);
            SET int_idServicio = LAST_INSERT_ID();
        END IF;

        -- Valida el registro contacto
        SELECT FN_existeContactoCliente(IN_nomContCliente) INTO int_idContacto;
        IF int_idContacto <= 0 THEN
            CALL SP_insertarContacto(UPPER(TRIM(IN_nomContCliente)), IN_correoContCliente1, IN_correoContCliente2, IN_telefonoContCliente,IN_fechaIniVigContacto, IN_fechaFinVigContacto, 1, int_idServicio, 'admin_sistema', @p0, @p1);
            SET int_idContacto = LAST_INSERT_ID();
        END IF;

         -- Valida el registro proyecto
        SELECT FN_existeProyecto(IN_nomProyecto) INTO int_idProyecto;
        IF int_idProyecto <= 0 THEN
            CALL SP_insertarEddProyecto(UPPER(TRIM(IN_nomProyecto)),IN_fechaIniProyecto, IN_fechaFinProyecto, IN_tipoProyecto, IN_presupuestoTotal, 1, int_idServicio,'admin_sistema', @p0, @p1);
            SET int_idProyecto = LAST_INSERT_ID();
        END IF;
		
        
        -- COLABORADOR
        -- país
        SELECT FN_existePais(IN_paisColaborador) into int_idPaisColaborador;
        -- area
        SELECT FN_existeArea(IN_areaColaborador) into int_idAreaColaborador;
        -- cargo en proyecto (referente o colaborador)
        SELECT FN_validarCargoEnProy(IN_cargoEnProyecto) into vch_cargoEnProyecto;
        -- cargo del colaborador (ej: dev, QA automatizador, etc)
        SELECT FN_existeCargoColaborador(IN_cargoColaborador) into int_cargoColaborador;

        -- genera usuario, formato FirstName.Lastname
        SELECT CONCAT(
        SUBSTRING_INDEX(IN_nombreColaborador, ' ', 1),
        '.',
        SUBSTRING_INDEX(SUBSTRING_INDEX(IN_nombreColaborador, ' ', 2), ' ', -1)
        ) into vch_nomUsuario;

        -- genera password
        select FN_GENERA_CLAVE_ALEATORIA() into vch_password;

		-- Valida el registro colaborador
        SELECT FN_existeColaborador(IN_nombreColaborador) INTO int_idColaborador;
        IF int_idColaborador <= 0 THEN

            CALL SP_insertarEmpleado(UPPER(TRIM(IN_nombreColaborador)),IN_correoColaborador, IN_telefonoColaborador, IN_valorHHColaborador, int_idPaisColaborador, int_idAreaColaborador, int_cargoColaborador, int_idCliente,vch_nomUsuario, vch_password, 'empleado','admin_sistema',3, @p0, @p1);
            SET int_idColaborador = LAST_INSERT_ID();
        END IF;

        -- Relaciona el colaborador con el proyecto
        -- Comprueba que no exista una relación antes de insertar
        SELECT FN_existeCargoEmpleado(int_idProyecto, int_idColaborador) INTO int_idEddProyEmp;
        IF int_idEddProyEmp <= 0 THEN
            CALL SP_insertarEddProyEmp(int_idProyecto, int_idColaborador, vch_cargoEnProyecto, 1,'admin_sistema', @p0, @p1);
        END IF;
             
            
        COMMIT;
        SET OUT_CODRESULT = '00';
        SET OUT_MJERESULT = 'Success';

        SELECT OUT_CODRESULT, OUT_MJERESULT, int_idServicio;           
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_cargaImpHoras` (IN `IN_nombreColaborador` VARCHAR(100), IN `IN_nomProyecto` VARCHAR(300), IN `IN_mes` INT, IN `IN_nomElemento` VARCHAR(300), IN `IN_cantHH` INT, IN `IN_cantHHE` INT, IN `IN_valorHH` FLOAT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN

/* Esta SP se encarga de recibir los datos cargados en un archivo CSV para luego realizar diferentes validaciones comprobando cada ID y luego llama a distintas SP para almacenar los datos en las tablas correspondientes */

          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE int_idProyecto INT;
          DECLARE int_idColaborador INT;
          DECLARE int_idAcop INT;
          DECLARE int_idElemento INT;
          DECLARE int_idResumenPerProy INT;
          DECLARE int_idImpugnacionEmp INT;
          DECLARE db_idCostoMensual DOUBLE;
          DECLARE db_idCostoColaborador DOUBLE;
          DECLARE db_idCostoColaboradorExtra DOUBLE;

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_cargaImpHoras: Error al insertar registro --> 
            IN_nombreColaborador: [', IN_nombreColaborador, ']
          - IN_nomProyecto: [', IN_nomProyecto, '] 
          - IN_mes: [', IN_mes, '] 
          - IN_miscelanio: [', IN_miscelanio, ']
          - IN_cantHH: [', IN_cantHH, ']
          - IN_cantHHE: [', IN_cantHHE, ']
          - IN_valorHH: [', IN_valorHH, ']
          ');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_cargaImpHoras', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

        SET AUTOCOMMIT = 0;
        START TRANSACTION;


        -- Valida el registro proyecto
        SELECT FN_existeProyecto(IN_nomProyecto) INTO int_idProyecto;
        IF int_idProyecto <= 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'No existe ese proyecto en el sistema';
            SELECT OUT_CODRESULT, OUT_MJERESULT;      
        END IF;

         -- Valida el registro resumen
        SELECT FN_existeResumenPerProy(int_idProyecto, IN_mes) INTO int_idResumenPerProy;
        IF int_idResumenPerProy <= 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'No existe ese registro resumen en el sistema';
            SELECT OUT_CODRESULT, OUT_MJERESULT;      
        END IF;

             -- Valida el registro elemento
        SELECT FN_existeElementoImp(IN_nomElemento) INTO int_idElemento;
        IF int_idElemento <= 0 THEN
            CALL SP_ihh_insertarElemento(UPPER(TRIM(IN_nomElemento)),'',1,'admin_sistema', @p0, @p1 );
            SET int_idElemento = LAST_INSERT_ID();
        END IF;
             -- Valida el registro acop
        SELECT FN_existeAcop(int_idProyecto) INTO int_idAcop;

        IF int_idAcop <= 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'No existe ese registro resumen en el sistema';
            SELECT OUT_CODRESULT, OUT_MJERESULT;  
        END IF;
        -- Valida el registro impugnacion empleado
        SELECT FN_existeImpugnacionEmp(int_idColaborador, int_idElemento, int_idAcop) INTO int_idImpugnacionEmp;

        IF int_idImpugnacionEmp <= 0 THEN
            -- Inserta la impugnación Emp y guardo el Id recién creado
            CALL SP_ihh_insertarImpugnacionEmp(int_idColaborador, int_idElemento, 1, IN_cantHH, IN_cantHHE, IN_valorHH, int_idAcop, int_idResumenPerProy, 1,'admin_sistema', @p0, @p1);

            SET int_idImpugnacionEmp = LAST_INSERT_ID();
            -- obtengo el ultimo costo mensual antes de actualizarlo
            SELECT costoMensual into db_idCostoMensual from ihhresumenperiodoproyecto WHERE idresumenPerProy = int_idResumenPerProy;
            
            -- Obtengo el costo que representa el colaborador
            SELECT IN_cantHH * IN_valorHH into db_idCostoColaborador;
            SELECT IN_cantHHE * (IN_valorHH * 1,5) into db_idCostoColaboradorExtra;
            
            -- actualizo la tabla resumen recalculando el nuevo costo del mes
            CALL SP_editarResumenHHAuto(int_idResumenPerProy, (db_idCostoMensual + db_idCostoColaborador + db_idCostoColaboradorExtra), 1, 'admin_sistema', @p0, @p1);
            
        END IF;

            
        COMMIT;
        SET OUT_CODRESULT = '00';
        SET OUT_MJERESULT = 'Success';

        SELECT OUT_CODRESULT, OUT_MJERESULT;           
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_detalleMensualProyecto` (IN `IN_idProyecto` INT, IN `IN_mes` VARCHAR(30))   BEGIN
	
   SELECT 
    ie.idImpugnacionEmp,
    ie.idEmpleado,
    ie.cantHorasPeriodo,
    ie.cantHorasExtra,
	-- FN_obtenerSaldoAnterior(rpp.idProyecto,rpp.mes) saldoMesAnterior,
	-- IF(FN_obtenerSaldoAnterior(rpp.idProyecto,rpp.mes) = rpp.presupuestoMensual, 0,FN_obtenerSaldoAnterior(rpp.idProyecto,rpp.mes)) IFFFF,

    (SELECT rpp.presupuestoMensual + (IF(FN_obtenerSaldoAnterior(rpp.idProyecto,rpp.mes) = rpp.presupuestoMensual, 0, FN_obtenerSaldoAnterior(rpp.idProyecto,rpp.mes)))) presupuestoAcumulado,

	-- rpp.presupuestoMensual + FN_obtenerSaldoAnterior(rpp.idProyecto,rpp.mes) presupuestossAcumulado,
    p.idEDDProyecto idProyecto,
    UPPER(p.nomProyecto) nomProyecto,
    ac.presupuestoTotal,
    ac.cantTotalMeses,
    ac.idAcop,
    DATE_FORMAT(p.fechaInicio, "%d-%m-%Y") fechaIniProy,
    DATE_FORMAT(p.fechaFin, "%d-%m-%Y") fechaFinProy,
    UPPER(emp.nomEmpleado) nomEmpleado,
    FN_obtenerValorHH (ie.idEmpleado, p.idEDDProyecto, rpp.mes ) valorHH,
    rpp.presupuestoMensual,
    rpp.costoMensual,
    rpp.saldoMensual,
    -- rpp.presupuestoAcumulado,
    FN_obtenerPresupuestoProyecto(p.idEDDProyecto, rpp.mes) saldoPresupuesto,
    rpp.idresumenperproy,
    eimp.idElementoImp idElemento,
    upper(eimp.nomElemento) nomElemento,
    rpp.mes
    FROM  ihhresumenperiodoproyecto rpp
    LEFT JOIN ihhimpugnacionemp ie ON (rpp.idresumenperproy = ie.idresumenperproy AND ie.isActive = 1)
    INNER JOIN eddProyecto p ON (p.idEDDProyecto = rpp.idProyecto AND p.isActive = 1)
    INNER JOIN ihhacop ac ON (ac.idProyecto = p.idEDDProyecto AND ac.isActive = 1)
    LEFT JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1)
    LEFT JOIN ihhelementoimp eimp ON (eimp.idElementoImp = ie.idElemento AND eimp.isActive = 1)
	WHERE rpp.idProyecto =IN_idProyecto AND rpp.mes = IN_mes AND rpp.isActive = 1
    ORDER BY rpp.mes,
    emp.nomEmpleado
    ;
           
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_detallePresupuestoProyecto` (IN `IN_idProyecto` INT)   BEGIN

    -- Si no se especifica el filtro
    IF IN_idProyecto = 0 THEN
        SELECT 
        rpp.idresumenperproy,
        UPPER(rpp.mes) mes,
        ROUND(rpp.presupuestoMensual,2) presupuestoMensual,
        ROUND(rpp.costoMensual,2)costoMensual,
        ROUND(rpp.saldoMensual,2) saldoMensual,
        round(rpp.saldoPresupuesto, 2) saldoPresupuesto,
        round(rpp.presupuestoAcumulado, 2) presupuestoAcumulado,
        UPPER(p.nomProyecto) nomProyecto,
        DATE_FORMAT(p.fechaInicio, '%d-%m-%Y') fechaIniProy,
        DATE_FORMAT(p.fechaFin, '%d-%m-%Y') fechaFinProy,
        UPPER(p.nomProyecto) nomProyecto,
        ac.presupuestoTotal,
        ac.idAcop
        FROM ihhresumenperiodoproyecto rpp
        INNER JOIN eddProyecto p ON (p.idEDDProyecto = rpp.idProyecto AND p.isActive = 1)
        INNER JOIN ihhAcop ac ON (ac.idProyecto = p.idEDDProyecto AND ac.isActive = 1)
        WHERE rpp.isActive = 1
        ORDER BY rpp.mes ASC;

       -- Si es especificado
        ELSE

           SELECT 
        rpp.idresumenperproy,
        UPPER(rpp.mes) mes,
        ROUND(rpp.presupuestoMensual, 2) presupuestoMensual,
        round(rpp.presupuestoAcumulado, 2) presupuestoAcumulado,
        ROUND(rpp.costoMensual, 2)costoMensual,
        ROUND(rpp.saldoMensual, 2) saldoMensual,
        round(rpp.saldoPresupuesto, 2) saldoPresupuesto,
        UPPER(p.nomProyecto) nomProyecto,
        DATE_FORMAT(p.fechaInicio, '%d-%m-%Y') fechaIniProy,
        DATE_FORMAT(p.fechaFin, '%d-%m-%Y') fechaFinProy,
        UPPER(p.nomProyecto) nomProyecto,
        ac.presupuestoTotal,
        ac.idAcop
        FROM ihhresumenperiodoproyecto rpp
        INNER JOIN eddProyecto p ON (p.idEDDProyecto = rpp.idProyecto AND p.isActive = 1)
        INNER JOIN ihhAcop ac ON (ac.idProyecto = p.idEDDProyecto AND ac.isActive = 1)
        WHERE rpp.isActive = 1 AND rpp.idProyecto = IN_idProyecto
        ORDER BY rpp.mes ASC;
        END IF;         
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarAcop` (IN `IN_idAcop` INT, IN `IN_idProyecto` INT, IN `IN_presupuestoTotal` FLOAT, IN `IN_cantTotalMeses` INT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
		  DECLARE mesActual VARCHAR(10);
          DECLARE ultCostoMen DOUBLE;

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarAcop: Error al insertar registro --> IN_idAcop: [', IN_idAcop, '] - IN_idProyecto: [', IN_idProyecto, '] - IN_presupuestoTotal: [', IN_presupuestoTotal, '] - IN_cantTotalMeses: [', IN_cantTotalMeses, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarAcop', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idAcop IS NULL 
            OR IN_idProyecto IS NULL 
            OR IN_presupuestoTotal IS NULL 
            OR IN_cantTotalMeses IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion IS NULL 
           
            OR IN_usuarioModificacion = "%null%" 

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idProyecto < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del proyecto debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_presupuestoTotal < 0 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El presupuesto total debe ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_cantTotalMeses < 1 THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'La cantidad de meses del acop debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idAcop < 1 THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El id del acop debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;    

            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

              UPDATE ihhacop SET 
                idProyecto = IN_idProyecto,
                presupuestoTotal = IN_presupuestoTotal,
                cantTotalMeses = IN_cantTotalMeses,
                isActive = IN_isActive,
                fechaCreacion = CURRENT_TIMESTAMP(),
                usuarioModificacion = IN_usuarioModificacion
                WHERE idAcop = IN_idAcop;
             

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';


			SELECT DATE_FORMAT(NOW(), '%Y%m') INTO mesActual;

            SELECT rpp.saldoMensual INTO ultCostoMen FROM ihhresumenperiodoproyecto rpp WHERE rpp.mes = mesActual;


            SELECT
            OUT_CODRESULT, OUT_MJERESULT,
            FN_comprobarRevisadoProyecto(ac.idProyecto) mesesRevisados,
            FN_revisadoMesEnCurso(ac.idProyecto) mesesActualRevisado,
			ultCostoMen as saldoRestante,
            ac.idProyecto, 
            ac.idAcop,
            UPPER(ep.nomProyecto) nomProyecto, 
            DATE_FORMAT(ep.fechaInicio, "%d-%m-%Y") as fechaIniProy, 
            DATE_FORMAT(ep.fechaFin, "%d-%m-%Y") as fechaFinProy,
            ac.presupuestoTotal,
            ROUND( ac.presupuestoTotal / ac.cantTotalMeses , 2) presupuestoMen,
            ac.cantTotalMeses
            FROM ihhacop ac
            INNER JOIN eddproyecto ep ON (
                        ep.idEDDProyecto = ac.idProyecto AND
                        ep.isActive = 1 AND 
                        ac.isActive = 1)
            WHERE ac.idAcop = IN_idAcop;           
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarElemento` (IN `IN_idElementoImp` INT, IN `IN_idTipoElemento` INT, IN `IN_nomElemento` TEXT, IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarElemento: Error al insertar registro --> IN_idElementoImp: [', IN_idElementoImp, '] - IN_idTipoElemento: [', IN_idTipoElemento, '] - IN_nomElemento: [', IN_nomElemento, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarElemento', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idElementoImp IS NULL 
            OR IN_idTipoElemento IS NULL 
            OR IN_nomElemento IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion IS NULL 
           
            OR IN_usuarioModificacion = "%null%" 

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idTipoElemento < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del tipoElemento debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomElemento) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El nombre del elemento no debe estar vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idElementoImp < 1 THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El id del elemento no puede ser menor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             UPDATE ihhelementoimp SET
                 idTipoElemento = IN_idTipoElemento,
                 nomElemento = IN_nomElemento,
                 descripcion = IN_descripcion, 
                 isActive = IN_isActive,
                 fechaModificacion = CURRENT_TIMESTAMP(),
                 usuarioModificacion = IN_usuarioModificacion
            WHERE idElementoImp = IN_idElementoImp ;
                   
                  
                  
                   
                  
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
            OUT_CODRESULT, OUT_MJERESULT,
            ei.idElementoImp, 
            ei.idTipoElemento, 
            UPPER(te.nomTipoElemento) nomTipoElemento, 
            UPPER(ei.nomElemento) nomElemento, 
            UPPER(ei.descripcion) descripcion 
            FROM ihhelementoImp ei
            INNER JOIN ihhtipoelemento te ON (
                te.idTipoElemento = ei.idTipoElemento 
                AND ei.isActive = 1 
                AND te.isActive = 1) 
            WHERE ei.idElementoImp = IN_idElementoImp;    
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarImpugnacionEmp` (IN `IN_idImpugnacionEmp` INT, IN `IN_idEmpleado` INT, IN `IN_idElemento` INT, IN `IN_idPeriodo` INT, IN `IN_cantHorasPeriodo` INT, IN `IN_cantHorasExtra` INT, IN `IN_factor` FLOAT, IN `IN_idAcop` FLOAT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE int_mes INT;
          DECLARE int_idProyecto INT;
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarImpugnacionEmp: Error al insertar registro --> IN_idImpugnacionEmp: [', IN_idImpugnacionEmp, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_idElemento: [', IN_idElemento, '] - IN_idPeriodo: [', IN_idPeriodo, '] - IN_cantHorasPeriodo: [', IN_cantHorasPeriodo, '] - IN_cantHorasExtra: [', IN_cantHorasExtra, '] - IN_factor: [', IN_factor, '] - IN_idAcop: [', IN_idAcop, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarImpugnacionEmp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idImpugnacionEmp IS NULL 
            OR IN_idEmpleado IS NULL 
            OR IN_idElemento IS NULL 
            OR IN_idPeriodo IS NULL 
            OR IN_cantHorasPeriodo IS NULL 
            OR IN_factor IS NULL 
            OR IN_idAcop IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion IS NULL 
           

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idEmpleado < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El id del empleado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idElemento < 1 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El id del elemento debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idPeriodo < 1 THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El id del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_cantHorasPeriodo < 1 THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'La cantidad de horas del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
  
            ELSEIF IN_factor < 1 THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El factor del empleado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  

            ELSEIF IN_idAcop < 1 THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'EL id del acop debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idImpugnacionEmp < 1 THEN
                SET OUT_CODRESULT = '10';
                SET OUT_MJERESULT = 'El id impugnacionEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

             -- obtengo datos del resumen para poder actualizar      
             SELECT rpp.mes, rpp.idProyecto INTO int_mes, int_idProyecto from ihhresumenperiodoproyecto rpp INNER JOIN ihhimpugnacionemp ie ON (ie.idresumenperproy = rpp.idresumenperproy AND ie.idImpugnacionEmp = IN_idImpugnacionEmp);
            
             UPDATE ihhimpugnacionemp SET
                 idEmpleado = IN_idEmpleado,
                 idElemento = IN_idElemento,
                 idPeriodo = IN_idPeriodo,
                 cantHorasPeriodo = IN_cantHorasPeriodo, 
                 cantHorasExtra = IN_cantHorasExtra,
                 valorHH = IN_factor,
                 idAcop = IN_idAcop,
                 isActive = IN_isActive, 
                 fechaModificacion = CURRENT_TIMESTAMP(),
                 usuarioModificacion = IN_usuarioModificacion

                 WHERE idImpugnacionEmp = IN_idImpugnacionEmp
                 ;
                 
             CALL SP_ihh_actualizarDatosResumen_auto(int_mes, int_idProyecto, @p0, @p1);

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

          SELECT 
            OUT_CODRESULT, OUT_MJERESULT,
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.valorHH,
            ie.idAcop,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo  
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE ie.idImpugnacionEmp = IN_idImpugnacionEmp    
            ORDER BY emp.nomEmpleado, ei.nomElemento;
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarNotaImpugnacion` (IN `IN_idNotaImpugnacion` INT, IN `IN_idImpugnacionEmp` INT, IN `IN_nota` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarNotaImpugnacion: Error al insertar registro --> IN_idNotaImpugnacion: [', IN_idNotaImpugnacion, '] - IN_idImpugnacionEmp: [', IN_idImpugnacionEmp, '] - IN_nota: [', IN_nota, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarNotaImpugnacion', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idNotaImpugnacion IS NULL 
            OR IN_idImpugnacionEmp IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idImpugnacionEmp < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del idImpugnacionEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idNotaImpugnacion < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del idNotaImpugnacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;    


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             UPDATE ihhnotaimpugnacion SET
                 idImpugnacionEmp = IN_idImpugnacionEmp,
                 nota = IN_nota,
                 isActive = IN_isActive,
                 fechaModificacion =  CURRENT_TIMESTAMP(),
                 usuarioModificacion = IN_usuarioModificacion 
                 WHERE idNotaImpugnacion = IN_idNotaImpugnacion;
                
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
            OUT_CODRESULT, OUT_MJERESULT,
             ni.idNotaImpugnacion, ni.idImpugnacionEmp, UPPER(ni.nota) nota
            FROM ihhnotaimpugnacion ni 
            INNER JOIN ihhimpugnacionemp ie ON (ie.idImpugnacionEmp = ni.idImpugnacionEmp 
                                                AND ie.isActive = 1 
                                                AND ni.isActive = 1)
            WHERE ni.idNotaImpugnacion = IN_idNotaImpugnacion;    
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarPeriodo` (IN `IN_idPeriodo` INT, IN `IN_idTipoPeriodo` INT, IN `IN_nomPeriodo` VARCHAR(50), IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarPeriodo: Error al insertar registro --> IN_idPeriodo: [', IN_idPeriodo, '] - IN_idTipoPeriodo: [', IN_idTipoPeriodo, '] - IN_nomPeriodo: [', IN_nomPeriodo, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarPeriodo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idPeriodo IS NULL 
            OR IN_idTipoPeriodo IS NULL 
            OR IN_nomPeriodo IS NULL 
            OR IN_descripcion IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idTipoPeriodo < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del idImpugnacionEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomPeriodo) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'EL nombre del periodo no debe estar vacío.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;                  

            ELSEIF IN_idPeriodo < 1 THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El id del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  

            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             UPDATE ihhperiodo SET
                 idTipoPeriodo = IN_idTipoPeriodo,
                 nomPeriodo = IN_nomPeriodo,
                 descripcion = IN_descripcion,
                 isActive = IN_isActive,
                 fechaModificacion = CURRENT_TIMESTAMP(),
                 usuarioModificacion = IN_usuarioModificacion
                 WHERE idPeriodo = IN_idPeriodo;

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           p.idPeriodo,
           UPPER(p.nomPeriodo) nomPeriodo,
           p.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           UPPER(p.descripcion) descripcion
           FROM ihhperiodo p
           INNER JOIN ihhtipoperiodo tp ON (tp.idTipoPeriodo = p.idTipoPeriodo AND p.isActive = 1 AND tp.isActive = 1)
            WHERE p.idPeriodo = IN_idPeriodo   
           ORDER BY tp.nomTipoPeriodo;
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarResumenProyectoManual` (IN `IN_idResumenPerProy` INT, IN `IN_presupuestoMensual` DOUBLE, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN

-- esta SP cambia los valores de presupuesto mensual cuando el usuario los ingresa de forma manual luego de crear el proyecto
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE int_mes int;
          DECLARE int_idProyecto int;

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarResumenProyectoManual: Error al insertar registro --> IN_idResumenPerProy: [', IN_idResumenPerProy, '] - IN_presupuestoMensual: [', IN_presupuestoMensual, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarResumenProyectoManual', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;
  		
            IF IN_idResumenPerProy < 1 THEN
                SET OUT_MJERESULT = "EL id del resumen debe ser mayor a cero";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioModificacion) = '' THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;
              
                SELECT mes, idProyecto INTO int_mes, int_idProyecto from ihhresumenperiodoproyecto  WHERE idresumenperproy = IN_idResumenPerProy;
        
              UPDATE ihhresumenperiodoproyecto SET
              presupuestoMensual = IN_presupuestoMensual,
              usuarioModificacion = IN_usuarioModificacion,
              fechaModificacion = now()
             WHERE idresumenperproy = IN_idResumenPerProy;

             CALL SP_ihh_actualizarDatosResumen_auto(int_mes, int_idProyecto, @p0, @p1);

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

			SELECT
            OUT_CODRESULT, OUT_MJERESULT ;
                       
     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarTipoElemento` (IN `IN_idTipoElemento` INT, IN `IN_nomTipoElemento` VARCHAR(100), IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarTipoElemento: Error al insertar registro --> IN_idTipoElemento: [', IN_idTipoElemento, '] - IN_nomTipoElemento: [', IN_nomTipoElemento, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarTipoElemento', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idTipoElemento IS NULL 
            OR IN_nomTipoElemento IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomTipoElemento) = '' THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El tipo de elemento no debe estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSEIF IN_idTipoElemento < 1 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El id del tipo de elemento debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             UPDATE ihhtipoelemento SET
                 nomTipoElemento = IN_nomTipoElemento, 
                 descripcion = IN_descripcion,
                 isActive = IN_isActive,
                 fechaModificacion = CURRENT_TIMESTAMP, 
                 usuarioModificacion = IN_usuarioModificacion
             WHERE idTipoElemento = IN_idTipoElemento;

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           te.idTipoElemento,
           UPPER(te.nomTipoElemento) nomTipoElemento,
           UPPER(te.descripcion) descripcion
           FROM ihhtipoelemento te
           WHERE te.isActive = 1 AND te.idTipoElemento = IN_idTipoElemento
           ORDER BY te.nomTipoElemento;   
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_editarTipoPeriodo` (IN `IN_idTipoPeriodo` INT, IN `IN_nomTipoPeriodo` VARCHAR(100), IN `IN_dias` INT, IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioModificacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_editarTipoPeriodo: Error al insertar registro --> IN_idTipoPeriodo: [', IN_idTipoPeriodo, '] - IN_nomTipoPeriodo: [', IN_nomTipoPeriodo, '] - IN_dias: [', IN_dias, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioModificacion: [', IN_usuarioModificacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_editarTipoPeriodo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idTipoPeriodo IS NULL 
            OR IN_nomTipoPeriodo IS NULL 
            OR IN_dias IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioModificacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomTipoPeriodo) = '' THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El tipo de periodo no debe estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_dias < 1 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'La cantidad de días del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idTipoPeriodo < 1 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El id del tipo de periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;    


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             UPDATE ihhtipoperiodo SET
                 nomTipoPeriodo = IN_nomTipoPeriodo, 
                 dias = IN_dias, 
                 descripcion = IN_descripcion, 
                 isActive = IN_isActive,
                 fechaModificacion = CURRENT_TIMESTAMP(), 
                 usuarioModificacion = IN_usuarioModificacion

                 WHERE idTipoPeriodo = IN_idTipoPeriodo;
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           tp.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           tp.dias,
           UPPER(tp.descripcion) descripcion
           FROM ihhtipoperiodo tp
           WHERE tp.isActive = 1 AND tp.idTipoPeriodo = IN_idTipoPeriodo
           ORDER BY tp.nomTipoPeriodo;  
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_impEmpProy` (IN `IN_nombreColaborador` VARCHAR(100), IN `IN_nomProyecto` VARCHAR(300), IN `IN_nomElemento` VARCHAR(300), IN `IN_mes` INT, IN `IN_cantHoras` INT, IN `IN_cantHorasEE` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN

/* Esta SP se encarga de recibir los datos cargados en un archivo CSV para luego realizar diferentes validaciones comprobando cada ID y luego llama a distintas SP para almacenar los datos en las tablas correspondientes */

          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE int_idColaborador INT;
          DECLARE int_idProyecto INT;
          DECLARE int_idElemento INT;
          DECLARE int_idAcop INT;
          DECLARE int_valorHH INT;
          DECLARE int_idResumenPerProy INT;
          DECLARE int_idImpugnacionEmp INT;
          DECLARE db_idCostoColaborador DOUBLE;
          DECLARE db_idCostoColaboradorExtra DOUBLE;
          DECLARE db_idCostoMensual DOUBLE;

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN       
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_impEmpProy: Error al insertar registro --> 
          IN_nombreColaborador: [', IN_nombreColaborador, ']
          - IN_nomProyecto: [', IN_nomProyecto, '] 
          - IN_nomElemento: [', IN_nomElemento, '] 
          - IN_cantHoras: [', IN_cantHoras, ']
          - IN_mes: [', IN_mes, ']
          - IN_cantHorasEE: [', IN_cantHorasEE, ']
          ');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_impEmpProy', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

        SET AUTOCOMMIT = 0;
        START TRANSACTION;

         -- Valida el registro proyecto
        SELECT FN_existeProyecto(IN_nomProyecto) INTO int_idProyecto;
        IF int_idProyecto <= 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'No existe el proyecto en el sistema';
            SELECT OUT_CODRESULT, OUT_MJERESULT;      
        END IF;

		-- Valida el registro colaborador
        SELECT FN_existeColaborador(IN_nombreColaborador) INTO int_idColaborador;
		IF int_idColaborador <= 0 THEN
            SET OUT_CODRESULT = '02';
            SET OUT_MJERESULT = 'No existe el colaborador en el sistema';
            SELECT OUT_CODRESULT, OUT_MJERESULT;      
        END IF;

        -- obtiene el valor HH del colaborador
        SELECT valorHH into int_valorHH from empleado emp where emp.idEmpleado = int_idColaborador;
        
        -- Valida el registro acop
        SELECT FN_existeAcop(int_idProyecto) INTO int_idAcop;
        IF int_idAcop <= 0 THEN
            SET OUT_CODRESULT = '03';
            SET OUT_MJERESULT = 'No existe el acop en el sistema';
            SELECT OUT_CODRESULT, OUT_MJERESULT;      
        END IF;

        -- Valida el registro resumen
        SELECT FN_existeResumenPerProy(int_idProyecto, IN_mes) INTO int_idResumenPerProy;
        IF int_idResumenPerProy <= 0 THEN
            SET OUT_CODRESULT = '04';
            SET OUT_MJERESULT = 'No existe ese registro resumen en el sistema';
            SELECT OUT_CODRESULT, OUT_MJERESULT;      
        END IF;

            -- Valida el registro elemento
        SELECT FN_existeElementoImp(IN_nomElemento) INTO int_idElemento;
        IF int_idElemento <= 0 THEN
            CALL SP_ihh_insertarElemento(UPPER(TRIM(IN_nomElemento)),'',1,'admin_sistema', @p0, @p1 );
            SET int_idElemento = LAST_INSERT_ID();
        END IF;



        -- Valida el registro impugnacion empleado
        SELECT FN_existeImpugnacionEmp(int_idColaborador, int_idElemento, int_idAcop) INTO int_idImpugnacionEmp;

        IF int_idImpugnacionEmp <= 0 THEN

            -- Inserta la impugnación Emp y guardo el Id recién creado
            CALL SP_ihh_insertarImpugnacionEmp(int_idColaborador, int_idElemento, 1, IN_cantHoras, IN_cantHorasEE, int_valorHH, int_idAcop, int_idResumenPerProy, 1,'admin_sistema', @p0, @p1);

            -- SET int_idImpugnacionEmp = LAST_INSERT_ID();
            -- obtengo el ultimo costo mensual antes de actualizarlo
            SELECT costoMensual into db_idCostoMensual from ihhresumenperiodoproyecto WHERE idresumenPerProy = int_idResumenPerProy;
            
            -- Obtengo el costo que representa el colaborador
            SELECT IN_cantHoras * int_valorHH into db_idCostoColaborador;
            SELECT IN_cantHorasEE * (int_valorHH * 1,5) into db_idCostoColaboradorExtra;
            
            -- actualizo la tabla resumen recalculando el nuevo costo del mes
            CALL SP_editarResumenHHAuto(int_idResumenPerProy, (db_idCostoMensual + db_idCostoColaborador + db_idCostoColaboradorExtra), 1, 'admin_sistema', @p0, @p1);

        ELSE

            -- edito la impugnación Emp
            CALL SP_ihh_editarImpugnacionEmp(int_idImpugnacionEmp, int_idColaborador, int_idElemento, 1, IN_cantHoras, IN_cantHorasEE, int_valorHH, int_idAcop, 1,'admin_sistema', @p0, @p1);

            -- SET int_idImpugnacionEmp = LAST_INSERT_ID();
            -- obtengo el ultimo costo mensual antes de actualizarlo
            SELECT costoMensual into db_idCostoMensual from ihhresumenperiodoproyecto WHERE idresumenPerProy = int_idResumenPerProy;
            
            -- Obtengo el costo que representa el colaborador
            SELECT IN_cantHoras * int_valorHH into db_idCostoColaborador;
            SELECT IN_cantHorasEE * (int_valorHH * 1,5) into db_idCostoColaboradorExtra;
            
            -- actualizo la tabla resumen recalculando el nuevo costo del mes
            CALL SP_editarResumenHHAuto(int_idResumenPerProy, (db_idCostoMensual + db_idCostoColaborador + db_idCostoColaboradorExtra), 1, 'admin_sistema', @p0, @p1);


        END IF;     
            
        COMMIT;
        SET OUT_CODRESULT = '00';
        SET OUT_MJERESULT = 'Success';

        SELECT OUT_CODRESULT, OUT_MJERESULT;           
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarAcop` (IN `IN_idProyecto` INT, IN `IN_presupuestoTotal` FLOAT, IN `IN_cantTotalMeses` INT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarAcop: Error al insertar registro --> IN_idProyecto: [', IN_idProyecto, '] - IN_presupuestoTotal: [', IN_presupuestoTotal, '] - IN_cantTotalMeses: [', IN_cantTotalMeses, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarAcop', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idProyecto IS NULL 
            OR IN_presupuestoTotal IS NULL 
            OR IN_cantTotalMeses IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           
            OR IN_usuarioCreacion = "%null%" 

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idProyecto < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del proyecto debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_presupuestoTotal < 0 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El presupuesto total debe ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_cantTotalMeses < 1 THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'La cantidad de meses del acop debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             INSERT INTO ihhacop (
                 idProyecto, 
                 presupuestoTotal, 
                 cantTotalMeses,  
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (IN_idProyecto, 
                  IN_presupuestoTotal, 
                  IN_cantTotalMeses, 
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';
			
            /*
            SELECT
            OUT_CODRESULT, OUT_MJERESULT,
            ac.idProyecto, 
            ac.idAcop,
            UPPER(ep.nomProyecto) nomProyecto, 
            DATE_FORMAT(ep.fechaInicio, "%d-%m-%Y") as fechaIniProy, 
            DATE_FORMAT(ep.fechaFin, "%d-%m-%Y") as fechaFinProy,
            ac.presupuestoTotal,
            ROUND( ac.presupuestoTotal / ac.cantTotalMeses , 2) presupuestoMen,
            ac.cantTotalMeses
            FROM ihhacop ac
            INNER JOIN eddproyecto ep ON (
                        ep.idEDDProyecto = ac.idProyecto AND
                        ep.isActive = 1 AND 
                        ac.isActive = 1)
            WHERE ac.idAcop = LAST_INSERT_ID();   

*/
                   
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarDocumento` (IN `IN_nomDocumento` VARCHAR(50), IN `IN_ruta` VARCHAR(50), IN `IN_tipo` VARCHAR(10), IN `IN_descripcion` VARCHAR(250), IN `IN_nomTabla` VARCHAR(50), IN `IN_idRegistro` INT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE boo_existeDocumento INT;

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarDocumento: Error al insertar registro --> IN_nomDocumento: [', IN_nomDocumento, '] - IN_ruta: [', IN_ruta, '] - IN_tipo: [', IN_tipo, '] - IN_nomTabla: [', IN_nomTabla, '] - IN_idRegistro: [', IN_idRegistro, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarDocumento', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_nomDocumento IS NULL 
            OR IN_ruta IS NULL 
            OR IN_tipo IS NULL 
            OR IN_nomTabla IS NULL 
            OR IN_idRegistro IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           
            OR IN_usuarioCreacion = "%null%" 

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomDocumento) = "" THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El nombre del documento no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_ruta) = "" THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'La ruta del archivo no puede estar vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_tipo NOT IN ('xlxs', 'pdf') THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'Solo se permiten archivos xlsx (EXCEL) o PDF';
                SELECT OUT_MJERESULT, OUT_CODRESULT;    

            ELSEIF TRIM(IN_nomTabla) = "" THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El nombre de la tabla no puede estar vacía';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idRegistro < 1 THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El id del registro relacionado no puede ser menor a 1';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;


             SELECT FN_EXISTE_versionDocumento(IN_nomTabla, IN_idRegistro, IN_nomDocumento) INTO boo_existeDocumento;

             IF boo_existeDocumento = TRUE THEN

                UPDATE ihhdocumentos SET
                version = version + 1,
                descripcion = IN_descripcion,
                nomDocumento = IN_nomDocumento,
                usuarioModificacion = IN_usuarioCreacion,
                fechaModificacion = now()
                WHERE
                nomTabla = IN_nomTabla AND
                idRegistro = IN_idRegistro;

             ELSE

                INSERT INTO ihhdocumentos (
                 nomDocumento, 
                 ruta, 
                 tipo,  
                 descripcion,  
                 version,  
                 nomTabla,  
                 idRegistro,  
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (IN_nomDocumento, 
                  IN_ruta, 
                  IN_tipo, 
                  IN_descripcion, 
                  1, 
                  IN_nomTabla, 
                  IN_idRegistro, 
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);

             END IF;
            
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

            SELECT OUT_CODRESULT, OUT_MJERESULT;           
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarElemento` (IN `IN_idTipoElemento` INT, IN `IN_nomElemento` TEXT, IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarElemento: Error al insertar registro --> IN_idTipoElemento: [', IN_idTipoElemento, '] - IN_nomElemento: [', IN_nomElemento, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarElemento', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idTipoElemento IS NULL 
            OR IN_nomElemento IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           
            OR IN_usuarioCreacion = "%null%" 

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idTipoElemento < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del tipoElemento debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomElemento) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El nombre del elemento no debe estar vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             INSERT INTO ihhelementoimp (
                 idTipoElemento, 
                 nomElemento, 
                 descripcion,  
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (IN_idTipoElemento, 
                  IN_nomElemento, 
                  IN_descripcion, 
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
            OUT_CODRESULT, OUT_MJERESULT,
            ei.idElementoImp, 
            ei.idTipoElemento, 
            UPPER(te.nomTipoElemento) nomTipoElemento, 
            UPPER(ei.nomElemento) nomElemento, 
            UPPER(ei.descripcion) descripcion 
            FROM ihhelementoImp ei
            INNER JOIN ihhtipoelemento te ON (
                te.idTipoElemento = ei.idTipoElemento 
                AND ei.isActive = 1 
                AND te.isActive = 1) 
            WHERE ei.idElementoImp = LAST_INSERT_ID();    
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarImpugnacionEmp` (IN `IN_idEmpleado` INT, IN `IN_idElemento` INT, IN `IN_idPeriodo` INT, IN `IN_cantHorasPeriodo` INT, IN `IN_cantHorasExtra` INT, IN `IN_factor` FLOAT, IN `IN_idAcop` FLOAT, IN `IN_idResumenPerProy` INT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE int_mes INT;
          DECLARE int_idProyecto INT;
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarImpugnacionEmp: Error al insertar registro --> IN_idEmpleado: [', IN_idEmpleado, '] - IN_idElemento: [', IN_idElemento, '] - IN_idPeriodo: [', IN_idPeriodo, '] - IN_cantHorasPeriodo: [', IN_cantHorasPeriodo, '] - IN_cantHorasExtra: [', IN_cantHorasExtra, '] - IN_factor: [', IN_factor, '] - IN_idAcop: [', IN_idAcop, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarImpugnacionEmp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idEmpleado IS NULL 
            OR IN_idElemento IS NULL 
            OR IN_idPeriodo IS NULL 
            OR IN_cantHorasPeriodo IS NULL 
            OR IN_factor IS NULL 
            OR IN_idAcop IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idEmpleado < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El id del empleado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idElemento < 1 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El id del elemento debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idPeriodo < 1 THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El id del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_cantHorasPeriodo < 1 THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'La cantidad de horas del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
  
            ELSEIF IN_factor < 1 THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El factor del empleado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  

            ELSEIF IN_idAcop < 1 THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'EL id del acop debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             INSERT INTO ihhimpugnacionemp (
                 idEmpleado, 
                 idElemento, 
                 idPeriodo,  
                 cantHorasPeriodo,  
                 cantHorasExtra,  
                 valorHH,  
                 idAcop,  
                 idresumenperproy,
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES (
                  IN_idEmpleado, 
                  IN_idElemento, 
                  IN_idPeriodo, 
                  IN_cantHorasPeriodo, 
                  IN_cantHorasExtra, 
                  IN_factor, 
                  IN_idAcop, 
                  IN_idResumenPerProy,
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);

              -- obtengo datos del resumen para poder actualizar      
             SELECT rpp.mes, rpp.idProyecto INTO int_mes, int_idProyecto from ihhresumenperiodoproyecto rpp INNER JOIN ihhimpugnacionemp ie ON (ie.idresumenperproy = rpp.idresumenperproy AND ie.idImpugnacionEmp = LAST_INSERT_ID());    

             CALL SP_ihh_actualizarDatosResumen_auto(int_mes, int_idProyecto, @p0, @p1);





             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

          SELECT 
            OUT_CODRESULT, OUT_MJERESULT,
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.valorHH factor,
            ie.idAcop
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE ie.idImpugnacionEmp = LAST_INSERT_ID()    
            ORDER BY emp.nomEmpleado, ei.nomElemento;
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarNotaImpugnacion` (IN `IN_idImpugnacionEmp` INT, IN `IN_nota` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarNotaImpugnacion: Error al insertar registro --> IN_idImpugnacionEmp: [', IN_idImpugnacionEmp, '] - IN_nota: [', IN_nota, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarNotaImpugnacion', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idImpugnacionEmp IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idImpugnacionEmp < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del idImpugnacionEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             INSERT INTO ihhnotaimpugnacion (
                 idImpugnacionEmp, 
                 nota, 
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (IN_idImpugnacionEmp, 
                  IN_nota, 
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
            OUT_CODRESULT, OUT_MJERESULT,
             ni.idNotaImpugnacion, ni.idImpugnacionEmp, UPPER(ni.nota) nota
            FROM ihhnotaimpugnacion ni 
            INNER JOIN ihhimpugnacionemp ie ON (ie.idImpugnacionEmp = ni.idImpugnacionEmp 
                                                AND ie.isActive = 1 
                                                AND ni.isActive = 1)
            WHERE ni.idNotaImpugnacion = LAST_INSERT_ID();    
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarPeriodo` (IN `IN_idTipoPeriodo` INT, IN `IN_nomPeriodo` VARCHAR(50), IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarPeriodo: Error al insertar registro --> IN_idTipoPeriodo: [', IN_idTipoPeriodo, '] - IN_nomPeriodo: [', IN_nomPeriodo, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarPeriodo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idTipoPeriodo IS NULL 
            OR IN_nomPeriodo IS NULL 
            OR IN_descripcion IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idTipoPeriodo < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'EL id del idImpugnacionEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomPeriodo) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'EL nombre del periodo no debe estar vacío.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;                  

            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             INSERT INTO ihhperiodo (
                 idTipoPeriodo, 
                 nomPeriodo, 
                 descripcion, 
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (IN_idTipoPeriodo, 
                  IN_nomPeriodo, 
                  IN_descripcion, 
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           p.idPeriodo,
           UPPER(p.nomPeriodo) nomPeriodo,
           p.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           UPPER(p.descripcion) descripcion
           FROM ihhperiodo p
           INNER JOIN ihhtipoperiodo tp ON (tp.idTipoPeriodo = p.idTipoPeriodo AND p.isActive = 1 AND tp.isActive = 1)
            WHERE p.idPeriodo = LAST_INSERT_ID()   
           ORDER BY tp.nomTipoPeriodo;
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarTipoElemento` (IN `IN_nomTipoElemento` VARCHAR(100), IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarTipoElemento: Error al insertar registro --> IN_nomTipoElemento: [', IN_nomTipoElemento, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarTipoElemento', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_nomTipoElemento IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomTipoElemento) = '' THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El tipo de elemento no debe estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             INSERT INTO ihhtipoelemento (
                 nomTipoElemento, 
                 descripcion, 
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (IN_nomTipoElemento, 
                  IN_descripcion, 
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           te.idTipoElemento,
           UPPER(te.nomTipoElemento) nomTipoElemento,
           UPPER(te.descripcion) descripcion
           FROM ihhtipoelemento te
           WHERE te.isActive = 1 AND te.idTipoElemento = LAST_INSERT_ID()
           ORDER BY te.nomTipoElemento;   
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_insertarTipoPeriodo` (IN `IN_nomTipoPeriodo` VARCHAR(100), IN `IN_dias` INT, IN `IN_descripcion` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_insertarTipoPeriodo: Error al insertar registro --> IN_nomTipoPeriodo: [', IN_nomTipoPeriodo, '] - IN_dias: [', IN_dias, '] - IN_descripcion: [', IN_descripcion, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_insertarTipoPeriodo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_nomTipoPeriodo IS NULL 
            OR IN_dias IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_nomTipoPeriodo) = '' THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El tipo de periodo no debe estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_dias < 1 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'La cantidad de días debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;


            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            
             INSERT INTO ihhtipoperiodo (
                 nomTipoPeriodo, 
                 dias, 
                 descripcion, 
                 isActive, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (IN_nomTipoPeriodo, 
                  IN_dias, 
                  IN_descripcion, 
                  IN_isActive,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

           SELECT 
           OUT_CODRESULT, OUT_MJERESULT,
           tp.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           tp.dias,
           UPPER(tp.descripcion) descripcion
           FROM ihhtipoperiodo tp
           WHERE tp.isActive = 1 AND tp.idTipoPeriodo = LAST_INSERT_ID()
           ORDER BY tp.nomTipoPeriodo;  
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoAcop` (IN `IN_idProyecto` INT, IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
  DECLARE temp_cantRegistros INT;
  DECLARE mesActual VARCHAR(10);
  DECLARE ultCostoMen DOUBLE;

  SELECT DATE_FORMAT(NOW(), '%Y%m') INTO mesActual;

 


    -- Verificar si no se especifica un proyecto
    IF IN_idProyecto = 0 THEN
        -- Recuperar los datos de todos los proyectos activos
        SELECT COUNT(ac.idAcop) INTO temp_cantRegistros FROM ihhacop ac INNER JOIN eddproyecto ep ON (
            ep.idEDDProyecto = ac.idProyecto AND 
            ac.isActive = 1 AND ep.isActive = 1);

        SELECT
            temp_cantRegistros,
            FN_comprobarRevisadoProyecto(ac.idProyecto) mesesRevisados,
            FN_revisadoMesEnCurso(ac.idProyecto, ep.fechaFin) mesesActualRevisado,
		    FN_obtenerEstadoSaldoRestante(ep.idEDDProyecto, ep.fechaFin) as saldoRestante,
            ac.idAcop, 
            ac.idProyecto, 
            UPPER(ep.nomProyecto) nomProyecto, 
            DATE_FORMAT(ep.fechaInicio, "%d-%m-%Y") as fechaIniProy, 
            DATE_FORMAT(ep.fechaFin, "%d-%m-%Y") as fechaFinProy,
            ac.presupuestoTotal,
            ROUND(ac.presupuestoTotal / ac.cantTotalMeses, 2) presupuestoMen,
            ac.cantTotalMeses
        FROM ihhacop ac
 
        INNER JOIN eddproyecto ep ON (
            ep.idEDDProyecto = ac.idProyecto AND 
            ac.isActive = 1 AND ep.isActive = 1) 
        INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idProyecto = ac.idProyecto)    
        GROUP BY ep.idEDDProyecto        
		ORDER BY ep.nomProyecto
        LIMIT IN_inicio, IN_cantidadPorPagina;
    
    -- Si se especifica un proyecto
    ELSE
        -- Recuperar los datos del proyecto específico

        SELECT COUNT(ac.idAcop) INTO temp_cantRegistros FROM ihhacop ac INNER JOIN eddproyecto ep ON (
            ep.idEDDProyecto = ac.idProyecto AND
            ac.idProyecto = IN_idProyecto AND 
            ep.isActive = 1 AND 
            ac.isActive = 1);

        SELECT
            ac.idAcop, 
            ac.idProyecto, 
            UPPER(ep.nomProyecto) nomProyecto, 
            FN_comprobarRevisadoProyecto(ac.idProyecto) mesesRevisados,
            FN_revisadoMesEnCurso(ac.idProyecto) mesesActualRevisado,
			FN_obtenerEstadoSaldoRestante(ep.idEDDProyecto, ep.fechaFin) as saldoRestante,
            temp_cantRegistros,
            DATE_FORMAT(ep.fechaInicio, "%d-%m-%Y") as fechaIniProy, 
            DATE_FORMAT(ep.fechaFin, "%d-%m-%Y") as fechaFinProy,
            ac.presupuestoTotal,
            ROUND(ac.presupuestoTotal / ac.cantTotalMeses, 2) presupuestoMen,
            ac.cantTotalMeses
        FROM ihhacop ac
        INNER JOIN eddproyecto ep ON (
            ep.idEDDProyecto = ac.idProyecto AND
            ac.idProyecto = IN_idProyecto AND 
            ep.isActive = 1 AND 
            ac.isActive = 1)
        INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idProyecto = ac.idProyecto)    
        GROUP BY ep.idEDDProyecto
        ORDER BY ep.nomProyecto
        LIMIT  IN_inicio , IN_cantidadPorPagina;
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoElementoImp` (IN `IN_idElementoImp` INT, IN `IN_idTipoElemento` INT, IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
    DECLARE temp_cantRegistros INT;


    -- Verificar si no se especifica un tipo de elemento
    IF IN_idTipoElemento = 0 AND IN_idElementoImp = 0 THEN 
        -- Recuperar los datos de todos los elementos de importancia

        SELECT COUNT(ei.idElementoImp) INTO temp_cantRegistros 
        FROM ihhelementoimp ei
        INNER JOIN ihhtipoelemento te ON (
            te.idTipoElemento = ei.idTipoElemento 
            AND ei.isActive = 1 
            AND te.isActive = 1);
    
        SELECT 
            temp_cantRegistros,
            ei.idElementoImp, 
            ei.idTipoElemento, 
            UPPER(te.nomTipoElemento) nomTipoElemento, 
            UPPER(ei.nomElemento) nomElemento, 
            UPPER(ei.descripcion) descripcion 
        FROM ihhelementoimp ei
        INNER JOIN ihhtipoelemento te ON (
            te.idTipoElemento = ei.idTipoElemento 
            AND ei.isActive = 1 
            AND te.isActive = 1) 
        ORDER BY ei.nomElemento, te.nomTipoElemento
        LIMIT IN_inicio, IN_cantidadPorPagina;

    -- Si se especifica un tipo de elemento
    ELSEIF IN_idTipoElemento != 0 AND IN_idElementoImp = 0 THEN
        -- Recuperar los datos de los elementos del tipo especificado   
        SELECT COUNT(ei.idElementoImp) INTO temp_cantRegistros 
        FROM ihhelementoImp ei
        INNER JOIN ihhtipoelemento te ON (
            te.idTipoElemento = ei.idTipoElemento 
            AND te.idTipoElemento = IN_idTipoElemento 
            AND ei.isActive = 1 
            AND te.isActive = 1);
    
        SELECT 
            temp_cantRegistros,
            ei.idElementoImp, 
            ei.idTipoElemento, 
            UPPER(te.nomTipoElemento) nomTipoElemento, 
            UPPER(ei.nomElemento) nomElemento, 
            UPPER(ei.descripcion) descripcion 
        FROM ihhelementoImp ei
        INNER JOIN ihhtipoelemento te ON (
            te.idTipoElemento = ei.idTipoElemento 
            AND te.idTipoElemento = IN_idTipoElemento 
            AND ei.isActive = 1 
            AND te.isActive = 1) 
        ORDER BY ei.nomElemento, te.nomTipoElemento
        LIMIT IN_inicio, IN_cantidadPorPagina;   
    
    ELSEIF IN_idTipoElemento = 0 AND IN_idElementoImp != 0 THEN
        -- Recuperar los datos de los elementos del tipo especificado   
        SELECT COUNT(ei.idElementoImp) INTO temp_cantRegistros 
        FROM ihhelementoImp ei
        WHERE ei.idElementoImp = IN_idElementoImp;
    
        SELECT 
            temp_cantRegistros,
            ei.idElementoImp, 
            ei.idTipoElemento, 
            UPPER(te.nomTipoElemento) nomTipoElemento, 
            UPPER(ei.nomElemento) nomElemento, 
            UPPER(ei.descripcion) descripcion 
        FROM ihhelementoImp ei
        INNER JOIN ihhtipoelemento te ON (
            te.idTipoElemento = ei.idTipoElemento 
            AND ei.idElementoImp = IN_idElementoImp 
            AND ei.isActive = 1 
            AND te.isActive = 1) 
        ORDER BY ei.nomElemento, te.nomTipoElemento
        LIMIT IN_inicio, IN_cantidadPorPagina;   
    
    END IF;         
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoImpEmp` (IN `IN_idEmpleado` INT, IN `IN_mes` VARCHAR(30))   BEGIN
	
   SELECT 
    ie.idImpugnacionEmp,
    ie.idEmpleado,
    UPPER(emp.nomEmpleado) nomEmpleado,
    ie.cantHorasPeriodo,
    ie.cantHorasExtra,
    p.idEDDProyecto idProyecto,
    ac.idAcop,
    rpp.idresumenperproy,
    UPPER(p.nomProyecto) nomProyecto,
    FN_obtenerValorHH (ie.idEmpleado, p.idEDDProyecto, rpp.mes ) valorHH,
    eimp.idElementoImp idElemento,
    upper(eimp.nomElemento) nomElemento
    FROM ihhresumenperiodoproyecto rpp
    LEFT JOIN ihhimpugnacionemp ie ON (rpp.idresumenperproy = ie.idresumenperproy AND ie.isActive = 1)
    INNER JOIN eddProyecto p ON (p.idEDDProyecto = rpp.idProyecto AND p.isActive = 1)
    INNER JOIN ihhacop ac ON (ac.idProyecto = p.idEDDProyecto AND ac.isActive = 1)
    INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.idEmpleado = IN_idEmpleado AND emp.isActive = 1)
    LEFT JOIN ihhelementoimp eimp ON (eimp.idElementoImp = ie.idElemento AND eimp.isActive = 1)
	WHERE rpp.mes = IN_mes AND rpp.isActive = 1
    ORDER BY rpp.mes,
    emp.nomEmpleado;
           
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoImpugnacionEmp` (IN `IN_idEmpleado` INT, IN `IN_idElemento` INT, IN `IN_idPeriodo` INT, IN `IN_idAcop` INT, IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
        DECLARE temp_cantRegistros INT;

        -- Si no se aplica ningún filtro
        IF IN_idEmpleado = 0 AND IN_idElemento = 0 AND IN_idPeriodo = 0 AND IN_idAcop = 0 THEN
            
            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1);
                
            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            temp_cantRegistros,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;

        -- Si se busca por empleado
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento = 0 AND IN_idPeriodo = 0 AND IN_idAcop = 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE ie.idEmpleado = IN_idEmpleado;

            SELECT 
            OUT_CODRESULT, OUT_MJERESULT,
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            temp_cantRegistros,
            UPPER(ei.nomElemento) nomElemento,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE ie.idEmpleado = IN_idEmpleado
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
        -- Si se busca por elemento
        ELSEIF IN_idEmpleado = 0 AND IN_idElemento != 0 AND IN_idPeriodo = 0 AND IN_idAcop = 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE ie.idElemento = IN_idElemento;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH           
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE ie.idElemento = IN_idElemento
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
             
        -- Si se busca por periodo
        ELSEIF IN_idEmpleado = 0 AND IN_idElemento = 0 AND IN_idPeriodo != 0 AND IN_idAcop = 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE ie.idPeriodo = IN_idPeriodo;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE ie.idPeriodo = IN_idPeriodo
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
        -- Si se busca por acop
        ELSEIF IN_idEmpleado = 0 AND IN_idElemento = 0 AND IN_idPeriodo = 0 AND IN_idAcop != 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE ie.idAcop = IN_idAcop;


            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE ie.idAcop = IN_idAcop
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
                
        -- Si se busca por empleado y elemento
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento != 0 AND IN_idPeriodo = 0 AND IN_idAcop = 0 THEN
        
            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
           
        -- Si se busca por empleado y periodo
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento = 0 AND IN_idPeriodo != 0 AND IN_idAcop = 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
             FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idPeriodo = IN_idPeriodo;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idPeriodo = IN_idPeriodo
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
                 
        -- Si se busca por empleado y acop
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento = 0 AND IN_idPeriodo = 0 AND IN_idAcop != 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idAcop = IN_idAcop;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idAcop = IN_idAcop
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
        -- Si se busca por elemento y periodo
        ELSEIF IN_idEmpleado = 0 AND IN_idElemento != 0 AND IN_idPeriodo != 0 AND IN_idAcop = 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
        -- Si se busca por elemento y acop
        ELSEIF IN_idEmpleado = 0 AND IN_idElemento != 0 AND IN_idPeriodo = 0 AND IN_idAcop != 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idElemento = IN_idElemento AND
            ie.idAcop = IN_idAcop;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idElemento = IN_idElemento AND
            ie.idAcop = IN_idAcop
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            

         -- Si se busca por elemento y acop
        
        -- Si se busca por periodo y acop
        ELSEIF IN_idEmpleado = 0 AND IN_idElemento = 0 AND IN_idPeriodo != 0 AND IN_idAcop != 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH  
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            

         -- Si se busca por periodo y acop
        
        -- Si se busca por empleado, elemento y periodo
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento != 0 AND IN_idPeriodo != 0 AND IN_idAcop = 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo ;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo 
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
        -- Si se busca por elemento, periodo y acop
        ELSEIF IN_idEmpleado = 0 AND IN_idElemento != 0 AND IN_idPeriodo != 0 AND IN_idAcop != 0 THEN
   
            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH  
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop  
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
        -- Si se busca por empleado, periodo y acop
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento = 0 AND IN_idPeriodo != 0 AND IN_idAcop != 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop  ;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH  
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop  
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;

        -- Si se busca por empleado, elemento y acop
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento != 0 AND IN_idPeriodo = 0 AND IN_idAcop != 0 THEN

            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento AND
            ie.idAcop = IN_idAcop;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH  
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento AND
            ie.idAcop = IN_idAcop  
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
        -- Si se aplican todos los filtros
        ELSEIF IN_idEmpleado != 0 AND IN_idElemento != 0 AND IN_idPeriodo != 0 AND IN_idAcop != 0 THEN


            SELECT COUNT(ie.idImpugnacionEmp) INTO temp_cantRegistros 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop ;

            SELECT 
            ie.idImpugnacionEmp,
            ie.idEmpleado,
            UPPER(emp.nomEmpleado) nomEmpleado,
            ie.idElemento,
            UPPER(ei.nomElemento) nomElemento,
            temp_cantRegistros,
            ie.cantHorasPeriodo,
            ie.cantHorasExtra,
            ie.idAcop,
            a.idProyecto idProyecto,
            UPPER(proy.nomProyecto) nomProyecto,
            ie.idPeriodo,
            UPPER(p.nomPeriodo) nomPeriodo,
            ie.valorHH 
            FROM ihhimpugnacionemp ie
            INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhelementoimp ei ON (ei.idElementoImp = ie.idElemento AND ei.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhperiodo p ON (p.idPeriodo = ie.idPeriodo AND p.isActive = 1 AND ie.isActive = 1)
            INNER JOIN ihhacop a ON (a.idAcop = ie.idAcop AND a.isActive = 1)
            INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = a.idProyecto AND proy.isActive = 1)
            WHERE 
            ie.idEmpleado = IN_idEmpleado AND
            ie.idElemento = IN_idElemento AND
            ie.idPeriodo = IN_idPeriodo AND
            ie.idAcop = IN_idAcop  
            ORDER BY emp.nomEmpleado, ei.nomElemento
            LIMIT IN_inicio, IN_cantidadPorPagina;

        END IF;         
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoNotaImpugnacion` (IN `IN_idImpugnacionEmp` INT, IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
        DECLARE temp_cantRegistros INT;

    -- Si no se especifica el filtro
    IF IN_idImpugnacionEmp = 0 THEN

            SELECT COUNT(ni.idNotaImpugnacion) INTO temp_cantRegistros 
            FROM ihhnotaimpugnacion ni 
            INNER JOIN ihhimpugnacionemp ie ON (ie.idImpugnacionEmp = ni.idImpugnacionEmp AND ie.isActive = 1 AND ni.isActive = 1);

            SELECT 
            temp_cantRegistros,
            ni.idNotaImpugnacion,
            ni.idImpugnacionEmp, 
            UPPER(ni.nota) nota
            FROM ihhnotaimpugnacion ni 
            INNER JOIN ihhimpugnacionemp ie ON (ie.idImpugnacionEmp = ni.idImpugnacionEmp AND ie.isActive = 1 AND ni.isActive = 1)
            LIMIT IN_inicio, IN_cantidadPorPagina;

       -- Si es especificado
        ELSE

            SELECT COUNT(ni.idNotaImpugnacion) INTO temp_cantRegistros 
            FROM ihhnotaimpugnacion ni 
            INNER JOIN ihhimpugnacionemp ie ON (ie.idImpugnacionEmp = ni.idImpugnacionEmp 
                                                AND ni.idImpugnacionEmp = IN_idImpugnacionEmp 
                                                AND ie.isActive = 1 
                                                AND ni.isActive = 1);

            SELECT
            temp_cantRegistros,
            ni.idNotaImpugnacion, ni.idImpugnacionEmp, UPPER(ni.nota) nota
            FROM ihhnotaimpugnacion ni 
            INNER JOIN ihhimpugnacionemp ie ON (ie.idImpugnacionEmp = ni.idImpugnacionEmp 
                                                AND ni.idImpugnacionEmp = IN_idImpugnacionEmp 
                                                AND ie.isActive = 1 
                                                AND ni.isActive = 1)
            LIMIT IN_inicio, IN_cantidadPorPagina;
        END IF;         
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoPeriodo` (IN `IN_idPeriodo` INT, IN `IN_idTipoPeriodo` INT, IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
        DECLARE temp_cantRegistros INT;

       -- Si no se especifica el filtro
        IF IN_idTipoPeriodo = 0 AND IN_idPeriodo = 0 THEN

            SELECT COUNT(p.idPeriodo) INTO temp_cantRegistros 
            FROM ihhperiodo p
            INNER JOIN ihhtipoperiodo tp ON (tp.idTipoPeriodo = p.idTipoPeriodo AND p.isActive = 1 AND tp.isActive = 1);

           SELECT 
           temp_cantRegistros,
           p.idPeriodo,
           UPPER(p.nomPeriodo) nomPeriodo,
           p.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           UPPER(p.descripcion) descripcion
           FROM ihhperiodo p
           INNER JOIN ihhtipoperiodo tp ON (tp.idTipoPeriodo = p.idTipoPeriodo AND p.isActive = 1 AND tp.isActive = 1)
           ORDER BY tp.nomTipoPeriodo
           LIMIT IN_inicio, IN_cantidadPorPagina;
       -- Si es especificado
        ELSEIF IN_idTipoPeriodo != 0 AND IN_idPeriodo = 0 THEN
            SELECT COUNT(p.idPeriodo) INTO temp_cantRegistros 
            FROM ihhperiodo p
           INNER JOIN ihhtipoperiodo tp ON (tp.idTipoPeriodo = p.idTipoPeriodo AND p.isActive = 1 AND tp.isActive = 1)
           WHERE p.idTipoPeriodo = IN_idTipoPeriodo;

           SELECT 
           temp_cantRegistros,
           p.idPeriodo,
           UPPER(p.nomPeriodo) nomPeriodo,
           p.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           UPPER(p.descripcion) descripcion
           FROM ihhperiodo p
           INNER JOIN ihhtipoperiodo tp ON (tp.idTipoPeriodo = p.idTipoPeriodo AND p.isActive = 1 AND tp.isActive = 1)
           WHERE p.idTipoPeriodo = IN_idTipoPeriodo
           ORDER BY tp.nomTipoPeriodo
           LIMIT IN_inicio, IN_cantidadPorPagina;
        
        ELSEIF IN_idTipoPeriodo = 0 AND IN_idPeriodo != 0 THEN
            SELECT COUNT(p.idPeriodo) INTO temp_cantRegistros 
            FROM ihhperiodo p
           WHERE p.idPeriodo = IN_idPeriodo;

           SELECT 
           temp_cantRegistros,
           p.idPeriodo,
           UPPER(p.nomPeriodo) nomPeriodo,
           p.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           UPPER(p.descripcion) descripcion
           FROM ihhperiodo p
           INNER JOIN ihhtipoperiodo tp ON (tp.idTipoPeriodo = p.idTipoPeriodo AND p.isActive = 1 AND tp.isActive = 1)
           WHERE p.idPeriodo = IN_idPeriodo
           ORDER BY tp.nomTipoPeriodo
           LIMIT IN_inicio, IN_cantidadPorPagina;   
        END IF;         
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoTipoElemento` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idTipoElemento` INT)   BEGIN
		  DECLARE temp_cantRegistros INT;
          
          IF IN_idTipoElemento = 0 THEN
           
           SELECT COUNT(te.idTipoElemento) INTO temp_cantRegistros 
           FROM ihhtipoelemento te
           WHERE te.isActive = 1;

           SELECT
           temp_cantRegistros,
           te.idTipoElemento,
           UPPER(te.nomTipoElemento) nomTipoElemento,
           UPPER(te.descripcion) descripcion
           FROM ihhtipoelemento te
           WHERE te.isActive = 1
           ORDER BY te.nomTipoElemento
           LIMIT IN_inicio, IN_cantidadPorPagina;
           
          ELSE
          
           SELECT COUNT(te.idTipoElemento) INTO temp_cantRegistros 
           FROM ihhtipoelemento te
           WHERE te.idTipoElemento = IN_idTipoElemento;

           SELECT
           temp_cantRegistros,
           te.idTipoElemento,
           UPPER(te.nomTipoElemento) nomTipoElemento,
           UPPER(te.descripcion) descripcion
           FROM ihhtipoelemento te
           WHERE te.idTipoElemento = IN_idTipoElemento
           ORDER BY te.nomTipoElemento
           LIMIT IN_inicio, IN_cantidadPorPagina;
           
           
          END IF;
           
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listadoTipoPeriodo` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idTipoPeriodo` INT)   BEGIN
     DECLARE temp_cantRegistros INT;
     
     IF IN_idTipoPeriodo = 0 THEN
           SELECT COUNT(tp.idTipoPeriodo) INTO temp_cantRegistros 
           FROM ihhtipoperiodo tp
           WHERE tp.isActive = 1;
           SELECT 
           temp_cantRegistros,
           tp.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           tp.dias,
           UPPER(tp.descripcion) descripcion
           FROM ihhtipoperiodo tp
           WHERE tp.isActive = 1
           ORDER BY tp.nomTipoPeriodo
           LIMIT IN_inicio, IN_cantidadPorPagina;
      ELSE
     
     	   SELECT COUNT(tp.idTipoPeriodo) INTO temp_cantRegistros 
           FROM ihhtipoperiodo tp
           WHERE tp.idTipoPeriodo = IN_idTipoPeriodo;
           
           SELECT 
           temp_cantRegistros,
           tp.idTipoPeriodo,
           UPPER(tp.nomTipoPeriodo) nomTipoPeriodo,
           tp.dias,
           UPPER(tp.descripcion) descripcion
           FROM ihhtipoperiodo tp
           WHERE tp.idTipoPeriodo = IN_idTipoPeriodo
           ORDER BY tp.nomTipoPeriodo
           LIMIT IN_inicio, IN_cantidadPorPagina;
      
      
        END IF;
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listado_resumen_colab_mes` (IN `IN_idColaborador` INT, IN `IN_idProyecto` INT, IN `IN_fechaInicio` DATE, IN `IN_fechaFin` DATE, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN

          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_listado_resumen_colab_proy: Error al consultar registros --> IN_idColaborador: [', IN_idColaborador, '] - IN_idProyecto: [', IN_idProyecto, '] - IN_fechaInicio: [', IN_fechaInicio, '] - IN_fechaFin: [', IN_fechaFin, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_listado_resumen_colab_proy', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;
  		
            IF IN_idColaborador < 1 THEN
                SET OUT_MJERESULT = "El id del colaborador debe ser mayor a cero";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                /*
            ELSEIF IN_idProyecto IS NOT NULL AND IN_idProyecto < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El id del proyecto debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                */
            ELSEIF TRIM(IN_fechaInicio) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'La fecha inicio no puede estar vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_fechaFin) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'La fecha fin no puede estar vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   
            ELSE

        IF IN_idProyecto = 0 THEN

        SELECT
        rpp.mes, 
        UPPER(p.nomProyecto) nomProyecto, 
        SUM(ie.cantHorasPeriodo) cantHH, 
        SUM(ie.cantHorasExtra) cantHHEE, 
        count(ie.idimpugnacionemp) cantColab 
        FROM ihhimpugnacionemp ie 
        INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND ie.idEmpleado = IN_idColaborador) 
        INNER JOIN eddproyecto p ON (p.idEDDProyecto = rpp.idProyecto) 
        WHERE STR_TO_DATE(CONCAT(rpp.mes, '01'), '%Y%m%d') BETWEEN IN_fechaInicio AND IN_fechaFin
        GROUP BY rpp.mes 
        ORDER BY rpp.mes, p.nomProyecto;

        ELSE

        SELECT
        rpp.mes, 
        UPPER(p.nomProyecto) nomProyecto, 
        SUM(ie.cantHorasPeriodo) cantHH, 
        SUM(ie.cantHorasExtra) cantHHEE, 
        count(ie.idimpugnacionemp) cantColab 
        FROM ihhimpugnacionemp ie 
        INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND ie.idEmpleado = IN_idColaborador) 
        INNER JOIN eddproyecto p ON (p.idEDDProyecto = rpp.idProyecto AND rpp.idProyecto = IN_idProyecto) 
        WHERE STR_TO_DATE(CONCAT(rpp.mes, '01'), '%Y%m%d') BETWEEN IN_fechaInicio AND IN_fechaFin
        GROUP BY rpp.mes 
        ORDER BY rpp.mes, p.nomProyecto;

        END IF;
                       
     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_listado_resumen_colab_proy` (IN `IN_idColaborador` INT, IN `IN_idProyecto` INT, IN `IN_fechaInicio` DATE, IN `IN_fechaFin` DATE, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN

-- esta SP cambia los valores de presupuesto mensual cuando el usuario los ingresa de forma manual luego de crear el proyecto
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_ihh_listado_resumen_colab_proy: Error al consultar registros --> IN_idColaborador: [', IN_idColaborador, '] - IN_idProyecto: [', IN_idProyecto, '] - IN_fechaInicio: [', IN_fechaInicio, '] - IN_fechaFin: [', IN_fechaFin, ']');


          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_ihh_listado_resumen_colab_proy', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;
  		
            IF IN_idColaborador < 1 THEN
                SET OUT_MJERESULT = "El id del colaborador debe ser mayor a cero";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                /*
            ELSEIF IN_idProyecto IS NOT NULL AND IN_idProyecto < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El id del proyecto debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                */
            ELSEIF TRIM(IN_fechaInicio) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'La fecha inicio no puede estar vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_fechaFin) = '' THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'La fecha fin no puede estar vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   
            ELSE

        IF IN_idProyecto = 0 THEN

        SELECT 
            UPPER(p.nomProyecto) nomProyecto,
            UPPER(p.idEDDProyecto) idProyecto,
            SUM(ie.cantHorasPeriodo) cantHH, 
            SUM(ie.cantHorasExtra) cantHHEE
        FROM ihhimpugnacionemp ie 
        INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND ie.idEmpleado = IN_idColaborador)
        INNER JOIN eddproyecto p ON (p.idEDDProyecto = rpp.idProyecto)
        WHERE STR_TO_DATE(CONCAT(rpp.mes, '01'), '%Y%m%d') BETWEEN IN_fechaInicio AND IN_fechaFin
        GROUP BY rpp.idProyecto;

        ELSE

        SELECT 
            UPPER(p.nomProyecto) nomProyecto,
            UPPER(p.idEDDProyecto) idProyecto,
            SUM(ie.cantHorasPeriodo) cantHH, 
            SUM(ie.cantHorasExtra) cantHHEE
        FROM ihhimpugnacionemp ie 
        INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND ie.idEmpleado = IN_idColaborador)
        INNER JOIN eddproyecto p ON (p.idEDDProyecto = rpp.idProyecto AND rpp.idProyecto = IN_idProyecto)
        WHERE STR_TO_DATE(CONCAT(rpp.mes, '01'), '%Y%m%d') BETWEEN IN_fechaInicio AND IN_fechaFin
        GROUP BY rpp.idProyecto;

        END IF;
                       
     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ihh_validarImpugnacionEmp` (IN `IN_idResumenPerProy` INT, IN `IN_idImpugnacionEmp` INT, IN `IN_idEmpleado` INT, IN `IN_idElemento` INT, IN `IN_idPeriodo` INT, IN `IN_cantHorasPeriodo` INT, IN `IN_cantHorasExtra` INT, IN `IN_factor` FLOAT, IN `IN_idAcop` FLOAT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          
            IF IN_idEmpleado IS NULL 
            OR IN_idElemento IS NULL 
            OR IN_idPeriodo IS NULL 
            OR IN_cantHorasPeriodo IS NULL 
            OR IN_factor IS NULL 
            OR IN_idAcop IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion IS NULL 
           

            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idEmpleado < 1 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El id del empleado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idElemento < 1 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El id del elemento debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF IN_idPeriodo < 1 THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El id del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_cantHorasPeriodo < 0 THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'La cantidad de horas del periodo debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
  
            ELSEIF IN_factor < 1 THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El factor del empleado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  

            ELSEIF IN_idAcop < 1 THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'EL id del acop debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  

            ELSEIF IN_isActive NOT IN (1,0) THEN
                SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'El estado del registro debe ser 1 (activo) o 0 (inactivo)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'El usuario administrador no puede estar vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE

            IF FN_validarImpugnacionEmp(IN_idImpugnacionEmp) = TRUE THEN

                CALL SP_ihh_editarImpugnacionEmp(
                    IN_idImpugnacionEmp, 
                    IN_idEmpleado, 
                    IN_idElemento, 
                    IN_idPeriodo, 
                    IN_cantHorasPeriodo, 
                    IN_cantHorasExtra, 
                    IN_factor, 
                    IN_idAcop, 
                    IN_isActive, 
                    IN_usuarioCreacion, @p0, @p1 );

            ELSE 

                CALL SP_ihh_insertarImpugnacionEmp(
                    IN_idEmpleado, 
                    IN_idElemento, 
                    IN_idPeriodo, 
                    IN_cantHorasPeriodo,
                    IN_cantHorasExtra,
                    IN_factor, 
                    IN_idAcop, 
                    IN_idResumenPerProy,
                    IN_isActive, 
                    IN_usuarioCreacion, 
                    @p0, @p1 );

            END IF;   
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarAlumno` (IN `IN_nomAlumno` VARCHAR(50), IN `IN_correoAlumno` VARCHAR(100), IN `IN_telefonoAlumno` VARCHAR(15), IN `IN_idPais` INT, IN `IN_idServicio` INT, IN `IN_idArea` INT, IN `IN_idCargo` INT, IN `IN_usuario` VARCHAR(15), IN `IN_password` VARCHAR(50), IN `IN_tipoUsuario` VARCHAR(15), IN `IN_usuarioAdmin` VARCHAR(15), IN `IN_rolUsuario` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarAlumno: Error al insertar registro --> IN_nomAlumno: [', IN_nomAlumno, '] - IN_correoAlumno: [', IN_correoAlumno, '] - IN_telefonoAlumno: [', IN_telefonoAlumno, '] - IN_idPais: [', IN_idPais, '] - IN_idServicio: [', IN_idServicio, '] - IN_idArea: [', IN_idArea, '] - IN_idCargo: [', IN_idCargo, '] - IN_usuario: [', IN_usuario, '] - IN_password: [', IN_password, '] - IN_tipoUsuario: [', IN_tipoUsuario, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, '] - IN_rolUsuario: [', IN_rolUsuario, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarAlumno', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  END;

            IF IN_nomAlumno IS NULL 
            OR IN_correoAlumno IS NULL
            OR IN_idPais is NULL
            OR IN_idServicio is NULL
            OR IN_idCargo is NULL
            OR IN_idArea = NULL
            OR IN_usuario is NULL
            OR IN_password is NULL
            OR IN_tipoUsuario is NULL
            OR IN_rolUsuario is NULL
            OR IN_usuarioAdmin is NULL
            
            OR IN_nomAlumno = "%null%"
            OR IN_correoAlumno = "%null%"
            OR IN_idPais = "%null%"
            OR IN_idServicio = "%null%"
            OR IN_idCargo = "%null%"
            OR IN_idArea = "%null%"
            OR IN_usuario = "%null%"
            OR IN_password = "%null%"
            OR IN_tipoUsuario = "%null%"
            OR IN_rolUsuario = "%null%"
            OR IN_usuarioAdmin = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

            
			 ELSEIF TRIM(IN_nomAlumno) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Nombre del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_correoAlumno) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Correo del alumno viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idPais) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'País del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idServicio) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Servicio del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idCargo) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'Cargo del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_idArea) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'Área del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_usuario) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'Usuario del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_password) = '' THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'Contraseña del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_tipoUsuario) = '' OR UPPER(IN_tipoUsuario) NOT IN ('EMPLEADO', 'ALUMNO', 'PEOPLE', 'RELATOR') THEN
   				SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'Tipo de usuario inválido --> [EMPLEADO /  ALUMNO / PEOPLE / RELATOR]';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_rolUsuario) = '' THEN
   				SET OUT_CODRESULT = '11';
				SET OUT_MJERESULT = 'Rol de usuario del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '12';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF FN_EXISTE_CORREOLOGIN(IN_correoAlumno) = True THEN
    			SET OUT_CODRESULT = '13';
				SET OUT_MJERESULT = 'El correo ingresado ya está registrado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF FN_EXISTE_USUARIOLOGIN(IN_usuario) = True THEN
    			SET OUT_CODRESULT = '14';
				SET OUT_MJERESULT = 'El usuario del alumno ingresado ya está registrado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO loginusuario (usuario, password, tipoUsuario, isActive, idRolUsuario, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) VALUES (IN_usuario, SHA1(IN_password), IN_tipoUsuario, true, IN_rolUsuario, CURRENT_TIMESTAMP, IN_usuarioAdmin, CURRENT_TIMESTAMP, IN_usuarioAdmin);
             
             SET @lastInsertIDLogin = (SELECT idLoginUsuario FROM loginusuario WHERE idLoginUsuario = (LAST_INSERT_ID()));
                
             INSERT INTO alumno (nomAlumno, correoAlumno, telefonoAlumno,  isActive, idPais, idServicio, idArea, idCargo, idLoginUsuario, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) VALUES (IN_nomAlumno, IN_correoAlumno, IN_telefonoAlumno, true, IN_idPais, IN_idServicio, IN_idArea, IN_idCargo, @lastInsertIDLogin, CURRENT_TIMESTAMP, IN_usuarioAdmin, CURRENT_TIMESTAMP, IN_usuarioAdmin);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
        SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT',alum.idAlumno, UPPER(alum.nomAlumno), UPPER(alum.correoAlumno), UPPER(alum.telefonoAlumno), UPPER(serv.nomServicio), UPPER(ar.nomArea), UPPER(pa.nomPais), UPPER(car.nomCargo)
        FROM alumno alum 
        INNER JOIN area ar ON (alum.idArea = ar.idArea)
        INNER JOIN pais pa ON (alum.idPais = pa.idPais)
        INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
        INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
        WHERE alum.idAlumno = LAST_INSERT_ID();
     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarCliente` (IN `IN_nomCliente` VARCHAR(100), IN `IN_direccionCliente` VARCHAR(100), IN `IN_idPais` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarCliente: Error al insertar registro --> IN_nomCliente: [', IN_nomCliente, '] - IN_direccionCliente: [', IN_direccionCliente, '] - IN_idPais: [', IN_idPais, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarCliente', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_nomCliente IS NULL 
            OR IN_direccionCliente IS NULL
            OR IN_idPais is NULL
            OR IN_usuarioAdmin is NULL
            
            OR IN_nomCliente = "%null%"
            OR IN_direccionCliente = "%null%"
            OR IN_idPais = "%null%"
            OR IN_usuarioAdmin = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
            
			 ELSEIF TRIM(IN_nomCliente) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Nombre del cliente viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_direccionCliente) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Dirección del cliente viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idPais) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'País del cliente viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

ELSEIF FN_EXISTE_NOMCLIENTE(IN_nomCliente) = true THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El cliente ya se encuentra registrado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO cliente (nomCliente, direccionCliente, idPais, isActive, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) VALUES (IN_nomCliente, IN_direccionCliente, IN_idPais, true, CURRENT_TIMESTAMP, IN_usuarioAdmin, CURRENT_TIMESTAMP, IN_usuarioAdmin);
             
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', cli.idCliente, UPPER(cli.nomCliente), UPPER(cli.direccionCliente), UPPER(cli.isActive), UPPER(pa.nomPais)
                FROM cliente cli
                INNER JOIN pais pa ON (cli.idPais = pa.idPais)
                WHERE cli.idCliente = LAST_INSERT_ID();
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarContacto` (IN `IN_nomContacto` VARCHAR(50), IN `IN_correoContacto` VARCHAR(100), IN `IN_telefonoContacto` VARCHAR(15), IN `IN_fechaIni` DATETIME, IN `IN_isActive` BOOLEAN, IN `IN_idServicio` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
      	SET str_mjeInterno = CONCAT('SP_insertarContacto: Error al insertar registro --> IN_nomContacto: [', IN_nomContacto, '] - IN_correoContacto: [', IN_correoContacto, '] - IN_telefonoContacto: [', IN_telefonoContacto, '] - IN_fechaIni: [', IN_fechaIni, '] - IN_isActive: [', IN_isActive, '] - IN_idServicio: [', IN_idServicio, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');
 
      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarContacto', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  END;
 
            IF IN_nomContacto IS NULL 
            OR IN_correoContacto IS NULL
            OR IN_telefonoContacto is NULL
            OR IN_fechaIni is NULL
            OR IN_isActive is NULL
            OR IN_idServicio is NULL
            OR IN_usuarioAdmin is NULL
            OR IN_nomContacto = "%null%"
            OR IN_correoContacto = "%null%"
            OR IN_telefonoContacto = "%null%" 
            OR IN_fechaIni = "%null%" 
            OR IN_isActive = "%null%" 
            OR IN_idServicio = "%null%" 
            OR IN_usuarioAdmin = "%null%" 
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
 
            
			 ELSEIF TRIM(IN_nomContacto) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Nombre del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_correoContacto) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Correo del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_telefonoContacto) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Telefono del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_fechaIni) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Fecha de inicio de actividades viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_isActive) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
 
             ELSEIF TRIM(IN_idServicio) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'IDServicio del contacto viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF FN_EXISTE_CORREOCONTACTO(IN_correoContacto, IN_idServicio) = True THEN
    			SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El correo del contacto ya se encuentra registrado para este servicio.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
             INSERT INTO contacto (nomContacto, correoContacto, telefonoContacto, fechaIni, isActive, idServicio, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) VALUES (IN_nomContacto, IN_correoContacto, IN_telefonoContacto, IN_fechaIni, true, IN_idServicio, CURRENT_TIMESTAMP, IN_usuarioAdmin, CURRENT_TIMESTAMP, IN_usuarioAdmin);
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                SELECT con.idContacto, UPPER(con.nomContacto), UPPER(con.correoContacto),con.telefonoContacto, con.fechaIni, con.fechaFin, UPPER(serv.nomServicio) , OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT' from contacto con INNER JOIN servicio serv WHERE con.idServicio = serv.idServicio AND con.idContacto = last_insert_id();
     END IF;
 
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarCurso` (IN `IN_CODCURSO` VARCHAR(20), IN `IN_NOMCURSO` VARCHAR(50), IN `IN_TIPOHH` VARCHAR(12), IN `IN_DURACIONCURSOHH` DOUBLE, IN `IN_CANTSESIONESCURSO` INT, IN `IN_ISACTIVE` TINYINT, IN `IN_USUARIOCREACION` VARCHAR(15), OUT `OUT_IDCURSO` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE str_mjeInterno VARCHAR(500);
  -- Declare exception handler for failed insert
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      ROLLBACK;
        
      SET str_mjeInterno = CONCAT('SP_insertarCurso: Error al insertar registro --> IN_CODCURSO: [', IN_CODCURSO, '] - IN_NOMCURSO: [', IN_NOMCURSO, '] - IN_TIPOHH: [', IN_TIPOHH, '] - IN_CANTSESIONESCURSO: [', IN_CANTSESIONESCURSO, '] - IN_ISACTIVE: [', IN_ISACTIVE, '] - IN_USUARIOCREACION: [', IN_USUARIOCREACION, ']');

      INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      VALUES(null, 'SP_insertarCurso', str_codMySQL, str_msgMySQL, now(), '11', str_mjeInterno);
      COMMIT;
        
      SET OUT_CODRESULT = '11';
      SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
    END;
  IF IN_CODCURSO IS NULL OR IN_NOMCURSO IS NULL OR IN_TIPOHH IS NULL OR IN_DURACIONCURSOHH IS NULL OR IN_CANTSESIONESCURSO IS NULL OR IN_ISACTIVE IS NULL OR IN_USUARIOCREACION IS NULL THEN
    SET OUT_CODRESULT = '01';
		SET OUT_MJERESULT = 'Uno o más parámetros viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF TRIM(IN_CODCURSO) = '' THEN
    SET OUT_CODRESULT = '02';
		SET OUT_MJERESULT = 'Código de curso viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
  ELSEIF TRIM(IN_NOMCURSO) = '' THEN
    SET OUT_CODRESULT = '03';
		SET OUT_MJERESULT = 'Nombre de curso viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
         
  ELSEIF UPPER(IN_TIPOHH) NOT IN('ACADEMICAS', 'CRONOLOGICAS', 'MIXTO') THEN
    SET OUT_CODRESULT = '04';
		SET OUT_MJERESULT = 'El tipo de horas del curso es incorrecto --> ACADEMICAS/CRONOLOGICAS/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  ELSEIF IN_DURACIONCURSOHH <= 0 THEN
    SET OUT_CODRESULT = '05';
		SET OUT_MJERESULT = 'La duración del curso en horas debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF IN_CANTSESIONESCURSO <= 0 THEN
    SET OUT_CODRESULT = '06';
		SET OUT_MJERESULT = 'La cantidad de sesiones del curso debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF IN_ISACTIVE NOT IN(0, 1) THEN
    SET OUT_CODRESULT = '07';
		SET OUT_MJERESULT = 'El estado del curso debe ser Verdadero (1) o Falso (0)';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF TRIM(IN_USUARIOCREACION) = '' THEN
    SET OUT_CODRESULT = '08';
		SET OUT_MJERESULT = 'Usuario viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  ELSEIF FN_EXISTE_CODCURSO(IN_CODCURSO) = True THEN
    SET OUT_CODRESULT = '09';
		SET OUT_MJERESULT = 'El código del curso ya está registrado';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSEIF FN_EXISTE_NOMCURSO(IN_NOMCURSO) = True THEN
    SET OUT_CODRESULT = '10';
		SET OUT_MJERESULT = 'El nombre del curso ya está registrado';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
         
  ELSE
    SET AUTOCOMMIT = 0;
    START TRANSACTION;
      INSERT INTO CURSO
        (idCurso,
         codCurso,
         nomCurso,
         tipoHH,
         duracionCursoHH,
         cantSesionesCurso,
         isActive,
         fechaCreacion,
         usuarioCreacion,
         fechaModificacion,
         usuarioModificacion)
        VALUES
        (null,
         IN_CODCURSO,
         IN_NOMCURSO,
         IN_TIPOHH,
         IN_DURACIONCURSOHH,
         IN_CANTSESIONESCURSO,
         IN_ISACTIVE,
         now(),
         IN_USUARIOCREACION,
         now(),
         IN_USUARIOCREACION);
      COMMIT;

      SET OUT_IDCURSO = last_insert_id();
      SET OUT_CODRESULT = '00';
      SET OUT_MJERESULT = 'Success';
      
  END IF;   
  
  
  	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', cur.idCurso, UPPER(cur.codCurso),
  UPPER(cur.nomCurso), UPPER(cur.tipoHH), cur.duracionCursoHH, cur.cantSesionesCurso 
	FROM curso cur 
	WHERE cur.idCurso = last_insert_id();

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarCursoAlumno` (IN `IN_fechaIni` DATE, IN `IN_horaIni` TIME, IN `IN_fechaFin` DATE, IN `IN_horaFin` TIME, IN `IN_porcAsistencia` INT, IN `IN_porcParticipacion` INT, IN `IN_claseAprobada` CHAR(1), IN `IN_porcAprobacion` INT, IN `IN_estadoCurso` VARCHAR(15), IN `IN_isActive` TINYINT, IN `IN_idEmpleado` INT, IN `IN_idCurso` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarCursoAlumno: Error al insertar registro --> IN_fechaIni: [', IN_fechaIni, '] - IN_horaIni: [', IN_horaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_horaFin: [', IN_horaFin, '] - IN_porcAsistencia: [', IN_porcAsistencia, '] - IN_porcParticipacion: [', IN_porcParticipacion, '] - IN_claseAprobada: [', IN_claseAprobada, '] - IN_porcAprobacion: [', IN_porcAprobacion, '] - IN_estadoCurso: [', IN_estadoCurso, '] - IN_isActive: [', IN_isActive, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_idCurso: [', IN_idCurso, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarCursoAlumno', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_fechaIni IS NULL 
            OR IN_horaIni IS NULL
            OR IN_fechaFin is NULL
            OR IN_horaFin is NULL
            OR IN_porcAsistencia is NULL
            OR IN_porcParticipacion = NULL
            OR IN_claseAprobada is NULL
            OR IN_porcAprobacion is NULL
            OR IN_estadoCurso is NULL
            OR IN_isActive is NULL
            OR IN_idCurso is NULL
            OR IN_idEmpleado is NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_fechaIni = "%null%"
            OR IN_horaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_horaFin = "%null%"
            OR IN_claseAprobada = "%null%"
            OR IN_estadoCurso = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idCurso = "%null%" 
            OR IN_idEmpleado = "%null%" 
            OR IN_usuarioCreacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
				
              ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
			 ELSEIF IN_porcParticipacion < 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El porcentaje de participación debe ser igual o mayor a 0 (cero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcParticipacion > 100 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El porcentaje de participación debe ser igual o menor a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAsistencia < 0 THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El porcentaje de asistencia debe ser igual o mayor a 0 (cero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAsistencia > 100 THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El porcentaje de asistencia debe ser igual o menor a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
  
             ELSEIF TRIM(IN_claseAprobada) = '' THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'Clase aprobada viene vacío (S o N)';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAprobacion < 0 THEN
   				SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'El porcentaje de aprobación debe ser igual o mayor a 0 (cero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_porcAprobacion > 100 THEN
   				SET OUT_CODRESULT = '11';
				SET OUT_MJERESULT = 'El porcentaje de aprobación debe ser igual o menor a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_estadoCurso) = '' THEN
   				SET OUT_CODRESULT = '12';
				SET OUT_MJERESULT = 'País del alumno viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
               ELSEIF IN_isActive NOT IN(0, 1) THEN
        		SET OUT_CODRESULT = '13';
				SET OUT_MJERESULT = 'El estado del curso debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
        
             ELSEIF IN_idCurso <= 0 THEN
   				SET OUT_CODRESULT = '14';
				SET OUT_MJERESULT = 'El id del curso tiene que ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEmpleado <= 0 THEN
   				SET OUT_CODRESULT = '15';
				SET OUT_MJERESULT = 'El id del Alumno tiene que ser mayor a cero';     
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '16';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
                INSERT INTO cursoalumno 
                (fechaIni, 
                 horaIni, 
                 fechaFin, 
                 horaFin, 
                 porcAsistencia,
                 porcParticipacion,
                 claseAprobada,
                 porcAprobacion,
                 estadoCurso,
                 isActive,
                 idEmpleado,
                 idCurso,
                 fechaCreacion,
                 usuarioCreacion,
                 fechaModificacion,
                 usuarioModificacion) 
                VALUES (
                    IN_fechaIni, 
                    IN_horaIni, 
                    IN_fechaFin, 
                    IN_horaFin, 
                    IN_porcAsistencia, 
                    IN_porcParticipacion, 
                    IN_claseAprobada, 
                    IN_porcAprobacion,
                    IN_estadoCurso,
                    IN_isActive, 
                    IN_idEmpleado, 
                    IN_idCurso, 
                    CURRENT_TIMESTAMP,
                    IN_usuarioCreacion, 
                    CURRENT_TIMESTAMP, 
                    IN_usuarioCreacion);

             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT, OUT_CODRESULT, curAl.idCursoAlumno, curAl.fechaIni, curAl.horaIni, curAl.fechaFin, curAl.horaFin, curAl.porcAsistencia, curAl.porcParticipacion, IF(curAl.claseAprobada = "S", "SÍ", "NO") as claseAprobada, curAl.porcAprobacion, IF(curAl.estadoCurso = 1, "ACTIVADO", "DESACTIVADO") as estadoCurso, UPPER(emp.nomEmpleado), UPPER(cur.nomCurso)
                FROM cursoalumno curAl
                INNER JOIN empleado emp ON (curAl.idEmpleado = emp.nomEmpleado)
                INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
                WHERE curAl.isActive = true AND curAl.idCursoAlumno = LAST_INSERT_ID();

     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarCursoAlumnoSesion` (IN `IN_fechaIni` DATE, IN `IN_fechaFin` DATE, IN `IN_asistencia` INT, IN `IN_participacion` INT, IN `IN_isActive` TINYINT, IN `IN_idSesion` INT, IN `IN_idCursoAlumno` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500), IN `IN_horaIni` TIME, IN `IN_horaFin` TIME)   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarCursoAlumnoSesion: Error al insertar registro --> IN_fechaIni: [', IN_fechaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_horaIni: [', IN_horaIni, '] - IN_horaFin: [', IN_horaFin, '] - IN_asistencia: [', IN_asistencia, '] - IN_participacion: [', IN_participacion, '] - IN_isActive: [', IN_isActive, '] - IN_idSesion: [', IN_idSesion, '] - IN_idCursoAlumno: [', IN_idCursoAlumno, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarCursoAlumnoSesion', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_fechaIni IS NULL 
            OR IN_fechaFin IS NULL
            OR IN_horaIni IS NULL
            OR IN_horaFin IS NULL
            OR IN_asistencia is NULL
            OR IN_participacion is NULL
            OR IN_isActive is NULL
            OR IN_idSesion = NULL
            OR IN_idCursoAlumno is NULL
            OR IN_usuarioCreacion is NULL
            
            
            OR IN_fechaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_horaIni = "%null%"
            OR IN_horaFin = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idSesion = "%null%"
            OR IN_idCursoAlumno = "%null%"
            OR IN_usuarioCreacion = "%null%"

            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
				
              ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
			 ELSEIF IN_asistencia < 0 OR IN_asistencia > 100 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'La asistencia debe ser igual o mayor a 0 (cero) y menor o igual a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_participacion < 0 OR IN_participacion > 100 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'La participación debe ser igual o mayor a 0 (cero) y menor o igual a 100 (cien)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
               ELSEIF IN_isActive NOT IN(0, 1) THEN
        		SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El estado del curso debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
        
             ELSEIF IN_idSesion <= 0 THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El id de la sesión tiene que ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoAlumno <= 0 THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El id del cursoAlumno tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                    
             ELSEIF TRIM(IN_horaFin) = '' THEN
   				SET OUT_CODRESULT = '11';
				SET OUT_MJERESULT = 'La hora fin viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                    
             ELSEIF TRIM(IN_horaIni) = '' THEN
   				SET OUT_CODRESULT = '12';
				SET OUT_MJERESULT = 'La hora inicio viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
                	INSERT INTO cursoalumno_sesion (fechaIni, fechaFin, horaIni, horaFin, asistencia, participacion, isActive, idSesion, idCursoAlumno, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) 
                    VALUES (IN_fechaIni, IN_fechaFin, IN_horaIni, IN_horaFin, IN_asistencia, IN_participacion, IN_isActive, IN_idSesion, IN_idCursoAlumno, CURRENT_TIMESTAMP, IN_usuarioCreacion, CURRENT_TIMESTAMP, usuarioModificacion);
                

             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', curAlSe.idCursoAlumnoSesion, 
                DATE_FORMAT(curAlSe.fechaIni, "%d-%m-%Y") as fechaIni, 
                DATE_FORMAT(curAlSe.fechaFin, "%d-%m-%Y") as fechaFin,
                curAlSe.horaIni, curAlSe.horaFin,
                curAlSe.asistencia, curAlSe.participacion, UPPER(se.nomSesion), curAl.idCursoAlumno
                FROM cursoalumno_sesion curAlSe
                INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
                INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAL.idCursoAlumno)
                WHERE curAlSe.idCursoAlumnoSesion = LAST_INSERT_ID();
                

     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddEvalCompetencia` (IN `IN_nomCompetencia` VARCHAR(50), IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarEddEvalCompetencia: Error al insertar registro --> IN_nomCompetencia: [', IN_nomCompetencia, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioAdmin, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarEddEvalCompetencia', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_nomCompetencia IS NULL 
            OR IN_isActive IS NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_nomCompetencia = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioCreacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
            
			 ELSEIF TRIM(IN_nomCompetencia) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Nombre de la competencia viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_isActive NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO eddevalcompetencia (nomCompetencia, isActive, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion)
             VALUES
             (IN_nomCompetencia, IN_isActive, now(), IN_usuarioCreacion, now(), IN_usuarioCreacion);
             
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_CODRESULT, OUT_MJERESULT, 
                evalComp.idEDDEvalCompetencia, 
                UPPER(evalComp.nomCompetencia) as nomCompetencia
                FROM eddevalcompetencia evalComp
                WHERE evalComp.idEDDEvalCompetencia = LAST_INSERT_ID();
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddEvalPregunta` (IN `IN_nomPregunta` VARCHAR(300), IN `IN_ordenPregunta` INT, IN `IN_isActive` TINYINT, IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDEvalCompetencia` INT, IN `IN_tipoResp` CHAR(2), IN `IN_preguntaObligatoria` TINYINT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

 

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

 

          SET str_mjeInterno = CONCAT('SP_insertarEddEvalPregunta: Error al insertar registro --> IN_nomPregunta: [', IN_nomPregunta, '] - IN_ordenPregunta: [', IN_ordenPregunta, '] - IN_isActive: [', IN_isActive, '] - IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - IN_idEDDEvalCompetencia: [', IN_idEDDEvalCompetencia, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

 

 

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_insertarEddEvalPregunta', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

 

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

 

  END;

 

 

            IF IN_nomPregunta IS NULL 
            OR IN_ordenPregunta IS NULL 
            OR IN_isActive IS NULL
            OR IN_idEDDEvaluacion IS NULL
            -- OR IN_idEDDEvalCompetencia IS NULL
            OR IN_usuarioCreacion is NULL

 

            OR IN_nomPregunta = "%null%"
            OR IN_ordenPregunta = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idEDDEvaluacion = "%null%"
           -- OR IN_idEDDEvalCompetencia = "%null%"
            OR IN_usuarioCreacion = "%null%"

 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT 
             IN_nomPregunta, IN_ordenPregunta, IN_isActive, IN_idEDDEvaluacion, IN_idEDDEvalCompetencia, IN_usuarioCreacion, IN_tipoResp,
             OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF TRIM(IN_nomPregunta) = '' THEN
                   SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El Nombre Respuesta Pregunta viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF IN_isActive NOT IN (0, 1) THEN
                   SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

 

             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                   SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF IN_idEDDEvaluacion <= 0 THEN
                   SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El idEDDEvaluacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

 

             ELSEIF TRIM(UPPER(IN_tipoResp)) = 'A' AND IN_idEDDEvalCompetencia <= 0 THEN

                   SET OUT_CODRESULT = '06';
                   SET OUT_MJERESULT = 'El idEDDEvalCompetencia debe ser mayor a cero';
                   SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSE

 

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

 

                 INSERT INTO eddevalpregunta 
                 (nomPregunta, 
                  ordenPregunta, 
                  isActive, 
                  idEDDEvaluacion, 
                  idEDDEvalCompetencia,
                  tipoResp,
                  preguntaObligatoria,
                  fechaCreacion,
                  usuarioCreacion,
                  fechaModificacion, 
                  usuarioModificacion)
                 VALUES 
                 (IN_nomPregunta, 
                  IN_ordenPregunta,
                  IN_isActive,
                  IN_idEDDEvaluacion,
                  IN_idEDDEvalCompetencia,
                  IN_tipoResp,
                  IN_preguntaObligatoria,
                  now(), 
                  IN_usuarioCreacion, 
                  now(),
                  IN_usuarioCreacion);

 

 

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

 

                 SELECT
                OUT_CODRESULT,
                OUT_MJERESULT, 
                preg.idEDDEvalPregunta,
                UPPER(preg.nomPregunta) as nomPregunta,
                preg.ordenPregunta,
                preg.idEDDEvaluacion, 
                preg.idEDDEvalCompetencia,
                preg.tipoResp,
                IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
                UPPER(eval.nomEvaluacion) as nomEvaluacion, 
                UPPER(comp.nomCompetencia) as nomCompetencia
                FROM eddevalpregunta preg
                INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
                INNER JOIN eddevalcompetencia comp ON (preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia)
                WHERE preg.idEDDEvalPregunta = LAST_INSERT_ID();
     END IF;

 

 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddEvalProyEmp` (IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDProyEmpEvaluador` INT, IN `IN_idEDDProyEmpEvaluado` INT, IN `IN_cicloEvaluacion` INT, IN `IN_evalRespondida` TINYINT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_insertarEddEvalProyEmp: Error al insertar registro --> IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - IN_idEDDProyEmpEvaluador: [', IN_idEDDProyEmpEvaluador, '] - IN_idEDDProyEmpEvaluado: [', IN_idEDDProyEmpEvaluado, '] - IN_evalRespondida: [', IN_evalRespondida, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_insertarEddEvalProyEmp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
          SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
          SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

          IF IN_idEDDEvaluacion IS NULL 
            OR IN_idEDDProyEmpEvaluador IS NULL 
            OR IN_idEDDProyEmpEvaluado IS NULL 
            OR IN_isActive IS NULL 
            OR IN_usuarioCreacion is NULL

            OR IN_idEDDEvaluacion = "%null%"
            OR IN_idEDDProyEmpEvaluador = "%null%"
            OR IN_idEDDProyEmpEvaluado = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioCreacion = "%null%"

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01'; 
             SELECT OUT_MJERESULT, OUT_CODRESULT;

          ELSEIF IN_idEDDEvaluacion <= 0 THEN
                SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El idEDDEvaluacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
          ELSEIF IN_idEDDProyEmpEvaluador <= 0 THEN
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El IN_idEDDProyEmpEvaluador debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
          ELSEIF IN_idEDDProyEmpEvaluado <= 0 THEN
                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'El IN_idEDDProyEmpEvaluado debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
          ELSEIF IN_evalRespondida NOT IN (0, 1) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'La evalRespondida debe ser verdadero o falso';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
          ELSEIF IN_isActive NOT IN (0, 1) THEN
                SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;             
          ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
                SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
          ELSEIF FN_EXISTE_EDDEvalProyEmp(IN_idEDDEvaluacion, IN_idEDDProyEmpEvaluador, IN_idEDDProyEmpEvaluado, IN_cicloEvaluacion) = true THEN
                SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'Ya existen registros con esos valores.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   
          ELSEIF IN_idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluado THEN
                SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'El Evaluador no debe ser igual al evaluado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   

            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            INSERT INTO eddevalproyemp (
                idEDDEvaluacion, 
                idEDDProyEmpEvaluador, 
                idEDDProyEmpEvaluado, 
                cicloEvaluacion, 
                evalRespondida, 
                isActive, 
                fechaCreacion,
                usuarioCreacion,
                fechaModificacion,
                usuarioModificacion)
            VALUES (
                IN_idEDDEvaluacion, 
                IN_idEDDProyEmpEvaluador, 
                IN_idEDDProyEmpEvaluado, 
                IN_cicloEvaluacion, 
                IN_evalRespondida, 
                IN_isActive, 
                now(), 
                IN_usuarioCreacion,
                now(),
                IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

		/*
               SELECT OUT_CODRESULT, OUT_MJERESULT,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida, 
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%m:%i") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%m:%i") as fechaFin, 
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               evalProyEmp.cicloEvaluacion
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.idEDDEvalProyEmp = LAST_INSERT_ID();
           */    

     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddEvalProyResp` (IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDProyEmp` INT, IN `IN_fechaIniEvaluacion` DATETIME, IN `IN_fechaFinEvaluacion` DATETIME, IN `IN_respuesta` VARCHAR(500), IN `IN_isActive` TINYINT, IN `IN_idEDDEvalProyEmp` INT, IN `IN_idEDDEvalPregunta` INT, IN `IN_idEDDEvalRespPreg` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_insertarEddEvalProyResp: Error al insertar registro --> 
        IN_idEDDEvaluacion: [', IN_idEDDEvaluacion, '] - 
        IN_idEDDProyEmp: [', IN_idEDDProyEmp, '] - 
        IN_respuesta: [', IN_respuesta, '] - 
        IN_isActive: [', IN_isActive, '] - 
        IN_idEDDEvalProyEmp: [', IN_idEDDEvalProyEmp, '] - 
        IN_idEDDEvalPregunta: [', IN_idEDDEvalPregunta, '] - 
        IN_idEDDEvalRespPreg: [', IN_idEDDEvalRespPreg, '] - 
        IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

 

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_insertarEddEvalProyResp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

            IF IN_idEDDEvaluacion IS NULL 
            OR IN_idEDDProyEmp IS NULL 
            OR IN_respuesta IS NULL 
            OR IN_isActive IS NULL 
            OR IN_idEDDEvalProyEmp IS NULL 
            OR IN_idEDDEvalPregunta IS NULL 
            OR IN_idEDDEvalRespPreg IS NULL
            OR IN_usuarioCreacion is NULL

            OR IN_idEDDEvaluacion = "%null%"
            OR IN_idEDDProyEmp = "%null%"
            OR IN_respuesta = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idEDDEvalProyEmp = "%null%"
            OR IN_idEDDEvalPregunta = "%null%"
            OR IN_idEDDEvalRespPreg = "%null%"
            OR IN_usuarioCreacion = "%null%" 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDEvaluacion <= 0 THEN
                   SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'El idEDDEvaluacion debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idEDDProyEmp <= 0 THEN
                   SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'El idEDDProyEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_respuesta) = '' THEN
                   SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'La respuesta a la pregunta viene vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;  
                
             ELSEIF IN_isActive NOT IN (0, 1) THEN
                   SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_idEDDEvalProyEmp <= 0 THEN
             
                   SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'El idEDDEvalProyEmp debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_idEDDEvalPregunta <= 0 THEN
             
                   SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'El idEDDEvalPregunta debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_idEDDEvalRespPreg <= 0 THEN
             
                   SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'El idEDDEvalRespPreg debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
             
                   SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

            INSERT INTO eddevalproyresp (
                idEDDEvaluacion, 
                idEDDProyEmp, 
                respuesta, 
                isActive, 
                idEDDEvalProyEmp, 
                idEDDEvalPregunta, 
                idEDDEvalRespPreg, 
                fechaCreacion, 
                usuarioCreacion, 
                fechaModificacion, 
                usuarioModificacion) 
            VALUES (
                IN_idEDDEvaluacion, 
                IN_idEDDProyEmp, 
                IN_respuesta, 
                IN_isActive, 
                IN_idEDDEvalProyEmp, 
                IN_idEDDEvalPregunta, 
                IN_idEDDEvalRespPreg, 
                now(), 
                IN_usuarioCreacion, 
                now(), 
                IN_usuarioCreacion);

                CALL SP_CambiarEvalRespondida(IN_idEDDEvalProyEmp, IN_fechaIniEvaluacion, IN_fechaFinEvaluacion, @p0);

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

               SELECT OUT_CODRESULT, OUT_MJERESULT, proyResp.idEDDEvalProyResp, proyResp.idEDDEvaluacion, proyResp.idEDDProyEmp, UPPER(proyResp.respuesta) as respuesta, proyResp.idEDDEvalProyEmp, proyResp.idEDDEvalPregunta, proyResp.idEDDEvalRespPreg,
               UPPER(eval.nomEvaluacion) as nomEvaluacion, UPPER(evalPregunta.nomPregunta) as nomPregunta, UPPER(evalRespPreg.nomRespPreg) as nomRespPreg
               FROM eddevalproyresp proyResp
               INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
               INNER JOIN eddevalproyemp evalProyEmp ON (proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp)
               INNER JOIN eddevalpregunta evalPregunta ON (proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta)
               INNER JOIN eddevalresppreg evalRespPreg ON (proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg)
               WHERE proyResp.idEDDEvalProyResp = LAST_INSERT_ID();
     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddEvalRespPreg` (IN `IN_nomRespPreg` VARCHAR(50), IN `IN_ordenRespPreg` INT, IN `IN_isActive` TINYINT, IN `IN_idEDDEvalPregunta` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarEddEvalRespPreg: Error al insertar registro --> IN_nomRespPreg: [', IN_nomRespPreg, '] - IN_ordenRespPreg: [', IN_ordenRespPreg, '] - IN_isActive: [', IN_isActive, '] - IN_idEDDEvalPregunta: [', IN_idEDDEvalPregunta, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarEddEvalRespPreg', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_nomRespPreg IS NULL 
            OR IN_ordenRespPreg IS NULL 
            OR IN_isActive IS NULL
            OR IN_idEDDEvalPregunta IS NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_nomRespPreg = "%null%"
            OR IN_ordenRespPreg = "%null%"
            OR IN_idEDDEvalPregunta = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioCreacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
            
			 ELSEIF TRIM(IN_nomRespPreg) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El Nombre Respuesta Pregunta viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_isActive NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEDDEvalPregunta <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idEDDEvalPregunta debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO eddevalresppreg (
                 nomRespPreg, 
                 ordenRespPreg, 
                 isActive, 
                 idEDDEvalPregunta, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion)
             VALUES (
                 IN_nomRespPreg, 
                 IN_ordenRespPreg, 
                 IN_isActive,
                 IN_idEDDEvalPregunta, 
                 now(), 
                 IN_usuarioCreacion, 
                 now(), 
                 IN_usuarioCreacion );
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
               SELECT OUT_CODRESULT, OUT_MJERESULT, respPreg.idEDDEvalRespPreg, UPPER(respPreg.nomRespPreg) as nomRespPreg, respPreg.ordenRespPreg, respPreg.idEDDEvalPregunta, UPPER(evaPreg.nomPregunta) as nomPregunta
               FROM eddevalresppreg respPreg
               INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
               WHERE respPreg.idEDDEvalRespPreg = LAST_INSERT_ID();
     END IF;


 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddEvaluacion` (IN `IN_nomEvaluacion` VARCHAR(50), IN `IN_tipoEvaluacion` VARCHAR(15), IN `IN_fechaIni` DATETIME, IN `IN_fechaFin` DATETIME, IN `IN_descFormulario` TEXT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
      	SET str_mjeInterno = CONCAT('SP_insertarEddEvaluacion: Error al insertar registro --> IN_nomEvaluacion: [', IN_nomEvaluacion, '] - IN_tipoEvaluacion: [', IN_tipoEvaluacion, '] - IN_fechaIni: [', IN_fechaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');
 
      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarEddEvaluacion', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  END;
 
            IF IN_nomEvaluacion IS NULL 
            OR IN_tipoEvaluacion IS NULL 
            OR IN_fechaIni IS NULL
            OR IN_fechaFin IS NULL
            OR IN_isActive IS NULL
            OR IN_usuarioCreacion is NULL
            OR IN_nomEvaluacion = "%null%"
            OR IN_tipoEvaluacion = "%null%"
            OR IN_fechaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_isActive = "%null%"
            OR IN_usuarioCreacion = "%null%" 
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
			 ELSEIF TRIM(IN_nomEvaluacion) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El nombre de la evaluacion viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_tipoEvaluacion) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El tipo evaluacion viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF IN_isActive NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El estado del registro debe ser verdadero o falso';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
 
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             ELSEIF TRIM(IN_descFormulario) = '' THEN
   				SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'La descripción del formulario no puede estar vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;   
            ELSE
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                	INSERT INTO eddevaluacion (
                        nomEvaluacion, 
                        tipoEvaluacion, 
                        fechaIni, 
                        fechaFin,
                        descFormulario,
                        isActive, 
                        fechaCreacion,
                        usuarioCreacion, 
                        fechaModificacion,
                        usuarioModificacion)
                    VALUES (
                        IN_nomEvaluacion,
                        IN_tipoEvaluacion,
                        IN_fechaIni,
                        IN_fechaFin,
                        IN_descFormulario,
                        IN_isActive, 
                        now(),
                        IN_usuarioCreacion, 
                        now(), 
                        IN_usuarioCreacion);
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
             	SELECT OUT_CODRESULT, OUT_MJERESULT,
                idEDDEvaluacion,
                UPPER(nomEvaluacion) as nomEvaluacion, 
                UPPER(tipoEvaluacion) as tipoEvaluacion, 
                DATE_FORMAT(fechaIni, "%d/%m/%Y") as fechaIni,
                DATE_FORMAT(fechaFin, "%d/%m/%Y") as fechaFin ,
                descFormulario
                FROM eddevaluacion
                WHERE idEDDEvaluacion = LAST_INSERT_ID();
     END IF;
 
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddProyecto` (IN `IN_nomProyecto` VARCHAR(50), IN `IN_fechaIni` DATE, IN `IN_fechaFin` DATE, IN `IN_tipoProyecto` VARCHAR(50), IN `IN_presupuestoTotal` DOUBLE, IN `IN_isActive` BOOLEAN, IN `IN_idServicio` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
  		DECLARE difMeses INT;
  		DECLARE ultIDProy INT;
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarEddProyecto: Error al insertar registro --> IN_nomProyecto: [', IN_nomProyecto, '] - IN_fechaIni: [', IN_fechaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_idServicio: [', IN_idServicio, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarEddProyecto', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_nomProyecto IS NULL 
            OR IN_fechaIni IS NULL
            OR IN_isActive is NULL
            OR IN_idServicio is NULL
            OR IN_usuarioCreacion is NULL 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

			/*
                
            ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
              
            ELSEIF TRIM(IN_fechaFin) != '0000-00-00' AND IN_fechaFin < CURRENT_DATE() THEN
            
                SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSEIF TRIM(IN_fechaFin) != '0000-00-00' AND IN_fechaIni > IN_fechaFin THEN 

                SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;    

				*/
                    
             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idServicio) <= 0 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'IDServicio del proyecto debe ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             
             ELSEIF TRIM(IN_nomProyecto) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El nombre del proyecto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF FN_EXISTE_NOMPROYECTO(IN_nomProyecto, IN_idServicio) = True THEN
    			SET OUT_CODRESULT = '09';
				SET OUT_MJERESULT = 'El nombre del proyecto para este servicio ya se encuentra registrado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   			
             ELSEIF TRIM(IN_tipoProyecto) = '' THEN
   				SET OUT_CODRESULT = '10';
				SET OUT_MJERESULT = 'El tipo del proyecto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
            		
               
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO eddproyecto (
                 nomProyecto, 
                 fechaInicio, 
                 fechaFin,
                 tipoProyecto,
                 isActive, 
                 idServicio,
                 fechaCreacion,
                 usuarioCreacion, 
                 fechaModificacion,
                 usuarioModificacion)
                 VALUES (
                     IN_nomProyecto, 
                     IN_fechaIni, 
                     IF(IN_fechaFin = '0000-00-00', NULL, IN_fechaFin), 
                     IN_tipoProyecto,
                     IN_isActive, 
                     IN_idServicio,
                     CURRENT_TIMESTAMP,
                     IN_usuarioCreacion,
                     CURRENT_TIMESTAMP, 
                     IN_usuarioCreacion);

     		 SET ultIDProy = LAST_INSERT_ID();

             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
                -- calculo la diferencia de meses entre la fecha inicio y fecha fin
                SELECT TIMESTAMPDIFF(MONTH, DATE_FORMAT(IN_fechaIni, '%Y-%m-01'), DATE_FORMAT(IN_fechaFin, '%Y-%m-01')) + 1 INTO difMeses;

                
                 -- inserto en la tabla resumen
                CALL SP_insertarResumenHHAuto(
                    ultIDProy, 
                    IN_fechaIni, 
                    IN_presupuestoTotal, 
                    difMeses, 
                    IN_isActive,
                    IN_usuarioCreacion,
                     @p0,
                     @p1);

                -- inserto en la tabla acop
                CALL SP_ihh_insertarAcop(ultIDProy, IN_presupuestoTotal, difMeses, IN_isActive, IN_usuarioCreacion, @p0, @p1);

                
                SELECT OUT_CODRESULT, OUT_MJERESULT, 
                proy.idEDDProyecto, 
                UPPER(nomProyecto) as nomProyecto, 
                DATE_FORMAT(proy.fechaInicio, "%d-%m-%Y") as fechaIni, 
                DATE_FORMAT(proy.fechaFin, "%d-%m-%Y") as fechaFin, 
                UPPER(serv.nomServicio) as nomServicio, 
                UPPER(proy.tipoProyecto) tipoProyecto,
                rpp.mes,
                rpp.idresumenperproy,
                rpp.presupuestoMensual,
                ac.presupuestoTotal
                FROM eddproyecto proy 
                INNER JOIN servicio serv ON (proy.idServicio = serv.idServicio)
                INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idProyecto = proy.idEDDProyecto)
                INNER JOIN ihhacop ac ON (ac.idProyecto = proy.idEDDProyecto)
                WHERE proy.idEDDProyecto = ultIDProy; 
               

     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEddProyEmp` (IN `IN_idProyecto` INT, IN `IN_idEmpleado` INT, IN `IN_cargoEnProy` VARCHAR(15), IN `IN_isActive` BOOLEAN, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarEddProyEmp: Error al insertar registro --> IN_idProyecto: [', IN_idProyecto, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_cargoEnProy: [', IN_cargoEnProy, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarEddProyEmp', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idProyecto IS NULL 
            OR IN_idEmpleado IS NULL
            OR IN_cargoEnProy is NULL
            OR IN_isActive is NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_idProyecto = "%null%"
            OR IN_idEmpleado = "%null%"
            OR IN_cargoEnProy = "%null%" 
            OR IN_isActive = "%null%"  
            OR IN_usuarioCreacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
                

            ELSEIF IN_idProyecto <= 0 THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El ID del proyecto debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idEmpleado <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del empleado debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_cargoEnProy) = "" THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El cargo en el proyecto viene vacío.';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

                ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
                ELSEIF FN_EXISTE_EDDProyEmp(IN_idProyecto, IN_idEmpleado, IN_cargoEnProy) = True THEN
    			SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El usuario ya se encuentra asociado al proyecto y cargo ingresados';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO eddproyemp (idProyecto, idEmpleado, cargoEnProy, isActive, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) VALUES (IN_idProyecto, IN_idEmpleado, IN_cargoEnProy, IN_isActive, CURRENT_TIMESTAMP, IN_usuarioCreacion, CURRENT_TIMESTAMP, IN_usuarioCreacion);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
                SELECT OUT_CODRESULT, OUT_MJERESULT, proyemp.idEDDProyEmp, UPPER(proy.nomProyecto) as nomProyecto, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(proyemp.cargoEnProy) as cargoEnProy
                FROM eddproyemp proyemp 
                INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyemp.idProyecto)
                INNER JOIN empleado emp ON (proyemp.idEmpleado = emp.idEmpleado)
                WHERE proyemp.idEDDProyEmp = LAST_INSERT_ID(); 
                
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEmpleado` (IN `IN_nomEmpleado` VARCHAR(50), IN `IN_correoEmpleado` VARCHAR(100), IN `IN_telefonoEmpleado` VARCHAR(15), IN `IN_valorHH` DOUBLE, IN `IN_idPais` INT, IN `IN_idArea` INT, IN `IN_idCargo` INT, IN `IN_idCliente` INT, IN `IN_usuario` VARCHAR(50), IN `IN_password` VARCHAR(50), IN `IN_tipoUsuario` VARCHAR(15), IN `IN_usuarioAdmin` VARCHAR(30), IN `IN_rolUsuario` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
          DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
          DECLARE str_msgMySQL VARCHAR(100);
          DECLARE str_mjeInterno VARCHAR(500);

          DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
           GET DIAGNOSTICS CONDITION 1
                str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
           ROLLBACK;

          SET str_mjeInterno = CONCAT('SP_insertarEmpleado: Error al insertar registro --> IN_nomEmpleado: [', IN_nomEmpleado, '] - IN_correoEmpleado: [', IN_correoEmpleado, '] - IN_telefonoEmpleado: [', IN_telefonoEmpleado, '] - IN_idPais: [', IN_idPais, '] - IN_idArea: [', IN_idArea, '] - IN_idCargo: [', IN_idCargo, '] - IN_idCliente: [', IN_idCliente, '] - IN_usuario: [', IN_usuario, '] - IN_password: [', IN_password, '] - IN_tipoUsuario: [', IN_tipoUsuario, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, '] - IN_rolUsuario: [', IN_rolUsuario, ']');

 

          INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
          VALUES(null, 'SP_insertarEmpleado', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
          COMMIT;

          SET OUT_CODRESULT = '13';
         SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  END;

 

            IF IN_nomEmpleado IS NULL OR IN_correoEmpleado IS NULL OR IN_idPais is NULL OR IN_idCargo is NULL OR IN_idArea = NULL OR IN_usuario is NULL OR IN_password is NULL OR IN_tipoUsuario is NULL OR IN_rolUsuario is NULL OR IN_usuarioAdmin is NULL OR IN_nomEmpleado = "%null%" OR IN_correoEmpleado = "%null%" OR IN_idPais = "%null%" OR IN_idCargo = "%null%" OR IN_idArea = "%null%" OR IN_usuario = "%null%" OR IN_password = "%null%" OR IN_tipoUsuario = "%null%" OR IN_rolUsuario = "%null%" OR IN_usuarioAdmin = "%null%" 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_nomEmpleado) = '' THEN
                   SET OUT_CODRESULT = '02';
                SET OUT_MJERESULT = 'Nombre del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_correoEmpleado) = '' THEN
                   SET OUT_CODRESULT = '03';
                SET OUT_MJERESULT = 'Correo del empleado viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idPais) = '' THEN
                   SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'País del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idCargo) = '' THEN
                   SET OUT_CODRESULT = '04';
                SET OUT_MJERESULT = 'Cargo del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idArea) = '' THEN
                   SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'Área del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuario) = '' THEN
                   SET OUT_CODRESULT = '06';
                SET OUT_MJERESULT = 'Usuario del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_password) = '' THEN
                   SET OUT_CODRESULT = '07';
                SET OUT_MJERESULT = 'Contraseña del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_tipoUsuario) = '' OR UPPER(IN_tipoUsuario) NOT IN ('EMPLEADO', 'ALUMNO', 'PEOPLE', 'RELATOR') THEN
                   SET OUT_CODRESULT = '08';
                SET OUT_MJERESULT = 'Tipo de usuario inválido --> [EMPLEADO /  ALUMNO / PEOPLE / RELATOR]';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_rolUsuario) = '' THEN
                   SET OUT_CODRESULT = '09';
                SET OUT_MJERESULT = 'Rol de usuario del empleado viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
                   SET OUT_CODRESULT = '10';
                SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            /*
             ELSEIF FN_EXISTE_CORREOLOGIN(IN_correoEmpleado) = True THEN
                SET OUT_CODRESULT = '11';
                SET OUT_MJERESULT = 'El correo ingresado ya está registrado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                */
             ELSEIF FN_EXISTE_USUARIOLOGIN(IN_usuario) = True THEN
                SET OUT_CODRESULT = '12';
                SET OUT_MJERESULT = 'El usuario del empleado ingresado ya está registrado';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idCliente <= 0 THEN
                SET OUT_CODRESULT = '13';
                SET OUT_MJERESULT = 'El idCliente debe ser mayor a cero';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

            ELSE

                SET AUTOCOMMIT = 0;
                START TRANSACTION;

             INSERT INTO loginusuario (
                 usuario, 
                 password, 
                 tipoUsuario, 
                 isActive, 
                 idRolUsuario, 
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) 
                 VALUES (
                     UPPER(IN_usuario), 
                     SHA1(IN_password), 
                     IN_tipoUsuario, 
                     true, 
                     IN_rolUsuario, 
                     CURRENT_TIMESTAMP, 
                     IN_usuarioAdmin, 
                     CURRENT_TIMESTAMP, 
                     IN_usuarioAdmin);


             SET @lastInsertIDLogin = (SELECT idLoginUsuario FROM loginusuario WHERE idLoginUsuario = (LAST_INSERT_ID()));

             INSERT INTO empleado (
                 nomEmpleado, 
                 correoEmpleado, 
                 telefonoEmpleado,  
                 isActive, 
                 idPais, 
                 idArea, 
                 idCargo, 
                 idLoginUsuario, 
                 idCliente, 
                 valorHH,
                 fechaCreacion, 
                 usuarioCreacion, 
                 fechaModificacion, 
                 usuarioModificacion) VALUES 
                 (UPPER(IN_nomEmpleado), 
                  IN_correoEmpleado, 
                  IN_telefonoEmpleado, 
                  true, 
                  IN_idPais, 
                  IN_idArea, 
                  IN_idCargo,
                  @lastInsertIDLogin,
                  IN_idCliente,
                  IN_valorHH,
                  CURRENT_TIMESTAMP, 
                  IN_usuarioAdmin, 
                  CURRENT_TIMESTAMP, 
                  IN_usuarioAdmin);

             COMMIT;
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Success';

    SELECT OUT_CODRESULT, OUT_MJERESULT, emp.idEmpleado, UPPER(emp.nomEmpleado), UPPER(emp.correoEmpleado), emp.telefonoEmpleado, UPPER(ar.nomArea), UPPER(pa.nomPais), UPPER(ca.nomCargo), UPPER(cli.nomCliente) nomCliente
    FROM empleado emp 
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
    WHERE emp.idEmpleado = LAST_INSERT_ID();
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEmpSubsist` (IN `IN_idEmpleado` INT, IN `IN_idSubsistema` INT, IN `IN_isActive` BOOLEAN, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarEmpSubsist: Error al insertar registro --> IN_idEmpleado: [', IN_idEmpleado, '] - IN_idSubsistema: [', IN_idSubsistema, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarEmpSubsist', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idEmpleado IS NULL 
            OR IN_idSubsistema IS NULL
            OR IN_isActive is NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_idEmpleado = "%null%"
            OR IN_idSubsistema = "%null%"
            OR IN_isActive = "%null%" 
            OR IN_usuarioCreacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idEmpleado <= 0 THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El ID del empleado debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idSubsistema <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del subsistema debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

                ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO empsubsist (idEmpleado, idSubsistema, isActive, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) 
             VALUES (IN_idEmpleado, IN_idSubsistema, IN_isActive, now(), IN_usuarioCreacion, now(), IN_usuarioCreacion);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
              SELECT OUT_CODRESULT, OUT_MJERESULT, empSubs.idEmpSubsist, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(sub.nomSubsistema) as nomSubsistema
              FROM empsubsist empSubs
              INNER JOIN empleado emp ON (empSubs.idEmpleado = emp.idEmpleado)
              INNER JOIN subsistema sub ON (empSubs.idSubsistema = sub.idSubsistema)
              WHERE empSubs.idEmpSubsist = LAST_INSERT_ID();
                
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarEmpTipoPerfil` (IN `IN_idEmpleado` INT, IN `IN_idTipoPerfil` INT, IN `IN_isActive` BOOLEAN, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarEmpTipoPerfil: Error al insertar registro --> IN_idEmpleado: [', IN_idEmpleado, '] - IN_idTipoPerfil: [', IN_idTipoPerfil, '] - IN_isActive: [', IN_isActive, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarEmpTipoPerfil', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_idEmpleado IS NULL 
            OR IN_idTipoPerfil IS NULL
            OR IN_isActive is NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_idEmpleado = "%null%"
            OR IN_idTipoPerfil = "%null%" 
            OR IN_isActive = "%null%" 
            OR IN_usuarioCreacion = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idEmpleado <= 0 THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El ID del empleado debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idTipoPerfil <= 0 THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del tipoPerfil debe ser mayor a cero.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_isActive) NOT IN (0, 1) THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío o es inválido (TRUE o FALSE)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

                ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
             
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO emptipoperfil (idEmpleado, idTipoPerfil, isActive, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion)
             VALUES
             (IN_idEmpleado, IN_idTipoPerfil, IN_isActive, now(), IN_usuarioCreacion, now(), IN_usuarioCreacion);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
            	
               SELECT OUT_CODRESULT, OUT_MJERESULT, etp.idEmpTipoPerfil, UPPER(tp.nomTipoPerfil), UPPER(emp.nomEmpleado)
               FROM emptipoperfil etp
               INNER JOIN tipoperfil tp ON (etp.idTipoPerfil = tp.idTipoPerfil)
               INNER JOIN empleado emp ON (etp.idEmpleado = emp.idEmpleado)
               WHERE etp.idEmpTipoPerfil = LAST_INSERT_ID();
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarNotaExamen` (IN `IN_notaExamen` INT, IN `IN_apruebaExamen` CHAR(2), IN `IN_isActive` BOOLEAN, IN `IN_idRamoExamen` INT, IN `IN_idCursoAlumno` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarNotaExamen: Error al insertar registro --> IN_notaExamen: [', IN_notaExamen, '] - IN_apruebaExamen: [', IN_apruebaExamen, '] - IN_isActive: [', IN_isActive, '] - IN_idRamoExamen: [', IN_idRamoExamen, '] - IN_idCursoAlumno: [', IN_idCursoAlumno, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarNotaExamen', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_notaExamen IS NULL 
            OR IN_apruebaExamen IS NULL
            OR IN_isActive is NULL
            OR IN_idRamoExamen is NULL
            OR IN_idCursoAlumno is NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_notaExamen = "%null%"
            OR IN_apruebaExamen = "%null%"
            OR IN_isActive = "%null%" 
            OR IN_idRamoExamen = "%null%" 
            OR IN_idCursoAlumno = "%null%" 
            OR IN_usuarioCreacion = "%null%" 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

            
			 ELSEIF IN_notaExamen < 0 OR IN_notaExamen > 10 THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'La nota tiene que ser mayor o igual a 0 (cero) y menor o igual a 10 (diez)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_apruebaExamen) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Aprueba examen viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_isActive) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del contacto viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idRamoExamen <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idRamoExamen tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoAlumno <= 0 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El idCursoAlumno tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO notaexamen (notaExamen, apruebaExamen, isActive, idRamoExamen, idCursoAlumno, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) 
             VALUES (IN_notaExamen, IN_apruebaExamen, IN_isActive, IN_idRamoExamen, IN_idCursoAlumno, CURRENT_TIMESTAMP, IN_usuarioCreacion, CURRENT_TIMESTAMP, IN_usuarioCreacion);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                 END IF;

                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', notaEx.idNotaExamen, notaEx.notaExamen, UPPER(notaEx.apruebaExamen), UPPER(ramoEx.nomExamen), cursoAl.idCursoAlumno
                FROM notaexamen notaEx 
                INNER JOIN ramoexamen ramoEx ON (notaEx.idRamoExamen = ramoEx.idRamoExamen)
                INNER JOIN cursoalumno cursoAl ON (notaEx.idCursoAlumno = cursoAl.idCursoAlumno)
                WHERE notaEx.isActive = true and notaEx.idNotaExamen = LAST_INSERT_ID();
    
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarRamo` (IN `IN_CODRAMO` VARCHAR(20), IN `IN_NOMRAMO` VARCHAR(50), IN `IN_TIPORAMO` VARCHAR(10), IN `IN_TIPORAMOHH` VARCHAR(12), IN `IN_DURACIONRAMOHH` DOUBLE, IN `IN_CANTSESIONESRAMO` INT, IN `IN_ISACTIVE` TINYINT, IN `IN_IDCURSO` INT, IN `IN_USUARIOCREACION` VARCHAR(15), OUT `OUT_IDRAMO` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE str_mjeInterno VARCHAR(500);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      ROLLBACK;
        
      SET str_mjeInterno = CONCAT('SP_insertarRamo: Error al insertar registro --> IN_CODRAMO: [', IN_CODRAMO, '] - IN_NOMRAMO: [', IN_NOMRAMO, '] - IN_TIPORAMO: [', IN_TIPORAMO, '] - IN_TIPORAMOHH: [', IN_TIPORAMOHH, '] - IN_CANTSESIONESRAMO: [', IN_CANTSESIONESRAMO, '] - IN_ISACTIVE: [', IN_ISACTIVE, '] - IN_IDCURSO: [', IN_IDCURSO, '] - IN_USUARIOCREACION: [', IN_USUARIOCREACION, ']');

      INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      VALUES(null, 'SP_insertarRamo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      COMMIT;
        
      SET OUT_CODRESULT = '13';
      SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
    END;

  IF IN_CODRAMO IS NULL OR IN_NOMRAMO IS NULL OR IN_TIPORAMO IS NULL OR IN_TIPORAMOHH IS NULL OR IN_DURACIONRAMOHH IS NULL OR IN_CANTSESIONESRAMO IS NULL OR IN_ISACTIVE IS NULL OR IN_IDCURSO IS NULL OR IN_USUARIOCREACION IS NULL THEN
    SET OUT_CODRESULT = '01';
		SET OUT_MJERESULT = 'Uno o más parámetros viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_CODRAMO) = '' THEN
    SET OUT_CODRESULT = '02';
		SET OUT_MJERESULT = 'Código de ramo viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_NOMRAMO) = '' THEN
    SET OUT_CODRESULT = '03';
		SET OUT_MJERESULT = 'Nombre de ramo viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPORAMO) NOT IN('PRESENCIAL', 'REMOTO', 'MIXTO') THEN
    SET OUT_CODRESULT = '04';
		SET OUT_MJERESULT = 'El tipo de ramo es incorrecto --> PRESENCIAL/REMOTO/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPORAMOHH) NOT IN('ACADEMICAS', 'CRONOLOGICAS', 'MIXTO') THEN
    SET OUT_CODRESULT = '05';
		SET OUT_MJERESULT = 'El tipo de horas del ramo es incorrecto --> ACADEMICAS/CRONOLOGICAS/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_DURACIONRAMOHH <= 0 THEN
    SET OUT_CODRESULT = '06';
		SET OUT_MJERESULT = 'La duración del ramo en horas debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;
  
  ELSEIF IN_CANTSESIONESRAMO <= 0 THEN
    SET OUT_CODRESULT = '07';
		SET OUT_MJERESULT = 'La cantidad de sesiones del ramo debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_ISACTIVE NOT IN(0, 1) THEN
    SET OUT_CODRESULT = '08';
		SET OUT_MJERESULT = 'El estado del ramo debe ser Verdadero (1) o Falso (0)';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_IDCURSO <= 0 THEN
    SET OUT_CODRESULT = '09';
		SET OUT_MJERESULT = 'El id del curso debe ser mayor a cero';    
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_USUARIOCREACION) = '' THEN
    SET OUT_CODRESULT = '10';
		SET OUT_MJERESULT = 'Usuario viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF FN_EXISTE_CODRAMO(IN_CODRAMO) = True THEN
    SET OUT_CODRESULT = '11';
		SET OUT_MJERESULT = 'El código del ramo ya está registrado';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF FN_EXISTE_NOMRAMO(IN_NOMRAMO) = True THEN
    SET OUT_CODRESULT = '12';
		SET OUT_MJERESULT = 'El nombre del ramo ya está registrado';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSE
    SET AUTOCOMMIT = 0;
    START TRANSACTION;
      INSERT INTO RAMO
        (idRamo,
         codRamo,
         nomRamo,
         tipoRamo,
         tipoRamoHH,
         duracionRamoHH,
         cantSesionesRamo,
         isActive,
         idCurso,
         fechaCreacion,
         usuarioCreacion,
         fechaModificacion,
         usuarioModificacion)
        VALUES
        (null,
         IN_CODRAMO,
         IN_NOMRAMO,
         IN_TIPORAMO,
         IN_TIPORAMOHH,
         IN_DURACIONRAMOHH,
         IN_CANTSESIONESRAMO,
         IN_ISACTIVE,
         IN_IDCURSO,
         now(),
         IN_USUARIOCREACION,
         now(),
         IN_USUARIOCREACION);
           
      COMMIT;

    SET OUT_IDRAMO = last_insert_id();
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

  END IF;   
      SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', ram.idRamo, UPPER(ram.codRamo), UPPER(ram.nomRamo), UPPER(ram.tipoRamo), UPPER(ram.tipoRamoHH), ram.duracionRamoHH, ram.cantSesionesRamo, UPPER(cur.nomCurso)
    FROM ramo ram 
    INNER JOIN curso cur ON (ram.idCurso = cur.idCurso)
    WHERE ram.idRamo = last_insert_id();
  
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarRamoExamen` (IN `IN_nomExamen` VARCHAR(50), IN `IN_fechaExamen` DATE, IN `IN_isActive` BOOLEAN, IN `IN_idRamo` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarRamoExamen: Error al insertar registro --> IN_nomExamen: [', IN_nomExamen, '] - IN_fechaExamen: [', IN_fechaExamen, '] - IN_isActive: [', IN_isActive, '] - IN_idRamo: [', IN_idRamo, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarRamoExamen', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_nomExamen IS NULL 
            OR IN_fechaExamen IS NULL
            OR IN_isActive is NULL
            OR IN_idRamo is NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_nomExamen = "%null%"
            OR IN_fechaExamen = "%null%"
            OR IN_isActive = "%null%" 
            OR IN_idRamo = "%null%"  
            OR IN_usuarioCreacion = "%null%" 

            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

            
			 ELSEIF TRIM(IN_nomExamen) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El nombre del examen viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_fechaExamen) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'La fecha examen viene vacía';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
             ELSEIF IN_isActive NOT IN (0,1) THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'Estado activo/inactivo del registro debe ser 0 (falso) o 1 (verdadero)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_idRamo <= 0 THEN
   				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El idRamo tiene que ser mayor a cero';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                   
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el registro viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO ramoexamen (nomExamen, fechaExamen, isActive, idRamo, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) 
             VALUES (IN_nomExamen, IN_fechaExamen, IN_isActive, IN_idRamo, CURRENT_TIMESTAMP(), IN_usuarioCreacion, CURRENT_TIMESTAMP, IN_usuarioCreacion);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
               	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT',ramEx.idRamoExamen, UPPER(ramEx.nomExamen), ramEx.fechaExamen, ramEx.isActive, UPPER(ram.nomRamo) FROM ramoexamen ramEx
                INNER JOIN ramo ram ON (ramEx.idRamo = ram.idRamo)
                WHERE ramEx.idRamoExamen = LAST_INSERT_ID();
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarRelatorRamo` (IN `IN_fechaIni` DATETIME, IN `IN_fechaFin` DATETIME, IN `IN_isActive` TINYINT, IN `IN_idEmpleado` INT, IN `IN_idRamo` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarRelatorRamo: Error al insertar registro --> IN_fechaIni: [', IN_fechaIni, '] - IN_fechaFin: [', IN_fechaFin, '] - IN_isActive: 				[', IN_isActive, '] - IN_idEmpleado: [', IN_idEmpleado, '] - IN_idRamo: [', IN_idRamo, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarRelatorRamo', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_fechaIni IS NULL 
            OR IN_fechaFin IS NULL
            OR IN_isActive is NULL
            OR IN_idEmpleado is NULL
            OR IN_idRamo is NULL
           
            
            OR IN_fechaIni = "%null%"
            OR IN_fechaFin = "%null%"
            OR IN_isActive = "%null%"
            OR IN_idEmpleado = "%null%"
            OR IN_idRamo = "%null%"
            
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;
             
             ELSEIF IN_fechaIni < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Fecha de inicio inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaFin < CURRENT_DATE() THEN
             	SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Fecha de fin inválida, no puede ser menor a la fecha actual.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_fechaIni > IN_fechaFin THEN 
             	SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'La fecha de inicio no puede ser mayor a la fecha final.';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_isActive NOT IN(0, 1) THEN
                SET OUT_CODRESULT = '05';
                SET OUT_MJERESULT = 'El estado del curso debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

			ELSEIF IN_idEmpleado <= 0 THEN
   				SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El id del empleado debe ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
            ELSEIF IN_idRamo <= 0 THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El id del ramo debe ser mayor a cero'; 
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '08';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             	INSERT INTO relatorramo (fechaIni, fechaFin, isActive, idEmpleado, idRamo, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) VALUES (IN_fechaIni, IN_fechaFin, IN_isActive, IN_idEmpleado, IN_idRamo, CURRENT_TIMESTAMP, IN_usuarioCreacion, now(), IN_usuarioCreacion);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', relRam.idRelatorRamo, relRam.fechaIni, relRam.fechaFin, UPPER(emp.nomEmpleado), UPPER(ram.nomRamo) 
                FROM relatorramo relRam 
                INNER JOIN empleado emp ON (relRam.idEmpleado = emp.idEmpleado) 
                INNER JOIN ramo ram ON (relRam.idRamo = ram.idRamo) 
                WHERE relRam.idRelatorRamo = LAST_INSERT_ID();
     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarReqCurso` (IN `IN_isActive` TINYINT, IN `IN_idCurso` INT, IN `IN_idCursoRequisito` INT, IN `IN_usuarioCreacion` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarReqCurso: Error al insertar registro --> IN_isActive: [', IN_isActive, '] - IN_idCurso: [', IN_idCurso, '] - IN_idCursoRequisito: [', IN_idCursoRequisito, '] - IN_usuarioCreacion: [', IN_usuarioCreacion, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarReqCurso', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_isActive IS NULL 
            OR IN_idCurso IS NULL
            OR IN_idCursoRequisito is NULL
            OR IN_usuarioCreacion is NULL
            
            OR IN_isActive = "%null%"
            OR IN_idCurso = "%null%"
            OR IN_idCursoRequisito = "%null%"
            OR IN_usuarioCreacion = "%null%"
            
            THEN
                SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
                SET OUT_CODRESULT = '01';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF IN_isActive NOT IN(0, 1) THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El estado del ramo debe ser Verdadero (1) o Falso (0)';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCurso <= 0 THEN
 				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El id del curso tiene que ser mayor a cero';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF IN_idCursoRequisito <= 0 THEN
 				SET OUT_CODRESULT = '05';
				SET OUT_MJERESULT = 'El id del requisito tiene que ser mayor a cero';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF FN_EXISTE_REQCURSO(IN_idCursoRequisito, IN_idCurso) = True THEN
    			SET OUT_CODRESULT = '06';
				SET OUT_MJERESULT = 'El requisito para este curso ya se encuentra registrado';   
                SELECT OUT_MJERESULT, OUT_CODRESULT;
                
             ELSEIF TRIM(IN_usuarioCreacion) = '' THEN
   				SET OUT_CODRESULT = '07';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO reqcurso (isActive, idCurso, idCursoRequisito, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) 
             VALUES( IN_isActive, IN_idCurso, IN_idCursoRequisito, CURRENT_TIMESTAMP, IN_usuarioCreacion, CURRENT_TIMESTAMP, IN_usuarioCreacion);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
                
                SELECT OUT_CODRESULT, OUT_MJERESULT, reCur.idReqCurso, UPPER(cur.nomCurso), UPPER(curReq.nomCurso) as requisitoCurso 
                FROM reqcurso reCur
                INNER JOIN curso cur ON (reCur.idCurso = cur.idCurso)
                INNER JOIN curso curReq ON (reCur.idCursoRequisito = curReq.idCurso)
                WHERE reCur.idReqCurso = LAST_INSERT_ID();
              
     END IF;
 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarResumenHHAuto` (IN `IN_idProyecto` INT, IN `IN_fechaIni` DATE, IN `IN_presupuestoTotal` DOUBLE, IN `IN_cantidadMeses` INT, IN `IN_isActive` TINYINT, IN `IN_usuarioCreacion` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		
    DECLARE contador INT DEFAULT 0;
    DECLARE nuevaFecha VARCHAR(6);
    DECLARE fechaIniFormat VARCHAR(6);

    -- Transformar la fecha de inicio a formato 'YYYYMM'
    SET fechaIniFormat = DATE_FORMAT(IN_fechaIni, '%Y%m');

    WHILE contador < IN_cantidadMeses DO
        SET nuevaFecha = CONCAT(
            LEFT(fechaIniFormat, 4) + FLOOR((RIGHT(fechaIniFormat, 2) + contador - 1) / 12),
            LPAD(MOD((RIGHT(fechaIniFormat, 2) + contador - 1), 12) + 1, 2, '0')
        );

        INSERT INTO ihhresumenperiodoproyecto (
            mes,
            presupuestoMensual,
            idProyecto,
            isActive,
            usuarioCreacion,
            fechaCreacion,
            usuarioModificacion,
            fechaModificacion
        ) VALUES (
            nuevaFecha,
            ROUND(IN_presupuestoTotal / IN_cantidadMeses, 2),
            IN_idProyecto,
            IN_isActive,
            IN_usuarioCreacion,
            NOW(),
            IN_usuarioCreacion,
            NOW()
        );

        SET contador = contador + 1;
    END WHILE;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarServicio` (IN `IN_nomServicio` VARCHAR(100), IN `IN_idCliente` INT, IN `IN_usuarioAdmin` VARCHAR(15), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
 
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_insertarServicio: Error al insertar registro --> IN_nomServicio: [', IN_nomServicio, '] - IN_idCliente: [', IN_idCliente, '] - IN_usuarioAdmin: [', IN_usuarioAdmin, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_insertarServicio', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
        
  END;

            IF IN_nomServicio IS NULL 
            OR IN_idCliente IS NULL
            OR IN_usuarioAdmin is NULL
            
            OR IN_nomServicio = "%null%"
            OR IN_idCliente = "%null%"
            OR IN_usuarioAdmin = "%null%" 
            
            THEN
             SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos";
             SET OUT_CODRESULT = '01';
             SELECT OUT_MJERESULT, OUT_CODRESULT;

            
			 ELSEIF TRIM(IN_nomServicio) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'Nombre del cliente viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;

             ELSEIF TRIM(IN_idCliente) = '' THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'Dirección del cliente viene vacío';  
                SELECT OUT_MJERESULT, OUT_CODRESULT;
    
   
             ELSEIF TRIM(IN_usuarioAdmin) = '' THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'El usuario administrador quien crea el usuario viene vacío';
                SELECT OUT_MJERESULT, OUT_CODRESULT;
   
            ELSE
            
                SET AUTOCOMMIT = 0;
                START TRANSACTION;
                
             INSERT INTO servicio (nomServicio, isActive, idCliente, fechaCreacion, usuarioCreacion, fechaModificacion, usuarioModificacion) VALUES (IN_nomServicio, true, IN_idCliente, CURRENT_TIMESTAMP, IN_usuarioAdmin, CURRENT_TIMESTAMP, IN_usuarioAdmin);
     		 
             COMMIT;
                SET OUT_CODRESULT = '00';
    			SET OUT_MJERESULT = 'Success';
   
        SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', serv.idServicio, UPPER(serv.nomServicio), serv.isActive, UPPER(cli.nomCliente)
        FROM servicio serv
        INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)
        WHERE serv.idServicio = last_insert_id();
     END IF;

 END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_insertarSesion` (IN `IN_NROSESION` INT, IN `IN_NOMSESION` VARCHAR(50), IN `IN_TIPOSESION` VARCHAR(10), IN `IN_TIPOSESIONHH` VARCHAR(12), IN `IN_DURACIONSESIONHH` DOUBLE, IN `IN_ISACTIVE` TINYINT, IN `IN_IDRAMO` INT, IN `IN_USUARIOCREACION` VARCHAR(15), OUT `OUT_IDSESION` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE str_mjeInterno VARCHAR(500);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      ROLLBACK;
        
      SET str_mjeInterno = CONCAT('SP_insertarSesion: Error al insertar registro --> ] - IN_NROSESION: [', IN_NROSESION, '] - IN_NOMSESION: [', IN_NOMSESION, '] - IN_TIPOSESION: [', IN_TIPOSESION, '] - IN_TIPOSESIONHH: [', IN_TIPOSESIONHH, '] - IN_ISACTIVE: [', IN_ISACTIVE, '] - IN_IDRAMO: [', IN_IDRAMO, '] - IN_USUARIOCREACION: [', IN_USUARIOCREACION, ']');

      INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      VALUES(null, 'SP_insertarSesion', str_codMySQL, str_msgMySQL, now(), '12', str_mjeInterno);
      COMMIT;
        
      SET OUT_CODRESULT = '12';
      SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
        SELECT OUT_MJERESULT, OUT_CODRESULT;
      
    END;

  IF IN_NROSESION IS NULL OR IN_NOMSESION IS NULL OR IN_TIPOSESION IS NULL OR IN_TIPOSESIONHH IS NULL OR IN_DURACIONSESIONHH IS NULL OR IN_ISACTIVE IS NULL OR IN_IDRAMO IS NULL OR IN_USUARIOCREACION IS NULL THEN
    SET OUT_CODRESULT = '01';
		SET OUT_MJERESULT = 'Uno o más parámetros viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_NROSESION <= 0 THEN
    SET OUT_CODRESULT = '02';
		SET OUT_MJERESULT = 'Nro de sesión debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_NOMSESION) = '' THEN
    SET OUT_CODRESULT = '03';
		SET OUT_MJERESULT = 'Nombre de sesión viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPOSESION) NOT IN('PRESENCIAL', 'REMOTO', 'MIXTO') THEN
    SET OUT_CODRESULT = '04';
		SET OUT_MJERESULT = 'El tipo de sesión es incorrecto --> PRESENCIAL/REMOTO/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF UPPER(IN_TIPOSESIONHH) NOT IN('ACADEMICAS', 'CRONOLOGICAS', 'MIXTO') THEN
    SET OUT_CODRESULT = '05';
		SET OUT_MJERESULT = 'El tipo de horas de la sesión es incorrecto --> ACADEMICAS/CRONOLOGICAS/MIXTO';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_DURACIONSESIONHH <= 0 THEN
    SET OUT_CODRESULT = '06';
		SET OUT_MJERESULT = 'La duración de la sesión en horas debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_ISACTIVE NOT IN(0, 1) THEN
    SET OUT_CODRESULT = '07';
		SET OUT_MJERESULT = 'El estado de la sesión debe ser Verdadero (1) o Falso (0)';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF IN_IDRAMO <= 0 THEN
    SET OUT_CODRESULT = '08';
		SET OUT_MJERESULT = 'El id del ramo debe ser mayor a cero';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF TRIM(IN_USUARIOCREACION) = '' THEN
    SET OUT_CODRESULT = '09';
		SET OUT_MJERESULT = 'Usuario viene vacío';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF FN_EXISTE_NROSESION(IN_NROSESION, IN_IDRAMO) = True THEN
    SET OUT_CODRESULT = '10';
		SET OUT_MJERESULT = 'El nro de sesión ya está registrado';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSEIF FN_EXISTE_NOMSESION(IN_NOMSESION, IN_IDRAMO) = True THEN
    SET OUT_CODRESULT = '11';
		SET OUT_MJERESULT = 'El nombre de sesión ya está registrado';
        SELECT OUT_MJERESULT, OUT_CODRESULT;

  ELSE
    SET AUTOCOMMIT = 0;
    START TRANSACTION;
      INSERT INTO SESION
        (idSesion,
         nroSesion,
         nomSesion,
         tipoSesion,
         tipoSesionHH,
         duracionSesionHH,
         isActive,
         idRamo,
         fechaCreacion,
         usuarioCreacion,
         fechaModificacion,
         usuarioModificacion)
        VALUES
        (null,
         IN_NROSESION,
         IN_NOMSESION,
         IN_TIPOSESION,
         IN_TIPOSESIONHH,
         IN_DURACIONSESIONHH,
         IN_ISACTIVE,
         IN_IDRAMO,
         now(),
         IN_USUARIOCREACION,
         now(),
         IN_USUARIOCREACION);
           
      COMMIT;

    SET OUT_IDSESION = last_insert_id();
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

  END IF;   
      SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), UPPER(ram.nomRamo)
    FROM sesion se 
    INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
    WHERE se.idSesion = last_insert_id();

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoAlumnos` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idPais` INT, IN `IN_idServicio` INT, IN `IN_idArea` INT, IN `IN_idCargo` INT)   BEGIN 

-- SI TODAS LAS VARIABLES SON NULAS, RETORNA TODOS LOS DATOS SIN FILTROS
CASE
    WHEN IN_idPais = 0
    AND IN_idServicio = 0
    AND IN_idArea = 0
    AND IN_idCargo = 0 THEN
    SET
        @temp_cantRegistros = (
            SELECT
                COUNT(idAlumno)
            FROM
                alumno
            WHERE
                isActive = true
        );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO PAIS SON NULAS
WHEN IN_idPais > 0
AND IN_idServicio = 0
AND IN_idArea = 0
AND IN_idCargo = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idPais = IN_idPais
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO SERVICIO SON NULAS
WHEN IN_idPais = 0
AND IN_idServicio != 0
AND IN_idArea = 0
AND IN_idCargo = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idServicio = IN_idServicio
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idServicio = IN_idServicio
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO AREA SON NULAS
WHEN IN_idPais = 0
AND IN_idServicio = 0
AND IN_idArea != 0
AND IN_idCargo = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idArea = IN_idArea
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idArea = IN_idArea
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO CARGO SON NULAS
WHEN IN_idPais = 0
AND IN_idServicio = 0
AND IN_idArea = 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idCargo = IN_idCargo
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO PAIS Y SERVICIO SON NULAS
WHEN IN_idPais != 0
AND IN_idServicio != 0
AND IN_idArea = 0
AND IN_idCargo = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idServicio = IN_idServicio
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idPais = IN_idPais
    AND alum.idServicio = IN_idServicio
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO PAIS Y AREA SON NULAS
WHEN IN_idPais != 0
AND IN_idServicio = 0
AND IN_idArea != 0
AND IN_idCargo = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idArea = IN_idArea
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idPais = IN_idPais
    AND alum.idArea = IN_idArea
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO PAIS Y CARGO SON NULAS
WHEN IN_idPais != 0
AND IN_idServicio = 0
AND IN_idArea = 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idPais = IN_idPais
    AND alum.idCargo = IN_idCargo
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- --> SI TODAS LAS VARIABLES EXCEPTO SERVICIO Y PAIS SON NULAS --> SE REPITE LA MISMA OPERACION QUE EN PAIS - SERVICIO, POR LO TANTO SE OMITE.
-- SI TODAS LAS VARIABLES EXCEPTO SERVICIO Y AREA SON NULAS
WHEN IN_idPais = 0
AND IN_idServicio != 0
AND IN_idArea != 0
AND IN_idCargo = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idServicio = IN_idServicio
            AND idArea = IN_idArea
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idServicio = IN_idServicio
    AND alum.idArea = IN_idArea
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO SERVICIO Y CARGO SON NULAS
WHEN IN_idPais = 0
AND IN_idServicio != 0
AND IN_idArea = 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idServicio = IN_idServicio
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idServicio = IN_idServicio
    AND alum.idCargo = IN_idCargo
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO AREA Y CARGO SON NULAS
WHEN IN_idPais = 0
AND IN_idServicio = 0
AND IN_idArea != 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idArea = IN_idArea
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idArea = IN_idArea
    AND alum.idCargo = IN_idCargo
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO SERVICIO AREA Y CARGO SON NULAS
WHEN IN_idPais = 0
AND IN_idServicio != 0
AND IN_idArea != 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idServicio = IN_idServicio
            AND idArea = IN_idArea
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idArea = IN_idArea
    AND alum.idCargo = IN_idCargo
    AND alum.idServicio = IN_idServicio
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO PAIS, AREA Y CARGO SON NULAS
WHEN IN_idPais != 0
AND IN_idServicio = 0
AND IN_idArea != 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idArea = IN_idArea
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)

FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idArea = IN_idArea
    AND alum.idCargo = IN_idCargo
    AND alum.idPais = IN_idPais
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO PAIS, SERVICIO Y CARGO SON NULAS
WHEN IN_idPais != 0
AND IN_idServicio != 0
AND IN_idArea = 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idServicio = IN_idServicio
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idServicio = IN_idServicio
    AND alum.idCargo = IN_idCargo
    AND alum.idPais = IN_idPais
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI TODAS LAS VARIABLES EXCEPTO PAIS, SERVICIO Y AREA SON NULAS
WHEN IN_idPais != 0
AND IN_idServicio != 0
AND IN_idArea != 0
AND IN_idCargo = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idServicio = IN_idServicio
            AND idArea = IN_idArea
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idServicio = IN_idServicio
    AND alum.idArea = IN_idArea
    AND alum.idPais = IN_idPais
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- SI NINGUNA VARIABLE ES NULA
WHEN IN_idPais != 0
AND IN_idServicio != 0
AND IN_idArea != 0
AND IN_idCargo != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idAlumno)
        FROM
            alumno
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idServicio = IN_idServicio
            AND idArea = IN_idArea
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    alum.idAlumno,
    UPPER(alum.nomAlumno),
    UPPER(alum.correoAlumno),
    UPPER(alum.telefonoAlumno),
    UPPER(serv.nomServicio),
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(car.nomCargo)
FROM
    alumno alum
    INNER JOIN area ar ON (alum.idArea = ar.idArea)
    INNER JOIN pais pa ON (alum.idPais = pa.idPais)
    INNER JOIN cargo car ON (alum.idCargo = car.idCargo)
    INNER JOIN servicio serv ON (alum.idServicio = serv.idServicio)
WHERE
    alum.isActive = true
    AND alum.idServicio = IN_idServicio
    AND alum.idArea = IN_idArea
    AND alum.idPais = IN_idPais
    AND alum.idCargo = IN_idCargo
ORDER BY
    alum.nomAlumno ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

END CASE;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoClientes` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
SET @temp_cantRegistros = (SELECT COUNT(idCliente) FROM cliente WHERE isActive = true);
SELECT @temp_cantRegistros, cli.idCliente, UPPER(cli.nomCliente), UPPER(cli.direccionCliente), UPPER(cli.isActive), UPPER(pa.nomPais), cli.idPais
FROM cliente cli 
INNER JOIN pais pa ON (cli.idPais = pa.idPais)
WHERE cli.isActive = true
ORDER BY cli.nomCliente ASC 
LIMIT IN_inicio, IN_cantidadPorPagina;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoConfigDatos` (IN `IN_tipoConfDato` VARCHAR(100), IN `IN_subTipoConfDato` VARCHAR(100), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
    	IF TRIM(IN_tipoConfDato) = "" THEN
        	SET OUT_CODRESULT = '01';
			SET OUT_MJERESULT = "El IN_tipoConfDato no puede venir vacío.";
            SELECT OUT_CODRESULT, OUT_MJERESULT;
        -- ELSEIF UPPER(IN_tipoConfDato) NOT IN ('COMPETENCIA', 'COMENTARIOS') THEN
			-- SET OUT_CODRESULT = '02';
			-- SET OUT_MJERESULT = "El IN_tipoConfDato no es igual a los tipos de datos permitidos.";
            -- SELECT OUT_CODRESULT, OUT_MJERESULT;		

		ELSEIF TRIM(IN_tipoConfDato) != "" AND TRIM(IN_subTipoConfDato) != "" THEN
        	SET OUT_CODRESULT = '00';
			SET OUT_MJERESULT = "SUCCESS";
            SELECT *, OUT_CODRESULT, OUT_MJERESULT FROM confdatos 
            WHERE tipoConfDato = IN_tipoConfDato 
            AND subTipoConfDato = IN_subTipoConfDato
            AND isActive = 1
            ;

        ELSEIF TRIM(IN_tipoConfDato) != "" AND TRIM(IN_subTipoConfDato) = "" THEN
            SET OUT_CODRESULT = '00';
			SET OUT_MJERESULT = "SUCCESS";
            SELECT *, OUT_CODRESULT, OUT_MJERESULT FROM confdatos 
            WHERE tipoConfDato = IN_tipoConfDato
            AND isActive = 1;

	END IF;
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoContactos` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idServicio` INT, IN `IN_idCliente` INT)   BEGIN

	-- si ambas son nulas
	IF IN_idCliente = 0 AND IN_idServicio = 0 THEN
    
        SET @temp_cantRegistros = (SELECT COUNT(idContacto) FROM contacto WHERE isActive = true);
        SELECT @temp_cantRegistros, con.idContacto , UPPER(con.nomContacto), UPPER(con.correoContacto), con.telefonoContacto, 
        DATE_FORMAT(con.fechaIni, "%d-%m-%Y") as fechaIni, DATE_FORMAT(con.fechaFin, "%d-%m-%Y") as fechaFin,  UPPER(serv.nomServicio), UPPER(cli.nomCliente) as nomCliente
        FROM contacto con
        INNER JOIN servicio serv ON (con.idServicio = serv.idServicio)
        INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)          
        WHERE con.isActive = true
        ORDER BY con.nomContacto ASC LIMIT IN_inicio, IN_cantidadPorPagina;
    
    -- si idServicio no es nulo    	
    ELSEIF IN_idCliente = 0 AND IN_idServicio != 0 THEN
    
         SET @temp_cantRegistros = (SELECT COUNT(idContacto) FROM contacto WHERE isActive = true AND idServicio = IN_idServicio);
         
        SELECT @temp_cantRegistros, con.idContacto , UPPER(con.nomContacto), UPPER(con.correoContacto), con.telefonoContacto, 
        DATE_FORMAT(con.fechaIni, "%d-%m-%Y") as fechaIni, DATE_FORMAT(con.fechaFin, "%d-%m-%Y") as fechaFin, UPPER(serv.nomServicio), UPPER(cli.nomCliente) as nomCliente
        FROM contacto con
        INNER JOIN servicio serv ON (con.idServicio = serv.idServicio)
        INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)          
        WHERE con.isActive = true AND con.idServicio = IN_idServicio
        ORDER BY con.nomContacto ASC LIMIT IN_inicio, IN_cantidadPorPagina;
        
     -- si idCliente no es nulo    	
     
    ELSEIF IN_idCliente != 0 AND IN_idServicio = 0 THEN
    
         SET @temp_cantRegistros = (
             SELECT COUNT(idContacto) FROM contacto con
             INNER JOIN servicio serv ON (serv.idServicio = con.idServicio)
             INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)
             WHERE con.isActive = true AND cli.idCliente = IN_idCliente
         
         );
         
        SELECT @temp_cantRegistros, con.idContacto , UPPER(con.nomContacto), UPPER(con.correoContacto), con.telefonoContacto, 
        DATE_FORMAT(con.fechaIni, "%d-%m-%Y") as fechaIni, DATE_FORMAT(con.fechaFin, "%d-%m-%Y") as fechaFin, 
        UPPER(serv.nomServicio), UPPER(cli.nomCliente) as nomCliente
        FROM contacto con
          INNER JOIN servicio serv ON (serv.idServicio = con.idServicio)
          INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)          
        WHERE con.isActive = true AND cli.idCliente = IN_idCliente
        ORDER BY con.nomContacto ASC LIMIT IN_inicio, IN_cantidadPorPagina; 
     
        -- si ninguna es nula   	
     
    ELSEIF IN_idCliente != 0 AND IN_idServicio != 0 THEN
    
         SET @temp_cantRegistros = (
             SELECT COUNT(idContacto) FROM contacto con
             INNER JOIN servicio serv ON (serv.idServicio = con.idServicio)
             INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)
             WHERE con.isActive = true AND cli.idCliente = IN_idCliente AND serv.idServicio = IN_idServicio
         );
         
        SELECT @temp_cantRegistros, con.idContacto , UPPER(con.nomContacto), UPPER(con.correoContacto), con.telefonoContacto, 
        DATE_FORMAT(con.fechaIni, "%d-%m-%Y") as fechaIni, DATE_FORMAT(con.fechaFin, "%d-%m-%Y") as fechaFin, 
        UPPER(serv.nomServicio), UPPER(cli.nomCliente) as nomCliente
        FROM contacto con
          INNER JOIN servicio serv ON (serv.idServicio = con.idServicio)
          INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)          
        WHERE con.isActive = true AND cli.idCliente = IN_idCliente AND serv.idServicio = IN_idServicio
        ORDER BY con.nomContacto ASC LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    END IF;
    
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoCursoAlumno` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEmpleado` INT, IN `IN_idCurso` INT)   BEGIN
	-- CUANDO LAS DOS VARIABLES SON NULAS
	IF IN_idEmpleado = 0 AND IN_idCurso = 0 THEN
    
        SET @temp_cantRegistros = (SELECT COUNT(idCursoAlumno) FROM cursoalumno WHERE isActive = true);

        SELECT @temp_cantRegistros, curAl.idCursoAlumno, 
        DATE_FORMAT(curAl.fechaIni, "%d/%m/%Y") as fechaIni, curAl.horaIni, 
        DATE_FORMAT(curAl.fechaFin, "%d/%m/%Y") as fechaFin, curAl.horaFin, curAl.porcAsistencia,curAl.porcParticipacion, 
        IF(curAl.estadoCurso = 1, "ACTIVADO", "DESACTIVADO") as estadoCurso, 
        curAl.porcAprobacion, IF(curAl.claseAprobada = "S", "SÍ", "NO") as claseAprobada, UPPER(emp.nomEmpleado), UPPER(cur.nomCurso)
        FROM cursoalumno curAl
        INNER JOIN empleado emp ON (curAl.idEmpleado = emp.idEmpleado)
        INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
        WHERE curAl.isActive = true
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
     -- CUANDO ID CURSO ES NULL   
     ELSEIF IN_idEmpleado != 0 AND IN_idCurso = 0 THEN
     	
        SET @temp_cantRegistros = (SELECT COUNT(idCursoAlumno) FROM cursoalumno WHERE isActive = true and idEmpleado = IN_idEmpleado);
        
     	SELECT @temp_cantRegistros, curAl.idCursoAlumno,
        DATE_FORMAT(curAl.fechaIni, "%d/%m/%Y") as fechaIni, curAl.horaIni, 
        DATE_FORMAT(curAl.fechaFin, "%d/%m/%Y") as fechaFin, curAl.horaFin, 
        curAl.porcAsistencia,curAl.porcParticipacion, IF(curAl.claseAprobada = "S", "SÍ", "NO") as claseAprobada, curAl.porcAprobacion, 
        IF(curAl.estadoCurso = 1, "ACTIVADO", "DESACTIVADO") as estadoCurso,
        UPPER(emp.nomEmpleado), UPPER(cur.nomCurso)
        FROM cursoalumno curAl
        INNER JOIN empleado emp ON (curAl.idEmpleado = emp.idEmpleado)
        INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
        WHERE curAl.isActive = true AND curAl.idEmpleado = IN_idEmpleado
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
     -- CUANDO ID ALUMNO ES NULL  
     ELSEIF IN_idEmpleado = 0 AND IN_idCurso != 0 THEN
     	
        SET @temp_cantRegistros = (SELECT COUNT(idCursoAlumno) FROM cursoalumno WHERE isActive = true and idCurso = IN_idCurso);
        
     	SELECT @temp_cantRegistros, curAl.idCursoAlumno,
        DATE_FORMAT(curAl.fechaIni, "%d/%m/%Y") as fechaIni, curAl.horaIni, 
        DATE_FORMAT(curAl.fechaFin, "%d/%m/%Y") as fechaFin, curAl.horaFin,        
        curAl.porcAsistencia,curAl.porcParticipacion, IF(curAl.claseAprobada = "S", "SÍ", "NO") as claseAprobada, curAl.porcAprobacion, IF(curAl.estadoCurso = 1, "ACTIVADO", "DESACTIVADO") as estadoCurso, UPPER(emp.nomEmpleado), UPPER(cur.nomCurso)
        FROM cursoalumno curAl
        INNER JOIN empleado emp ON (curAl.idEmpleado = emp.idEmpleado)
        INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
        WHERE curAl.isActive = true AND curAl.idCurso = IN_idCurso
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;   
     
     -- CUANDO NINGUNA ES NULL
     ELSEIF IN_idEmpleado != 0 AND IN_idCurso != 0 THEN
     	
        SET @temp_cantRegistros = (SELECT COUNT(idCursoAlumno) FROM cursoalumno WHERE isActive = true and idCurso = IN_idCurso AND idEmpleado = IN_idEmpleado);
        
     	SELECT @temp_cantRegistros, curAl.idCursoAlumno, 
        DATE_FORMAT(curAl.fechaIni, "%d/%m/%Y") as fechaIni, curAl.horaIni, 
        DATE_FORMAT(curAl.fechaFin, "%d/%m/%Y") as fechaFin, curAl.horaFin, 
        curAl.porcAsistencia,curAl.porcParticipacion, IF(curAl.claseAprobada = "S", "Sí", "No") as claseAprobada, curAl.porcAprobacion, IF(curAl.estadoCurso = 1, "ACTIVADO", "DESACTIVADO") as estadoCurso, UPPER(emp.nomEmpleado), UPPER(cur.nomCurso)
        FROM cursoalumno curAl
        INNER JOIN empleado emp ON (curAl.idEmpleado = emp.idEmpleado)
        INNER JOIN curso cur ON (curAl.idCurso = cur.idCurso)
        WHERE curAl.isActive = true AND curAl.idCurso = IN_idCurso AND curAl.idEmpleado = IN_idEmpleado
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;   
     
     END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoCursoAlumnoSesion` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idSesion` INT, IN `IN_idEmpleado` INT)   BEGIN
	
    IF IN_idSesion = 0 AND IN_idEmpleado = 0 THEN

        SET @temp_cantRegistros = (SELECT COUNT(idCursoAlumnoSesion) 
        FROM cursoalumno_sesion WHERE isActive = true);

        SELECT @temp_cantRegistros, curAlSe.idCursoAlumnoSesion,
        DATE_FORMAT(curAlSe.fechaIni, "%d/%m/%Y") as fechaIni, 
        DATE_FORMAT(curAlSe.fechaFin, "%d/%m/%Y") as fechaFin, 
        curAlSe.horaIni, 
        curAlSe.horaFin, 
        curAlSe.asistencia, 
        curAlSe.participacion, 
        UPPER(se.nomSesion), 
        curAl.idCursoAlumno,
        UPPER(emp.nomEmpleado) nomEmpleado
        FROM cursoalumno_sesion curAlSe
        INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
        INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAl.idCursoAlumno)
        INNER JOIN empleado emp ON (emp.idEmpleado = curAl.idEmpleado)
        WHERE curAlSe.isActive = true
        ORDER BY curAlSe.idCursoAlumnoSesion, emp.nomEmpleado
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    ELSEIF IN_idSesion != 0 AND IN_idEmpleado = 0 THEN
     
        SET @temp_cantRegistros = (SELECT COUNT(idCursoAlumnoSesion) FROM cursoalumno_sesion WHERE isActive = true AND idSesion = IN_idSesion);

        SELECT @temp_cantRegistros, 
        curAlSe.idCursoAlumnoSesion, 
        DATE_FORMAT(curAlSe.fechaIni, "%d/%m/%Y") as fechaIni, 
        DATE_FORMAT(curAlSe.fechaFin, "%d/%m/%Y") as fechaFin, 
        curAlSe.horaIni,
        curAlSe.horaFin, 
        curAlSe.asistencia,
        curAlSe.participacion,
        UPPER(se.nomSesion),
        curAl.idCursoAlumno,
        UPPER(emp.nomEmpleado) nomEmpleado
        FROM cursoalumno_sesion curAlSe
        INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
        INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAl.idCursoAlumno)
        INNER JOIN empleado emp ON (emp.idEmpleado = curAl.idEmpleado)
        WHERE curAlSe.isActive = true 
        AND curAlSe.idSesion = IN_idSesion
        ORDER BY curAlSe.idCursoAlumnoSesion, emp.nomEmpleado
        LIMIT IN_inicio, IN_cantidadPorPagina;

    ELSEIF IN_idSesion = 0 AND IN_idEmpleado != 0 THEN

       SET @temp_cantRegistros = (
        SELECT COUNT(cas.idCursoAlumnoSesion) 
        FROM cursoalumno_sesion cas
        INNER JOIN cursoAlumno ca ON (ca.idCursoAlumno = cas.idCursoAlumno)
        INNER JOIN empleado emp ON (emp.idEmpleado = ca.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
        WHERE cas.isActive = true );

        SELECT @temp_cantRegistros, curAlSe.idCursoAlumnoSesion, 
        DATE_FORMAT(curAlSe.fechaIni, "%d/%m/%Y") as fechaIni, 
        DATE_FORMAT(curAlSe.fechaFin, "%d/%m/%Y") as fechaFin, 
        curAlSe.horaIni, 
        curAlSe.horaFin, 
        curAlSe.asistencia, 
        curAlSe.participacion, 
        UPPER(se.nomSesion),
        curAl.idCursoAlumno,
        UPPER(emp.nomEmpleado) nomEmpleado
        FROM cursoalumno_sesion curAlSe
        INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
        INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAl.idCursoAlumno)
        INNER JOIN empleado emp ON (emp.idEmpleado = curAl.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
        WHERE curAlSe.isActive = true 
        ORDER BY curAlSe.idCursoAlumnoSesion ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;

    ELSEIF IN_idSesion != 0 AND IN_idEmpleado != 0 THEN

        SET @temp_cantRegistros = (
        SELECT COUNT(cas.idCursoAlumnoSesion) 
        FROM cursoalumno_sesion cas
        INNER JOIN cursoAlumno ca ON (ca.idCursoAlumno = cas.idCursoAlumno)
        INNER JOIN empleado emp ON (emp.idEmpleado = ca.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
        WHERE cas.isActive = true AND cas.idSesion = IN_idSesion );

        SELECT @temp_cantRegistros, curAlSe.idCursoAlumnoSesion, 
        DATE_FORMAT(curAlSe.fechaIni, "%d/%m/%Y") as fechaIni, 
        DATE_FORMAT(curAlSe.fechaFin, "%d/%m/%Y") as fechaFin, 
        curAlSe.horaIni, 
        curAlSe.horaFin, 
        curAlSe.asistencia, 
        curAlSe.participacion, 
        UPPER(se.nomSesion),
        curAl.idCursoAlumno,
        UPPER(emp.nomEmpleado) nomEmpleado
        FROM cursoalumno_sesion curAlSe
        INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
        INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAl.idCursoAlumno)
        INNER JOIN empleado emp ON (emp.idEmpleado = curAl.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
        WHERE curAlSe.isActive = true 
        AND curAlSe.idSesion = IN_idSesion
        ORDER BY curAlSe.idCursoAlumnoSesion, nomEmpleado
        LIMIT IN_inicio, IN_cantidadPorPagina;
    
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoCursos` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
SET @temp_cantRegistros = (SELECT COUNT(idCurso) FROM curso WHERE isActive = true);
SELECT @temp_cantRegistros, cur.idCurso, UPPER(cur.codCurso), UPPER(cur.nomCurso), UPPER(cur.tipoHH), cur.duracionCursoHH, cur.cantSesionesCurso 
FROM curso cur 
WHERE cur.isActive = true 
ORDER BY cur.nomCurso ASC 
LIMIT IN_inicio, IN_cantidadPorPagina;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEddEvalCompetencia` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT)   BEGIN
SET @temp_cantRegistros = (SELECT COUNT(idEDDEvalCompetencia) FROM eddevalcompetencia WHERE isActive = true);

SELECT @temp_cantRegistros, evalComp.idEDDEvalCompetencia, UPPER(evalComp.nomCompetencia) as nomCompetencia
FROM eddevalcompetencia evalComp
ORDER BY evalComp.nomCompetencia ASC 
LIMIT IN_inicio, IN_cantidadPorPagina;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEddEvalPregunta` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDEvalCompetencia` INT, IN `IN_idEDDEvalPregunta` INT)   BEGIN -- si todas son nulas
IF IN_idEDDEvaluacion = 0
AND IN_idEDDEvalCompetencia = 0
AND IN_idEDDEvalPregunta = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- si idEDDEvaluacion no es nulo    	
ELSEIF IN_idEDDEvaluacion != 0
AND IN_idEDDEvalCompetencia = 0
AND IN_idEDDEvalPregunta = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
            AND idEDDEvaluacion = IN_idEDDEvaluacion
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
    AND preg.idEDDEvaluacion = IN_idEDDEvaluacion
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- si idEDDEvalCompetencia no es nulo   
ELSEIF IN_idEDDEvaluacion = 0
AND IN_idEDDEvalCompetencia != 0
AND IN_idEDDEvalPregunta = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
            AND idEDDEvalCompetencia = IN_idEDDEvalCompetencia
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
    AND preg.idEDDEvalCompetencia = IN_idEDDEvalCompetencia
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;


-- si IN_idEDDEvalPregunta no es nulo   
ELSEIF IN_idEDDEvaluacion = 0
AND IN_idEDDEvalCompetencia = 0
AND IN_idEDDEvalPregunta != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
            AND idEDDEvalPregunta = IN_idEDDEvalPregunta
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
    AND preg.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;


-- si IN_idEDDEvaluacion y IN_idEDDEvalCompetencia no son nulas   
ELSEIF IN_idEDDEvaluacion != 0
AND IN_idEDDEvalCompetencia != 0
AND IN_idEDDEvalPregunta = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
            AND idEDDEvaluacion = IN_idEDDEvaluacion
            AND idEDDEvalCompetencia = IN_idEDDEvalCompetencia
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
    AND preg.idEDDEvaluacion = IN_idEDDEvaluacion
    AND preg.idEDDEvalCompetencia = IN_idEDDEvalCompetencia
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;


-- si IN_idEDDEvaluacion y IN_idEDDEvalCompetencia no son nulas   
ELSEIF IN_idEDDEvaluacion != 0
AND IN_idEDDEvalCompetencia = 0
AND IN_idEDDEvalPregunta != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
            AND idEDDEvaluacion = IN_idEDDEvaluacion
            AND idEDDEvalPregunta = IN_idEDDEvalPregunta
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
    AND preg.idEDDEvaluacion = IN_idEDDEvaluacion
    AND preg.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- si IN_idEDDEvalPregunta y IN_idEDDEvalCompetencia no son nulas   
ELSEIF IN_idEDDEvaluacion = 0
AND IN_idEDDEvalCompetencia != 0
AND IN_idEDDEvalPregunta != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
            AND idEDDEvalCompetencia = IN_idEDDEvalCompetencia
            AND idEDDEvalPregunta = IN_idEDDEvalPregunta
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
    AND preg.idEDDEvalCompetencia = IN_idEDDEvalCompetencia
    AND preg.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- si ninguna es nula  
ELSEIF IN_idEDDEvaluacion != 0
AND IN_idEDDEvalCompetencia != 0
AND IN_idEDDEvalPregunta != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEDDEvalPregunta)
        FROM
            eddevalpregunta
        WHERE
            isActive = true
            AND idEDDEvalCompetencia = IN_idEDDEvalCompetencia
            AND idEDDEvalPregunta = IN_idEDDEvalPregunta
            AND idEDDEvaluacion = IN_idEDDEvaluacion
    );

SELECT
    @temp_cantRegistros,
    preg.idEDDEvalPregunta,
    UPPER(preg.nomPregunta) as nomPregunta,
    preg.ordenPregunta,
    preg.idEDDEvaluacion,
    preg.idEDDEvalCompetencia,
    preg.tipoResp,
    IF(preg.preguntaObligatoria = 1, "SÍ", "NO") AS preguntaObligatoria,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    UPPER(comp.nomCompetencia) as nomCompetencia
FROM
    eddevalpregunta preg
    INNER JOIN eddevaluacion eval ON (preg.idEDDEvaluacion = eval.idEDDEvaluacion)
    LEFT JOIN eddevalcompetencia comp ON (
        preg.idEDDEvalCompetencia = comp.idEDDEvalCompetencia
    )
WHERE
    preg.isActive = true
    AND preg.idEDDEvalCompetencia = IN_idEDDEvalCompetencia
    AND preg.idEDDEvalPregunta = IN_idEDDEvalPregunta
    AND preg.idEDDEvaluacion = IN_idEDDEvaluacion
ORDER BY
    preg.nomPregunta,
    eval.nomEvaluacion,
    comp.nomCompetencia ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;


END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEddEvalProyEmp` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEDDEvaluacion` INT, IN `IN_idEmpleadoEvaluador` INT, IN `IN_idEmpleadoEvaluado` INT, IN `IN_idProyecto` INT, IN `IN_cicloEvaluacion` INT)   BEGIN
	-- Si ambas son cero
	 IF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (SELECT COUNT(idEDDEvalProyEmp) FROM eddevalproyemp WHERE isActive = true);
               
        SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida, 
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin,
			         FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,

               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion

               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina;
               
    -- Si idEvaluacion no es nulo
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (SELECT COUNT(idEDDEvalProyEmp) FROM eddevalproyemp WHERE isActive = true AND idEDDEvaluacion = IN_idEDDEvaluacion);
               
        SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida, 
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina;
               
  	-- Si IN_idEmpleadoEvaluador no es nulo
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
              SELECT COUNT(epe.idEDDEvalProyEmp) 
              FROM eddevalproyemp epe
              INNER JOIN eddproyemp proyEmpEvaluador ON (proyEmpEvaluador.idEDDProyEmp = epe.idEDDProyEmpEvaluador 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador 
                                                            AND proyEmpEvaluador.isActive = true)
              WHERE epe.isActive = true);
               
        SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina;

    -- Si IN_idEmpleadoEvaluado no es nulo
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
          SELECT COUNT(evalProyEmp.idEDDEvalProyEmp) 
          FROM eddevalproyemp evalProyEmp
          INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
          WHERE evalProyEmp.isActive = true );
               
        SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida, 
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina;
    
    -- Si IN_idProyecto no es nulo
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (SELECT COUNT(idEDDEvalProyEmp) FROM eddevalproyemp evalProyEmp
                                   INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
                                        INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
                                        WHERE 
                                        evalProyEmp.isActive = true 
                                        AND proyEmpEvaluador.idProyecto = IN_idProyecto 
                                        AND proyEmpEvaluado.idProyecto = IN_idProyecto
                                    );
               
        SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida, 
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               
               WHERE evalProyEmp.isActive = true 
               AND proyEmpEvaluador.idProyecto = IN_idProyecto 
               AND proyEmpEvaluado.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_cicloEvaluacion no es nulo
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN 
    
        SET @temp_cantRegistros = (SELECT COUNT(idEDDEvalProyEmp) FROM eddevalproyemp evalProyEmp WHERE cicloEvaluacion = IN_cicloEvaluacion AND isActive = 1);
               
        SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida, 
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    


    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluador no es nulo
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(epe.idEDDEvalProyEmp) 
            FROM eddevalproyemp epe
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador 
                                                        AND proyEmpEvaluador.isActive = true)
            WHERE epe.isActive = true 
            AND epe.idEDDEvaluacion = IN_idEDDEvaluacion);
               
        SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                            AND proyEmpEvaluador.isActive = true)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluado no es nulo
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(evalProyEmp.idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                      INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
            WHERE proyEmpEvaluado.isActive = true 
            AND proyEmpEvaluado.idEDDEvaluacion = IN_idEDDEvaluacion);
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEDDEvaluacion y IN_idProyecto no es nulo
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
             INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
             INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND proyEmpEvaluado.idProyecto = IN_idProyecto
            AND proyEmpEvaluador.idProyecto = IN_idProyecto);
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               AND proyEmpEvaluado.idProyecto = IN_idProyecto
               AND proyEmpEvaluador.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEDDEvaluacion y IN_cicloEvaluacion no es nulo
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
             INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
             INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    


    -- Si IN_idEmpleadoEvaluador y IN_idEmpleadoEvaluado no es nulo
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(epe.idEDDEvalProyEmp) 
            FROM eddevalproyemp epe
            INNER JOIN eddproyemp proyEmpEvaluador ON (epe.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
            INNER JOIN eddproyemp proyEmpEvaluado ON (epe.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)                                                        
            WHERE epe.isActive = true);
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                          AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                          AND proyEmpEvaluador.isActive = true)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp
                                                          AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                          AND proyEmpEvaluado.isActive = true)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEmpleadoEvaluador y IN_idProyecto no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
            WHERE evalProyEmp.isActive = true 
            AND proyEmpEvaluador.idProyecto = IN_idProyecto
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND proyEmpEvaluador.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEmpleadoEvaluador y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(evalProyEmp.idEDDEvalProyEmp) FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 

               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_idEmpleadoEvaluado y IN_idProyecto no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(evalProyEmp.idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
            WHERE evalProyEmp.isActive = true 
            AND proyEmpEvaluado.idProyecto = IN_idProyecto 
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND proyEmpEvaluado.idProyecto = IN_idProyecto 
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEmpleadoEvaluado y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(evalProyEmp.idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)           
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion 
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion 
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_idProyecto y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND proyEmpEvaluador.idProyecto = IN_idProyecto
            AND proyEmpEvaluado.idProyecto = IN_idProyecto
            
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
                AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
                AND proyEmpEvaluador.idProyecto = IN_idProyecto
                AND proyEmpEvaluado.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    
    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluador y IN_idEmpleadoEvaluado no son nulas
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
            INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
                INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)                
                INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
                INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
                INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
                AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_cicloEvaluacion y IN_idEmpleadoEvaluador y IN_idEmpleadoEvaluado no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
            INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
                INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)                
                INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
                INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
                INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
                AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_idEmpleadoEvaluador y IN_idEmpleadoEvaluado y IN_idProyecto no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion = 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(evalProyEmp.idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                            AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
            INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)           
            WHERE evalProyEmp.isActive = true 
            AND proyEmpEvaluado.idProyecto = IN_idProyecto 
            AND proyEmpEvaluador.idProyecto = IN_idProyecto
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp
                                                         AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND proyEmpEvaluado.idProyecto = IN_idProyecto 
               AND proyEmpEvaluador.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_idEmpleadoEvaluado y IN_idProyecto y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
            INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)            
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND proyEmpEvaluado.idProyecto = IN_idProyecto
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               AND proyEmpEvaluado.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_idEDDEvaluacion y IN_idProyecto y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND proyEmpEvaluado.idProyecto = IN_idProyecto
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               AND proyEmpEvaluado.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluador y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp
                                                         AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp
                                                         AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    
    
    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluador y IN_idEmpleadoEvaluado y IN_idProyecto no son nulas
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion = 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp
                                                           AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
            INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)           
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND proyEmpEvaluador.idProyecto = IN_idProyecto
            AND proyEmpEvaluado.idProyecto = IN_idProyecto
            
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp
                                                         AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               AND proyEmpEvaluador.idProyecto = IN_idProyecto
               AND proyEmpEvaluado.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
    
    -- Si IN_idEmpleadoEvaluador y IN_idEmpleadoEvaluado y IN_idProyecto y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion = 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)            
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND proyEmpEvaluador.idProyecto = IN_idProyecto
            AND proyEmpEvaluado.idProyecto = IN_idProyecto
            
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
                AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
                AND proyEmpEvaluador.idProyecto = IN_idProyecto
                AND proyEmpEvaluado.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluado y IN_idProyecto y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador = 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
                INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)            
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND proyEmpEvaluado.idProyecto = IN_idProyecto
            
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
                INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
                AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
                AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
                AND proyEmpEvaluado.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluador y IN_idProyecto y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado = 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
                INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND proyEmpEvaluador.idProyecto = IN_idProyecto
            
            
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp)
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               AND proyEmpEvaluador.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 

    -- Si IN_idEDDEvaluacion y IN_idEmpleadoEvaluador y IN_idEmpleadoEvaluado y IN_cicloEvaluacion no son nulas
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN  
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
            INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
            INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)            
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 


    -- Si ninguna es nula
    ELSEIF IN_idEDDEvaluacion != 0 AND IN_idEmpleadoEvaluador != 0 AND IN_idEmpleadoEvaluado != 0 AND IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN 
    
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalProyEmp) 
            FROM eddevalproyemp evalProyEmp
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
            INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)            
            WHERE evalProyEmp.isActive = true 
            AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
            AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
            AND proyEmpEvaluado.idProyecto = IN_idProyecto 
            AND proyEmpEvaluador.idProyecto = IN_idProyecto
            );
               
              SELECT @temp_cantRegistros,
               evalProyEmp.idEDDEvalProyEmp, 
               evalProyEmp.idEDDEvaluacion, 
               evalProyEmp.idEDDProyEmpEvaluador, 
               evalProyEmp.idEDDProyEmpEvaluado, 
               UPPER(proyEmpEvaluador.cargoEnProy) cargoEnProy,
               IF(evalProyEmp.evalRespondida = 1, "SÍ", "NO") as evalRespondida,
               DATE_FORMAT(evalProyEmp.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaIni, 
               DATE_FORMAT(evalProyEmp.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFin, 
               FN_tiempoPromedio(evalProyEmp.fechaIni, evalproyEmp.fechaFin) as tiempoTotalEnMin,
               UPPER(eval.nomEvaluacion) as nomEvaluacion,
               UPPER(proy.nomProyecto) as nomProyecto,
               proy.idEDDProyecto,
               UPPER(empEvaluador.nomEmpleado) as nomEmpleadoEvaluador,
               UPPER(empEvaluado.nomEmpleado) as nomEmpleadoEvaluado,
               DATE_FORMAT(eval.fechaIni, "%d/%m/%Y %H:%i:%s") as fechaInicioPeriodoEvaluacion,
               DATE_FORMAT(eval.fechaFin, "%d/%m/%Y %H:%i:%s") as fechaFinPeriodoEvaluacion,
               IF(eval.fechaIni < now() AND eval.fechaFin > now(), 1, 0) as disponibilidadEvaluacion,
               
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalRef, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalRef,
               evalProyEmp.diasVigenciaEvalRef,
               IF(evalProyEmp.CorreoLinkEnviadoRef = 1, "SÍ", "NO") as CorreoLinkEnviadoRef,
               DATE_FORMAT(evalProyEmp.fechaIniVigenciaEvalColab, "%d/%m/%Y %H:%i:%s") as fechaIniVigenciaEvalColab,
               evalProyEmp.diasVigenciaEvalRefColab,
               IF(evalProyEmp.CorreoLinkEnviadoColab = 1, "SÍ", "NO") as CorreoLinkEnviadoColab,
               evalProyEmp.cicloEvaluacion
               
               FROM eddevalproyemp evalProyEmp
               INNER JOIN eddevaluacion eval ON (evalProyEmp.idEDDEvaluacion = eval.idEDDEvaluacion)
               INNER JOIN eddproyemp proyEmpEvaluador ON (evalProyEmp.idEDDProyEmpEvaluador = proyEmpEvaluador.idEDDProyEmp 
                                                        AND proyEmpEvaluador.idEmpleado = IN_idEmpleadoEvaluador
                                                        AND proyEmpEvaluador.isActive = true)
               INNER JOIN eddproyemp proyEmpEvaluado ON (evalProyEmp.idEDDProyEmpEvaluado = proyEmpEvaluado.idEDDProyEmp 
                                                        AND proyEmpEvaluado.idEmpleado = IN_idEmpleadoEvaluado
                                                        AND proyEmpEvaluado.isActive = true)               
               INNER JOIN eddproyecto proy ON (proyEmpEvaluador.idProyecto = proy.idEDDProyecto)
               INNER JOIN empleado empEvaluador ON (proyEmpEvaluador.idEmpleado = empEvaluador.idEmpleado)
               INNER JOIN empleado empEvaluado ON (proyEmpEvaluado.idEmpleado = empEvaluado.idEmpleado)
               WHERE evalProyEmp.isActive = true 
               AND evalProyEmp.idEDDEvaluacion = IN_idEDDEvaluacion
               AND evalProyEmp.cicloEvaluacion = IN_cicloEvaluacion
               AND proyEmpEvaluado.idProyecto = IN_idProyecto 
               AND proyEmpEvaluador.idProyecto = IN_idProyecto
               ORDER BY eval.nomEvaluacion ASC
               LIMIT IN_inicio, IN_cantidadPorPagina; 
               
        END IF;
        
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEddEvalProyResp` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEDDEvaluacion` INT, IN `IN_idEDDProyEmp` INT, IN `IN_idEDDEvalProyEmp` INT, IN `IN_idEDDEvalPregunta` INT, IN `IN_idEDDEvalRespPreg` INT)   BEGIN 

CASE
  -- CUANDO TODAS LAS VARIABLES SON NULAS
  WHEN IN_idEDDEvaluacion = 0
  AND IN_idEDDProyEmp = 0
  AND IN_idEDDEvalProyEmp = 0
  AND IN_idEDDEvalPregunta = 0
  AND IN_idEDDEvalRespPreg = 0 THEN
  SET
    @temp_cantRegistros = (
      SELECT
        COUNT(idEDDEvalProyResp)
      FROM
        eddevalproyresp
      WHERE
        isActive = true
    );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvaluacion no es nula
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDProyEmp no es nula
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDProyEmp = IN_idEDDProyEmp
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvalProyEmp no es nula
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvalPregunta no es nula
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvalRespPreg no es nula
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvaluacion y idEDDProyEmpy no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmpy = IN_idEDDProyEmp
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmpy = IN_idEDDProyEmp
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvaluacion y idEDDEvalProyEmp no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvaluacion y idEDDEvalPregunta no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp

    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
  FROM eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDProyEmp y idEDDEvalProyEmp no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDProyEmp y idEDDEvalPregunta no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDProyEmp y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvalProyEmp y idEDDEvalPregunta no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvalProyEmp y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


-- CUANDO idEDDEvalPregunta y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDProyEmp y idEDDEvalProyEmp no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDProyEmp y idEDDEvalPregunta no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDProyEmp y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDProyEmp y idEDDEvalProyEmp y idEDDEvalPregunta no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDProyEmp y idEDDEvalProyEmp y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvalProyEmp y idEDDEvalPregunta y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;
  
-- CUANDO idEDDEvalProyEmp y idEDDEvalPregunta y idEDDEvaluacion no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvaluacion = IN_idEDDEvaluacion
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvalPregunta y idEDDEvalRespPreg y idEDDProyEmp no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
      AND idEDDProyEmp = IN_idEDDProyEmp
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvalPregunta y idEDDEvalRespPreg y idEDDEvaluacion no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
      AND idEDDEvaluacion = IN_idEDDEvaluacion
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDProyEmp y idEDDEvalProyEmp y idEDDEvalPregunta no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg = 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDProyEmp y idEDDEvalProyEmp y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta = 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDProyEmp y idEDDEvalPregunta y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp = 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;

-- CUANDO idEDDEvaluacion y idEDDEvalProyEmp y idEDDEvalPregunta y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp = 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;


 -- CUANDO idEDDProyEmp y idEDDEvalProyEmp y idEDDEvalPregunta y idEDDEvalRespPreg no son nulos
WHEN IN_idEDDEvaluacion = 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;
 
 -- CUANDO NINGUNA ES NULA
WHEN IN_idEDDEvaluacion != 0
AND IN_idEDDProyEmp != 0
AND IN_idEDDEvalProyEmp != 0
AND IN_idEDDEvalPregunta != 0
AND IN_idEDDEvalRespPreg != 0 THEN
SET
  @temp_cantRegistros = (
    SELECT
      COUNT(idEDDEvalProyResp)
    FROM
      eddevalproyresp
    WHERE
      isActive = true
      AND idEDDEvaluacion = IN_idEDDEvaluacion
      AND idEDDProyEmp = IN_idEDDProyEmp
      AND idEDDEvalProyEmp = IN_idEDDEvalProyEmp
      AND idEDDEvalPregunta = IN_idEDDEvalPregunta
      AND idEDDEvalRespPreg = IN_idEDDEvalRespPreg
  );


SELECT
  @temp_cantRegistros,
  proyResp.idEDDEvalProyResp,
  proyResp.idEDDEvaluacion,
  proyResp.idEDDProyEmp,
  UPPER(proyResp.respuesta) as respuesta,
  proyResp.idEDDEvalProyEmp,
  proyResp.idEDDEvalPregunta,
  proyResp.idEDDEvalRespPreg,
  UPPER(eval.nomEvaluacion) as nomEvaluacion,
  UPPER(evalPregunta.nomPregunta) as nomPregunta,
  UPPER(evalRespPreg.nomRespPreg) as nomRespPreg,
  UPPER(proy.nomProyecto) as nomProyecto,
  UPPER(emp.nomEmpleado) as nomEmpleado
FROM
  eddevalproyresp proyResp
  INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
  INNER JOIN eddproyemp proyEmp ON (proyResp.idEDDProyEmp = proyEmp.idEDDProyEmp)
  INNER JOIN eddproyecto proy ON (proy.idEDDProyecto = proyEmp.idProyecto)
  INNER JOIN empleado emp ON (emp.idEmpleado = proyEmp.idEmpleado)  
  INNER JOIN eddevalproyemp evalProyEmp ON (
    proyResp.idEDDEvalProyEmp = evalProyEmp.idEDDEvalProyEmp
  )
  INNER JOIN eddevalpregunta evalPregunta ON (
    proyResp.idEDDEvalPregunta = evalPregunta.idEDDEvalPregunta
  )
  INNER JOIN eddevalresppreg evalRespPreg ON (
    proyResp.idEDDEvalRespPreg = evalRespPreg.idEDDEvalRespPreg
  )
WHERE
  proyResp.isActive = true
  AND proyResp.idEDDEvaluacion = IN_idEDDEvaluacion
  AND proyResp.idEDDProyEmp = IN_idEDDProyEmp
  AND proyResp.idEDDEvalProyEmp = IN_idEDDEvalProyEmp
  AND proyResp.idEDDEvalPregunta = IN_idEDDEvalPregunta
  AND proyResp.idEDDEvalRespPreg = IN_idEDDEvalRespPreg
ORDER BY
  eval.nomEvaluacion ASC
LIMIT
  IN_inicio, IN_cantidadPorPagina;



END CASE
;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEddEvalRespPreg` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEDDEvalPregunta` INT, IN `IN_idEvaluacion` INT)   BEGIN
	-- Si son nulas
	IF IN_idEDDEvalPregunta = 0 AND IN_idEvaluacion = 0 THEN 
        SET @temp_cantRegistros = (SELECT COUNT(idEDDEvalRespPreg) FROM eddevalresppreg WHERE isActive = true);
        
        SELECT @temp_cantRegistros, respPreg.idEDDEvalRespPreg, UPPER(respPreg.nomRespPreg) as nomRespPreg, respPreg.ordenRespPreg, respPreg.idEDDEvalPregunta, UPPER(evaPreg.nomPregunta) as nomPregunta, UPPER(eval.nomEvaluacion) as nomEvaluacion
        FROM eddevalresppreg respPreg
        INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
        INNER JOIN eddevaluacion eval ON (evaPreg.idEDDEvaluacion = eval.idEDDEvaluacion)
        WHERE respPreg.isActive = true
        ORDER BY respPreg.nomRespPreg ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    -- si pregunta no es nula    
    	ELSEIF IN_idEDDEvalPregunta != 0 AND IN_idEvaluacion = 0 THEN
        
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalRespPreg) 
            FROM eddevalresppreg
            WHERE isActive = true 
            AND idEDDEvalPregunta = IN_idEDDEvalPregunta);
        
        SELECT @temp_cantRegistros, respPreg.idEDDEvalRespPreg, UPPER(respPreg.nomRespPreg) as nomRespPreg, respPreg.ordenRespPreg, respPreg.idEDDEvalPregunta, UPPER(evaPreg.nomPregunta) as nomPregunta, UPPER(eval.nomEvaluacion) as nomEvaluacion
        FROM eddevalresppreg respPreg
        INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
        INNER JOIN eddevaluacion eval ON (evaPreg.idEDDEvaluacion = eval.idEDDEvaluacion)
        WHERE respPreg.isActive = true AND respPreg.idEDDEvalPregunta = IN_idEDDEvalPregunta
        ORDER BY respPreg.nomRespPreg ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
        
     -- Si evaluacion no es nula   
     
        ELSEIF IN_idEDDEvalPregunta = 0 AND IN_idEvaluacion != 0 THEN
        
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalRespPreg) 
            FROM eddevalresppreg respPreg
            INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
        	INNER JOIN eddevaluacion eval ON (evaPreg.idEDDEvaluacion = eval.idEDDEvaluacion)
            WHERE respPreg.isActive = true 
            AND eval.idEDDEvaluacion = IN_idEvaluacion);
        
        SELECT @temp_cantRegistros, respPreg.idEDDEvalRespPreg, UPPER(respPreg.nomRespPreg) as nomRespPreg, respPreg.ordenRespPreg, respPreg.idEDDEvalPregunta, UPPER(evaPreg.nomPregunta) as nomPregunta, UPPER(eval.nomEvaluacion) as nomEvaluacion
        FROM eddevalresppreg respPreg
        INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
        INNER JOIN eddevaluacion eval ON (evaPreg.idEDDEvaluacion = eval.idEDDEvaluacion)
        WHERE respPreg.isActive = true AND eval.idEDDEvaluacion = IN_idEvaluacion
        ORDER BY respPreg.nomRespPreg ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
        
        -- Si ninguna es nula   
     
        ELSEIF IN_idEDDEvalPregunta != 0 AND IN_idEvaluacion != 0 THEN
        
        SET @temp_cantRegistros = (
            SELECT COUNT(idEDDEvalRespPreg) 
            FROM eddevalresppreg respPreg
            INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
        	INNER JOIN eddevaluacion eval ON (evaPreg.idEDDEvaluacion = eval.idEDDEvaluacion)
            WHERE respPreg.isActive = true 
            AND eval.idEDDEvaluacion = IN_idEvaluacion
            AND evaPreg.idEDDEvalPregunta = IN_idEDDEvalPregunta
        );
        
        SELECT @temp_cantRegistros, respPreg.idEDDEvalRespPreg, UPPER(respPreg.nomRespPreg) as nomRespPreg, respPreg.ordenRespPreg, respPreg.idEDDEvalPregunta, UPPER(evaPreg.nomPregunta) as nomPregunta, UPPER(eval.nomEvaluacion) as nomEvaluacion
        FROM eddevalresppreg respPreg
        INNER JOIN eddevalpregunta evaPreg ON (respPreg.idEDDEvalPregunta = evaPreg.idEDDEvalPregunta)
        INNER JOIN eddevaluacion eval ON (evaPreg.idEDDEvaluacion = eval.idEDDEvaluacion)
        WHERE respPreg.isActive = true 
        AND eval.idEDDEvaluacion = IN_idEvaluacion 
        AND evaPreg.idEDDEvalPregunta = IN_idEDDEvalPregunta
        ORDER BY respPreg.nomRespPreg ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
        
        END IF;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEddEvaluacion` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEDDEvaluacion` INT)   BEGIN
    IF IN_idEDDEvaluacion = 0 THEN
    SET @temp_cantRegistros = (SELECT COUNT(idEDDEvaluacion) FROM eddevaluacion WHERE isActive = true);
 
    SELECT @temp_cantRegistros,
    idEDDEvaluacion,
    UPPER(nomEvaluacion) as nomEvaluacion, 
    UPPER(descFormulario) as descFormulario, 
    UPPER(tipoEvaluacion) as tipoEvaluacion, 
    DATE_FORMAT(fechaIni, "%d/%m/%Y") as fechaIni,
    DATE_FORMAT(fechaFin, "%d/%m/%Y") as fechaFin,
    IF(fechaIni < now() AND fechaFin > now(), 'SÍ', 'NO') as disponibilidadEvaluacion
    FROM eddevaluacion
    WHERE isActive = true
    ORDER BY nomEvaluacion ASC 
    LIMIT IN_inicio, IN_cantidadPorPagina;
    ELSE
    SET @temp_cantRegistros = (SELECT COUNT(idEDDEvaluacion) FROM eddevaluacion WHERE isActive = true AND idEDDEvaluacion = IN_idEDDEvaluacion);
 
    SELECT @temp_cantRegistros,
    idEDDEvaluacion,
    UPPER(nomEvaluacion) as nomEvaluacion, 
    UPPER(descFormulario) as descFormulario, 
    UPPER(tipoEvaluacion) as tipoEvaluacion, 
    DATE_FORMAT(fechaIni, "%d/%m/%Y") as fechaIni,
    DATE_FORMAT(fechaFin, "%d/%m/%Y") as fechaFin,
    IF(fechaIni < now() AND fechaFin > now(), 'SÍ', 'NO') as disponibilidadEvaluacion
    FROM eddevaluacion
    WHERE isActive = true
    AND
    idEDDEvaluacion = IN_idEDDEvaluacion
    ORDER BY nomEvaluacion ASC 
    LIMIT IN_inicio, IN_cantidadPorPagina;
   END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEDDProyecto` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idServicio` INT)   BEGIN

	IF IN_idServicio IS NULL OR IN_idServicio = 0 THEN 
    
        SET @temp_cantRegistros = (SELECT COUNT(idEDDProyecto) FROM eddproyecto WHERE isActive = true);
        
        SELECT @temp_cantRegistros, 
        proy.idEDDProyecto, 
        UPPER(proy.nomProyecto) as nomProyecto, 
        DATE_FORMAT(fechaInicio, "%d/%m/%Y") as fechaIni,
        DATE_FORMAT(fechaFin, "%d/%m/%Y") as fechaFin, 
        UPPER(serv.nomServicio) as nomServicio, 
        UPPER(proy.tipoProyecto) tipoProyecto
        FROM eddproyecto proy
        INNER JOIN servicio serv ON (proy.idServicio = serv.idServicio)
        WHERE proy.isActive = true
        ORDER BY proy.nomProyecto, serv.nomServicio ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    	ELSE
        
      SET @temp_cantRegistros = (SELECT COUNT(idEDDProyecto) FROM eddproyecto WHERE isActive = true AND idServicio = IN_idServicio);
        
        SELECT 
        @temp_cantRegistros, 
        proy.idEDDProyecto, 
        UPPER(proy.nomProyecto) as nomProyecto, 
        DATE_FORMAT(fechaInicio, "%d/%m/%Y") as fechaIni, 
        DATE_FORMAT(fechaFin, "%d/%m/%Y") as fechaFin, 
        UPPER(serv.nomServicio) as nomServicio,
        UPPER(proy.tipoProyecto) tipoProyecto
        FROM eddproyecto proy
        INNER JOIN servicio serv ON (proy.idServicio = serv.idServicio)
        WHERE proy.isActive = true AND proy.idServicio = IN_idServicio
        ORDER BY proy.nomProyecto, serv.nomServicio ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
        END IF;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEDDProyEmp` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idProyecto` INT, IN `IN_idEmpleado` INT)   BEGIN
	-- Si ambas son cero
	IF IN_idProyecto = 0 AND IN_idEmpleado = 0 THEN 
    
        SET @temp_cantRegistros = (SELECT COUNT(idEDDProyEmp) FROM eddproyemp WHERE isActive = true);
        
        SELECT @temp_cantRegistros,
        proyEmp.idProyecto,
        proyEmp.idEDDProyEmp,
        proyEmp.idEmpleado,
        UPPER(proy.nomProyecto) as nomProyecto, 
        UPPER(emp.nomEmpleado) as nomEmpleado, 
        UPPER(proyEmp.cargoEnProy) as cargoEnProy
        FROM eddproyemp proyEmp
        INNER JOIN eddproyecto proy ON (proyEmp.idProyecto = proy.idEDDProyecto)
        INNER JOIN empleado emp ON (proyEmp.idEmpleado = emp.idEmpleado)
        WHERE proyEmp.isActive = true
        ORDER BY proy.nomProyecto, emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    -- Si proyecto no es nulo    
    	ELSEIF IN_idProyecto != 0 AND IN_idEmpleado = 0 THEN
        
       SET @temp_cantRegistros = (SELECT COUNT(idEDDProyEmp) FROM eddproyemp WHERE isActive = true AND idProyecto = IN_idProyecto);
        
        SELECT @temp_cantRegistros, 
        proyEmp.idProyecto,
        proyEmp.idEmpleado,
        proyEmp.idEDDProyEmp,
        UPPER(proy.nomProyecto) as nomProyecto,
        UPPER(emp.nomEmpleado) as nomEmpleado,
        UPPER(proyEmp.cargoEnProy) as cargoEnProy
        FROM eddproyemp proyEmp
        INNER JOIN eddproyecto proy ON (proyEmp.idProyecto = proy.idEDDProyecto)
        INNER JOIN empleado emp ON (proyEmp.idEmpleado = emp.idEmpleado)
        WHERE proyEmp.isActive = true AND proyEmp.idProyecto = IN_idProyecto
        ORDER BY proy.nomProyecto, emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
     -- Si empleado no es nulo    
    	ELSEIF IN_idProyecto = 0 AND IN_idEmpleado != 0 THEN
        
       SET @temp_cantRegistros = (SELECT COUNT(idEDDProyEmp) FROM eddproyemp WHERE isActive = true AND idEmpleado = IN_idEmpleado);
        
        SELECT @temp_cantRegistros, 
        proyEmp.idProyecto, 
        proyEmp.idEmpleado,
        proyEmp.idEDDProyEmp, 
        UPPER(proy.nomProyecto) as nomProyecto, 
        UPPER(emp.nomEmpleado) as nomEmpleado, 
        UPPER(proyEmp.cargoEnProy) as cargoEnProy
        FROM eddproyemp proyEmp
        INNER JOIN eddproyecto proy ON (proyEmp.idProyecto = proy.idEDDProyecto)
        INNER JOIN empleado emp ON (proyEmp.idEmpleado = emp.idEmpleado)
        WHERE proyEmp.isActive = true AND proyEmp.idEmpleado = IN_idEmpleado
        ORDER BY proy.nomProyecto, emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;   
        
        -- Si ninguna es nula  
    	ELSEIF IN_idProyecto != 0 AND IN_idEmpleado != 0 THEN
        
       SET @temp_cantRegistros = (SELECT COUNT(idEDDProyEmp) FROM eddproyemp WHERE isActive = true AND idEmpleado = IN_idEmpleado AND idProyecto = IN_idProyecto );
        
        SELECT @temp_cantRegistros, 
        proyEmp.idProyecto, 
        proyEmp.idEmpleado,
        proyEmp.idEDDProyEmp,
        UPPER(proy.nomProyecto) as nomProyecto,
        UPPER(emp.nomEmpleado) as nomEmpleado,
        UPPER(proyEmp.cargoEnProy) as cargoEnProy
        FROM eddproyemp proyEmp
        INNER JOIN eddproyecto proy ON (proyEmp.idProyecto = proy.idEDDProyecto)
        INNER JOIN empleado emp ON (proyEmp.idEmpleado = emp.idEmpleado)
        WHERE proyEmp.isActive = true AND proyEmp.idEmpleado = IN_idEmpleado AND proyEmp.idProyecto = IN_idProyecto
        ORDER BY proy.nomProyecto, emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;   
        END IF;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEddResumenEval` (IN `IN_idCliente` INT, IN `IN_idServicio` INT, IN `IN_idProyecto` INT, IN `IN_cicloEvaluacion` INT, IN `IN_fechaIni` DATE, IN `IN_fechaFin` DATE, IN `IN_cargoEnProy` VARCHAR(30), OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(200))   BEGIN
        IF IN_idCliente < 0 THEN
            SET OUT_CODRESULT = '01';
            SET OUT_MJERESULT = 'El id del cliente no puede ser menor a cero';
            SELECT OUT_CODRESULT, OUT_MJERESULT;
        ELSEIF IN_idServicio < 0 THEN
            SET OUT_CODRESULT = '02';
            SET OUT_MJERESULT = 'El id del servicio no puede ser menor a cero';
            SELECT OUT_CODRESULT, OUT_MJERESULT;
        ELSEIF IN_fechaIni = IN_fechaFin THEN
            SET OUT_CODRESULT = '03';
            SET OUT_MJERESULT = 'Las fechas no pueden ser iguales';
            SELECT OUT_CODRESULT, OUT_MJERESULT;
    
        ELSE

            IF IN_idProyecto = 0 AND IN_cicloEvaluacion = 0 THEN

                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Operación exitosa.';
                SELECT
                OUT_CODRESULT,
                OUT_MJERESULT,
                cli.idCliente,
                UPPER(cli.nomCliente) nomCliente,
                ser.idServicio,
                UPPER(ser.nomServicio) nomServicio,
                proy.idEDDProyecto,
                UPPER(proy.nomProyecto) nomProyecto,
                pe.idEDDProyEmp,
                epe.idEDDEvalProyEmp,
                DATE_FORMAT(proy.fechaInicio, "%m/%Y") as proyFechaIni, 
                IF(proy.fechaFin IS NOT NULL, DATE_FORMAT(proy.fechaFin, "%m/%Y"), 'Indefinida') as proyFechaFin,
                IF(proy.fechaFin IS NOT NULL, IF(proy.fechaInicio < CURDATE() AND proy.fechaFin > CURDATE(),"Activo", "Inactivo"),"Activo") estadoProyecto,
                SUM(IF(pe.cargoEnProy = IN_cargoEnProy, 1, 0)) as cantEmpleados,
                SUM(IF(epe.evalRespondida = 1, 1, 0)) as cantEvalRespondidas,
                epe.cicloEvaluacion,
                DATE_FORMAT(epe.fechaIniVigenciaEvalRef, "%m/%Y") as fechaIniVigenciaEvalRef, 
                DATE_FORMAT(epe.fechaIniVigenciaEvalColab, "%m/%Y") as fechaIniVigenciaEvalColab
                FROM eddproyemp pe
                INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                INNER JOIN eddevalproyemp epe ON (epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.idProyecto = proy.idEDDProyecto AND pe.cargoEnProy = IN_cargoEnProy AND pe.isActive = 1 AND epe.isActive = 1)
                WHERE proy.fechaInicio BETWEEN IN_fechaIni AND IN_fechaFin
                GROUP BY epe.cicloEvaluacion, pe.idProyecto
                ORDER BY cli.nomCliente, ser.nomServicio, proy.nomProyecto, epe.cicloEvaluacion;

            ELSEIF IN_idProyecto != 0 AND IN_cicloEvaluacion = 0 THEN

                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Operación exitosa.';
                  SELECT
                  OUT_CODRESULT,
                  OUT_MJERESULT,
                  cli.idCliente,
                  UPPER(cli.nomCliente) nomCliente,
                  ser.idServicio,
                  UPPER(ser.nomServicio) nomServicio,
                  proy.idEDDProyecto,
                  UPPER(proy.nomProyecto) nomProyecto,
                  pe.idEDDProyEmp,
                  epe.idEDDEvalProyEmp,
                  DATE_FORMAT(proy.fechaInicio, "%m/%Y") as proyFechaIni, 
                  IF(proy.fechaFin IS NOT NULL, DATE_FORMAT(proy.fechaFin, "%m/%Y"), 'Indefinida') as proyFechaFin,
                  IF(proy.fechaFin IS NOT NULL, IF(proy.fechaInicio < CURDATE() AND proy.fechaFin > CURDATE(),"Activo", "Inactivo"),"Activo") estadoProyecto,
                  SUM(IF(pe.cargoEnProy = IN_cargoEnProy, 1, 0)) as cantEmpleados,
                  SUM(IF(epe.evalRespondida = 1, 1, 0)) as cantEvalRespondidas,
                  epe.cicloEvaluacion,
                  DATE_FORMAT(epe.fechaIniVigenciaEvalRef, "%m/%Y") as fechaIniVigenciaEvalRef, 
                  DATE_FORMAT(epe.fechaIniVigenciaEvalColab, "%m/%Y") as fechaIniVigenciaEvalColab
                  FROM eddproyemp pe
                  INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                  INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                  INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                  INNER JOIN eddevalproyemp epe ON (epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.idProyecto = proy.idEDDProyecto AND pe.cargoEnProy = IN_cargoEnProy AND pe.isActive = 1 AND epe.isActive = 1)
                  WHERE proy.fechaInicio BETWEEN IN_fechaIni AND IN_fechaFin

                  GROUP BY epe.cicloEvaluacion, pe.idProyecto
                  ORDER BY cli.nomCliente, ser.nomServicio, proy.nomProyecto, epe.cicloEvaluacion;

            ELSEIF IN_idProyecto = 0 AND IN_cicloEvaluacion != 0 THEN
            
                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Operación exitosa.';
                SELECT
                OUT_CODRESULT,
                OUT_MJERESULT,
                cli.idCliente,
                UPPER(cli.nomCliente) nomCliente,
                ser.idServicio,
                UPPER(ser.nomServicio) nomServicio,
                proy.idEDDProyecto,
                UPPER(proy.nomProyecto) nomProyecto,
                pe.idEDDProyEmp,
                epe.idEDDEvalProyEmp,
                DATE_FORMAT(proy.fechaInicio, "%m/%Y") as proyFechaIni, 
                IF(proy.fechaFin IS NOT NULL, DATE_FORMAT(proy.fechaFin, "%m/%Y"), 'Indefinida') as proyFechaFin,
                IF(proy.fechaFin IS NOT NULL, IF(proy.fechaInicio < CURDATE() AND proy.fechaFin > CURDATE(),"Activo", "Inactivo"),"Activo") estadoProyecto,
                SUM(IF(pe.cargoEnProy = IN_cargoEnProy, 1, 0)) as cantEmpleados,
                SUM(IF(epe.evalRespondida = 1, 1, 0)) as cantEvalRespondidas,
                epe.cicloEvaluacion,
                DATE_FORMAT(epe.fechaIniVigenciaEvalRef, "%m/%Y") as fechaIniVigenciaEvalRef, 
                DATE_FORMAT(epe.fechaIniVigenciaEvalColab, "%m/%Y") as fechaIniVigenciaEvalColab
                FROM eddproyemp pe
                INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                INNER JOIN eddproyecto proy ON (proy.idServicio = ser.idServicio AND proy.isActive = 1)
                INNER JOIN eddevalproyemp epe ON (epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.idProyecto = proy.idEDDProyecto AND epe.cicloEvaluacion = IN_cicloEvaluacion AND pe.cargoEnProy = IN_cargoEnProy AND pe.isActive = 1 AND epe.isActive = 1)
                WHERE proy.fechaInicio BETWEEN IN_fechaIni AND IN_fechaFin
                GROUP BY epe.cicloEvaluacion, pe.idProyecto
                ORDER BY cli.nomCliente, ser.nomServicio, proy.nomProyecto, epe.cicloEvaluacion;

            ELSEIF IN_idProyecto != 0 AND IN_cicloEvaluacion != 0 THEN

                SET OUT_CODRESULT = '00';
                SET OUT_MJERESULT = 'Operación exitosa.';
                SELECT
                OUT_CODRESULT,
                OUT_MJERESULT,
                cli.idCliente,
                UPPER(cli.nomCliente) nomCliente,
                ser.idServicio,
                UPPER(ser.nomServicio) nomServicio,
                proy.idEDDProyecto,
                UPPER(proy.nomProyecto) nomProyecto,
                pe.idEDDProyEmp,
                epe.idEDDEvalProyEmp,
                DATE_FORMAT(proy.fechaInicio, "%m/%Y") as proyFechaIni, 
                IF(proy.fechaFin IS NOT NULL, DATE_FORMAT(proy.fechaFin, "%m/%Y"), 'Indefinida') as proyFechaFin,
                IF(proy.fechaFin IS NOT NULL, IF(proy.fechaInicio < CURDATE() AND proy.fechaFin > CURDATE(),"Activo", "Inactivo"),"Activo") estadoProyecto,
                SUM(IF(pe.cargoEnProy = IN_cargoEnProy, 1, 0)) as cantEmpleados,
                SUM(IF(epe.evalRespondida = 1, 1, 0)) as cantEvalRespondidas,
                epe.cicloEvaluacion,
                DATE_FORMAT(epe.fechaIniVigenciaEvalRef, "%m/%Y") as fechaIniVigenciaEvalRef, 
                DATE_FORMAT(epe.fechaIniVigenciaEvalColab, "%m/%Y") as fechaIniVigenciaEvalColab
                FROM eddproyemp pe
                INNER JOIN cliente cli ON (FIND_IN_SET (cli.idCliente , IN_idCliente) AND cli.isActive = 1)
                INNER JOIN servicio ser ON (FIND_IN_SET (ser.idServicio , IN_idServicio) AND ser.idCliente = cli.idCliente AND ser.isActive = 1)
                INNER JOIN eddproyecto proy ON (FIND_IN_SET (proy.idEDDProyecto , IN_idProyecto) AND proy.idServicio = ser.idServicio AND proy.isActive = 1)
                INNER JOIN eddevalproyemp epe ON (epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp AND pe.idProyecto = proy.idEDDProyecto AND epe.cicloEvaluacion = IN_cicloEvaluacion AND pe.cargoEnProy = IN_cargoEnProy AND pe.isActive = 1 AND epe.isActive = 1)
                WHERE proy.fechaInicio BETWEEN IN_fechaIni AND IN_fechaFin
                GROUP BY epe.cicloEvaluacion, pe.idProyecto
                ORDER BY cli.nomCliente, ser.nomServicio, proy.nomProyecto, epe.cicloEvaluacion;

            END IF;
        END IF;	
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEmpleados` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idPais` INT, IN `IN_idArea` INT, IN `IN_idCargo` INT, IN `IN_idEmpleado` INT)   BEGIN CASE
    -- CUANDO TODAS LAS VARIABLES SON NULAS
    WHEN IN_idPais = 0
    AND IN_idArea = 0
    AND IN_idCargo = 0
    AND IN_idEmpleado = 0 THEN
    SET
        @temp_cantRegistros = (
            SELECT
                COUNT(idEmpleado)
            FROM
                empleado
            WHERE
                isActive = true
        );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO PAIS
WHEN IN_idPais != 0
AND IN_idArea = 0
AND IN_idCargo = 0
AND IN_idEmpleado = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idPais = IN_idPais
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idPais = IN_idPais
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO AREA
WHEN IN_idPais = 0
AND IN_idArea != 0
AND IN_idCargo = 0
AND IN_idEmpleado = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idArea = IN_idArea
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idArea = IN_idArea
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO CARGO
WHEN IN_idPais = 0
AND IN_idArea = 0
AND IN_idCargo != 0
AND IN_idEmpleado = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idCargo = IN_idCargo
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO EMPLEADO
WHEN IN_idPais = 0
AND IN_idArea = 0
AND IN_idCargo = 0
AND IN_idEmpleado != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idEmpleado = IN_idEmpleado
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idEmpleado = IN_idEmpleado
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO PAIS Y AREA
WHEN IN_idPais != 0
AND IN_idArea != 0
AND IN_idCargo = 0
AND IN_idEmpleado = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idArea = IN_idArea
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idPais = IN_idPais
    AND emp.idArea = IN_idArea
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO PAIS Y CARGO
WHEN IN_idPais != 0
AND IN_idArea = 0
AND IN_idCargo != 0
AND IN_idEmpleado = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idPais = IN_idPais
    AND emp.idCargo = IN_idCargo
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO PAIS Y EMPLEADO   
WHEN IN_idPais != 0
AND IN_idArea = 0
AND IN_idCargo = 0
AND IN_idEmpleado != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idPais = IN_idPais
            AND idEmpleado = IN_idEmpleado
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idPais = IN_idPais
    AND emp.idEmpleado = IN_idEmpleado
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO AREA Y CARGO
WHEN IN_idPais = 0
AND IN_idArea != 0
AND IN_idCargo != 0
AND IN_idEmpleado = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idArea = IN_idArea
            AND idCargo = IN_idCargo
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idArea = IN_idArea
    AND emp.idCargo = IN_idCargo
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO AREA Y EMPLEADO
WHEN IN_idPais = 0
AND IN_idArea != 0
AND IN_idCargo = 0
AND IN_idEmpleado != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idArea = IN_idArea
            AND idEmpleado = IN_idEmpleado
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idArea = IN_idArea
    AND emp.idEmpleado = IN_idEmpleado
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO TODAS SON NULAS EXCEPTO CARGO Y EMPLEADO
WHEN IN_idPais = 0
AND IN_idArea = 0
AND IN_idCargo != 0
AND IN_idEmpleado != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idCargo = IN_idCargo
            AND idEmpleado = IN_idEmpleado
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idCargo = IN_idCargo
    AND emp.idEmpleado = IN_idEmpleado
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO NINGUNA ES NULA EXCEPTO EMPLEADO
WHEN IN_idPais != 0
AND IN_idArea != 0
AND IN_idCargo != 0
AND IN_idEmpleado = 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idArea = IN_idArea
            AND idCargo = IN_idCargo
            AND idPais = IN_idPais
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idArea = IN_idArea
    AND emp.idCargo = IN_idCargo
    AND emp.idPais = IN_idPais
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO NINGUNA ES NULA EXCEPTO PAIS
WHEN IN_idPais = 0
AND IN_idArea != 0
AND IN_idCargo != 0
AND IN_idEmpleado != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idArea = IN_idArea
            AND idCargo = IN_idCargo
            AND idEmpleado = IN_idEmpleado
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idArea = IN_idArea
    AND emp.idCargo = IN_idCargo
    AND emp.idEmpleado = IN_idEmpleado
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO NINGUNA ES NULA EXCEPTO AREA
WHEN IN_idPais != 0
AND IN_idArea = 0
AND IN_idCargo != 0
AND IN_idEmpleado != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idEmpleado = IN_idEmpleado
            AND idCargo = IN_idCargo
            AND idPais = IN_idPais
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idEmpleado = IN_idEmpleado
    AND emp.idCargo = IN_idCargo
    AND emp.idPais = IN_idPais
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

-- CUANDO NINGUNA ES NULA EXCEPTO CARGO
WHEN IN_idPais != 0
AND IN_idArea != 0
AND IN_idCargo = 0
AND IN_idEmpleado != 0 THEN
SET
    @temp_cantRegistros = (
        SELECT
            COUNT(idEmpleado)
        FROM
            empleado
        WHERE
            isActive = true
            AND idArea = IN_idArea
            AND idEmpleado = IN_idEmpleado
            AND idPais = IN_idPais
    );

SELECT
    @temp_cantRegistros,
    emp.idEmpleado,
    UPPER(emp.nomEmpleado),
    UPPER(emp.correoEmpleado),
    emp.telefonoEmpleado,
    UPPER(ar.nomArea),
    UPPER(pa.nomPais),
    UPPER(ca.nomCargo),
    UPPER(cli.nomCliente) nomCliente
FROM
    empleado emp
    INNER JOIN area ar ON (emp.idArea = ar.idArea)
    INNER JOIN pais pa ON (emp.idPais = pa.idPais)
    INNER JOIN cargo ca ON (emp.idCargo = ca.idCargo)
    LEFT JOIN cliente cli ON (cli.idCliente = emp.idCliente)
WHERE
    emp.isActive = true
    AND emp.idEmpleado = IN_idEmpleado
    AND emp.idCargo = IN_idCargo
    AND emp.idPais = IN_idPais
ORDER BY
    emp.nomEmpleado ASC
LIMIT
    IN_inicio, IN_cantidadPorPagina;

END CASE
;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEmpSubsist` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEmpleado` INT, IN `IN_idSubsistema` INT)   BEGIN

	-- si ambas son nulas
	IF IN_idEmpleado = 0 AND IN_idSubsistema = 0 THEN
    
        SET @temp_cantRegistros = (SELECT COUNT(idEmpSubsist) FROM empsubsist WHERE isActive = true);
                
              SELECT @temp_cantRegistros, empSubs.idEmpSubsist, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(sub.nomSubsistema) as nomSubsistema
              FROM empsubsist empSubs
              INNER JOIN empleado emp ON (empSubs.idEmpleado = emp.idEmpleado)
              INNER JOIN subsistema sub ON (empSubs.idSubsistema = sub.idSubsistema)
              WHERE empSubs.isActive = true
            ORDER BY sub.nomSubsistema, emp.nomEmpleado ASC 
            LIMIT IN_inicio, IN_cantidadPorPagina;
    
    -- si idEmpleado no es nulo    	
    ELSEIF IN_idEmpleado != 0 AND IN_idSubsistema = 0 THEN
    
    SET @temp_cantRegistros = (SELECT COUNT(idEmpSubsist) FROM empsubsist WHERE isActive = true AND idEmpleado = IN_idEmpleado);
                
              SELECT @temp_cantRegistros, empSubs.idEmpSubsist, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(sub.nomSubsistema) as nomSubsistema
              FROM empsubsist empSubs
              INNER JOIN empleado emp ON (empSubs.idEmpleado = emp.idEmpleado)
              INNER JOIN subsistema sub ON (empSubs.idSubsistema = sub.idSubsistema)
              WHERE empSubs.isActive = true AND empSubs.idEmpleado = IN_idEmpleado
            ORDER BY sub.nomSubsistema, emp.nomEmpleado ASC 
            LIMIT IN_inicio, IN_cantidadPorPagina;
        
     -- si IN_idSubsistema no es nulo   
     
   ELSEIF IN_idEmpleado = 0 AND IN_idSubsistema != 0 THEN
    
    SET @temp_cantRegistros = (SELECT COUNT(idEmpSubsist) FROM empsubsist WHERE isActive = true AND idSubsistema = IN_idSubsistema);
                
              SELECT @temp_cantRegistros, empSubs.idEmpSubsist, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(sub.nomSubsistema) as nomSubsistema
              FROM empsubsist empSubs
              INNER JOIN empleado emp ON (empSubs.idEmpleado = emp.idEmpleado)
              INNER JOIN subsistema sub ON (empSubs.idSubsistema = sub.idSubsistema)
              WHERE empSubs.isActive = true AND empSubs.idSubsistema = IN_idSubsistema
            ORDER BY sub.nomSubsistema, emp.nomEmpleado ASC 
            LIMIT IN_inicio, IN_cantidadPorPagina;
        
    -- si ninguna no es nula    	
    ELSEIF IN_idEmpleado != 0 AND IN_idSubsistema != 0 THEN
    
    SET @temp_cantRegistros = (SELECT COUNT(idEmpSubsist) FROM empsubsist WHERE isActive = true AND idEmpleado = IN_idEmpleado AND idSubsistema = IN_idSubsistema);
                
              SELECT @temp_cantRegistros, empSubs.idEmpSubsist, UPPER(emp.nomEmpleado) as nomEmpleado, UPPER(sub.nomSubsistema) as nomSubsistema
              FROM empsubsist empSubs
              INNER JOIN empleado emp ON (empSubs.idEmpleado = emp.idEmpleado)
              INNER JOIN subsistema sub ON (empSubs.idSubsistema = sub.idSubsistema)
              WHERE empSubs.isActive = true AND empSubs.idEmpleado = IN_idEmpleado AND empSubs.idSubsistema = IN_idSubsistema
            ORDER BY sub.nomSubsistema, emp.nomEmpleado ASC 
            LIMIT IN_inicio, IN_cantidadPorPagina;
    
    END IF;
    
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEmpTipoPerfil` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEmpleado` INT, IN `IN_idTipoPerfil` INT)   BEGIN

	-- si ambas son nulas
	IF IN_idEmpleado = 0 AND IN_idTipoPerfil = 0 THEN
    
        SET @temp_cantRegistros = (SELECT COUNT(idEmpTipoPerfil) FROM emptipoperfil WHERE isActive = true);
        
        SELECT @temp_cantRegistros, etp.idEmpTipoPerfil, UPPER(emp.nomEmpleado), UPPER(tp.nomTipoPerfil)
        FROM emptipoperfil etp
        INNER JOIN tipoperfil tp ON (etp.idTipoPerfil = tp.idTipoPerfil)
        INNER JOIN empleado emp ON (etp.idEmpleado = emp.idEmpleado)
        WHERE etp.isActive = true
        ORDER BY tp.nomTipoPerfil, emp.nomEmpleado ASC 
        LIMIT IN_inicio, IN_cantidadPorPagina;
    
    -- si idEmpleado no es nulo    	
    ELSEIF IN_idEmpleado != 0 AND IN_idTipoPerfil = 0 THEN
    
          SET @temp_cantRegistros = (SELECT COUNT(idEmpTipoPerfil) FROM emptipoperfil WHERE isActive = true AND idEmpleado = IN_idEmpleado);
        
        SELECT @temp_cantRegistros, etp.idEmpTipoPerfil, UPPER(emp.nomEmpleado), UPPER(tp.nomTipoPerfil)
        FROM emptipoperfil etp
        INNER JOIN tipoperfil tp ON (etp.idTipoPerfil = tp.idTipoPerfil)
        INNER JOIN empleado emp ON (etp.idEmpleado = emp.idEmpleado)
        WHERE etp.isActive = true AND etp.idEmpleado = IN_idEmpleado
        ORDER BY tp.nomTipoPerfil, emp.nomEmpleado ASC 
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
     -- si idTipoPerfil no es nulo    	
    ELSEIF IN_idEmpleado = 0 AND IN_idTipoPerfil != 0 THEN
    
          SET @temp_cantRegistros = (SELECT COUNT(idEmpTipoPerfil) FROM emptipoperfil WHERE isActive = true AND idTipoPerfil = IN_idTipoPerfil);
        
        SELECT @temp_cantRegistros, etp.idEmpTipoPerfil, UPPER(emp.nomEmpleado), UPPER(tp.nomTipoPerfil)
        FROM emptipoperfil etp
        INNER JOIN tipoperfil tp ON (etp.idTipoPerfil = tp.idTipoPerfil)
        INNER JOIN empleado emp ON (etp.idEmpleado = emp.idEmpleado)
        WHERE etp.isActive = true AND etp.idTipoPerfil = IN_idTipoPerfil
        ORDER BY tp.nomTipoPerfil, emp.nomEmpleado ASC 
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    -- si ninguna no es nula    	
        ELSEIF IN_idEmpleado != 0 AND IN_idTipoPerfil != 0 THEN
    
          SET @temp_cantRegistros = (SELECT COUNT(idEmpTipoPerfil) FROM emptipoperfil WHERE isActive = true AND idTipoPerfil = IN_idTipoPerfil AND idEmpleado = IN_idEmpleado);
        
        SELECT @temp_cantRegistros, etp.idEmpTipoPerfil, UPPER(emp.nomEmpleado), UPPER(tp.nomTipoPerfil)
        FROM emptipoperfil etp
        INNER JOIN tipoperfil tp ON (etp.idTipoPerfil = tp.idTipoPerfil)
        INNER JOIN empleado emp ON (etp.idEmpleado = emp.idEmpleado)
        WHERE etp.isActive = true AND etp.idTipoPerfil = IN_idTipoPerfil AND etp.idEmpleado = IN_idEmpleado
        ORDER BY tp.nomTipoPerfil, emp.nomEmpleado ASC 
        LIMIT IN_inicio, IN_cantidadPorPagina;
    
    END IF;
    
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoEvaluacionesPorEmpleado` (IN `IN_idEmpleado` INT(1))   BEGIN

SELECT evalProyEmp.idEDDEvaluacion, emp.nomEmpleado,
    CONCAT(UPPER(eval.nomEvaluacion), ' - ', UPPER(eval.tipoEvaluacion), ' - ' ) as nomEvaluacion
    FROM empleado emp
    INNER JOIN eddproyemp proyEmp ON (emp.idEmpleado = proyEmp.idEmpleado)
    INNER JOIN eddevalproyemp evalProyEmp ON (proyEmp.idEDDProyEmp = evalProyEmp.idEDDProyEmpEvaluador)
    INNER JOIN eddevaluacion eval ON (eval.idEDDEvaluacion = evalProyEmp.idEDDEvaluacion)
    WHERE 
    emp.idEmpleado = IN_idEmpleado
    AND emp.isActive = true
    AND proyEmp.isActive = true
    AND evalProyEmp.isActive = true
    AND evalProyEmp.evalRespondida = 0;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoNotaExamen` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idRamoExamen` INT, IN `IN_idEmpleado` INT)   BEGIN
	
    IF  IN_idRamoExamen = 0 AND IN_idEmpleado = 0 THEN

        SET @temp_cantRegistros = (SELECT COUNT(idNotaExamen) FROM notaexamen WHERE isActive = true);

        SELECT @temp_cantRegistros, 
        notaEx.idNotaExamen, 
        notaEx.notaExamen, 
        IF(notaEx.apruebaExamen = 'S', "SÍ", "NO") as apruebaExamen, 
        UPPER(ramoEx.nomExamen), 
        UPPER(emp.nomEmpleado) as nomEmpleado, 
        UPPER(cur.nomCurso) as nomCurso, 
        cursoAl.idCursoAlumno
        FROM notaexamen notaEx 
        INNER JOIN ramoexamen ramoEx ON (notaEx.idRamoExamen = ramoEx.idRamoExamen)
        INNER JOIN cursoalumno cursoAl ON (notaEx.idCursoAlumno = cursoAl.idCursoAlumno)
        INNER JOIN empleado emp ON (cursoAl.idEmpleado = emp.idEmpleado)
        INNER JOIN curso cur ON (cursoAl.idCurso = cur.idCurso)
        WHERE notaEx.isActive = true
        ORDER BY notaEx.idNotaExamen ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    ELSEIF IN_idRamoExamen != 0 AND IN_idEmpleado = 0 THEN
     
        SET @temp_cantRegistros = (SELECT COUNT(idNotaExamen) FROM notaexamen WHERE isActive = true AND idRamoExamen = IN_idRamoExamen);

        SELECT @temp_cantRegistros, 
        notaEx.idNotaExamen, 
        notaEx.notaExamen, 
        IF(notaEx.apruebaExamen = 'S', "SÍ", "NO") as apruebaExamen, 
        UPPER(ramoEx.nomExamen), 
        UPPER(emp.nomEmpleado) as nomEmpleado, 
        UPPER(cur.nomCurso) as nomCurso, 
        cursoAl.idCursoAlumno
        FROM notaexamen notaEx 
        INNER JOIN ramoexamen ramoEx ON (notaEx.idRamoExamen = ramoEx.idRamoExamen)
        INNER JOIN cursoalumno cursoAl ON (notaEx.idCursoAlumno = cursoAl.idCursoAlumno)
        INNER JOIN empleado emp ON (cursoAl.idEmpleado = emp.idEmpleado)
        INNER JOIN curso cur ON (cursoAl.idCurso = cur.idCurso)
        WHERE notaEx.isActive = true AND notaEx.idRamoExamen = IN_idRamoExamen
        ORDER BY notaEx.idNotaExamen ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;

    ELSEIF IN_idRamoExamen = 0 AND IN_idEmpleado != 0 THEN
     
        SET @temp_cantRegistros = (
            SELECT COUNT(ne.idNotaExamen) 
            FROM notaexamen ne
            INNER JOIN cursoalumno ca ON (ca.idCursoAlumno = ne.idCursoAlumno)
            INNER JOIN empleado emp ON (emp.idEmpleado = ca.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
            WHERE ne.isActive = true 
            );

        SELECT @temp_cantRegistros, 
        notaEx.idNotaExamen, 
        notaEx.notaExamen, 
        IF(notaEx.apruebaExamen = 'S', "SÍ", "NO") as apruebaExamen, 
        UPPER(ramoEx.nomExamen), 
        UPPER(emp.nomEmpleado) as nomEmpleado, 
        UPPER(cur.nomCurso) as nomCurso, 
        cursoAl.idCursoAlumno
        FROM notaexamen notaEx 
        INNER JOIN ramoexamen ramoEx ON (notaEx.idRamoExamen = ramoEx.idRamoExamen)
        INNER JOIN cursoalumno cursoAl ON (notaEx.idCursoAlumno = cursoAl.idCursoAlumno)
        INNER JOIN empleado emp ON (cursoAl.idEmpleado = emp.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
        INNER JOIN curso cur ON (cursoAl.idCurso = cur.idCurso)
        WHERE notaEx.isActive = true
        ORDER BY notaEx.idNotaExamen ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;

    ELSEIF IN_idRamoExamen != 0 AND IN_idEmpleado != 0 THEN
     
        SET @temp_cantRegistros = (
            SELECT COUNT(ne.idNotaExamen) 
            FROM notaexamen ne
            INNER JOIN cursoalumno ca ON (ca.idCursoAlumno = ne.idCursoAlumno)
            INNER JOIN empleado emp ON (emp.idEmpleado = ca.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
            WHERE ne.isActive = true AND ne.idRamoExamen = IN_idRamoExamen
            );

        SELECT @temp_cantRegistros, 
        notaEx.idNotaExamen, 
        notaEx.notaExamen, 
        IF(notaEx.apruebaExamen = 'S', "SÍ", "NO") as apruebaExamen, 
        UPPER(ramoEx.nomExamen), 
        UPPER(emp.nomEmpleado) as nomEmpleado, 
        UPPER(cur.nomCurso) as nomCurso, 
        cursoAl.idCursoAlumno
        FROM notaexamen notaEx 
        INNER JOIN ramoexamen ramoEx ON (notaEx.idRamoExamen = ramoEx.idRamoExamen)
        INNER JOIN cursoalumno cursoAl ON (notaEx.idCursoAlumno = cursoAl.idCursoAlumno)
        INNER JOIN empleado emp ON (cursoAl.idEmpleado = emp.idEmpleado AND emp.idEmpleado = IN_idEmpleado)
        INNER JOIN curso cur ON (cursoAl.idCurso = cur.idCurso)
        WHERE notaEx.isActive = true AND notaEx.idRamoExamen = IN_idRamoExamen
        ORDER BY notaEx.idNotaExamen ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;        
      END IF;  
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoProyRespFinales` (IN `IN_idEvaluacion` INT, IN `IN_idEmpleado` INT, IN `IN_idEDDProyEmpEvaluado` INT, IN `IN_cicloEvaluacion` INT, IN `IN_nomRol` VARCHAR(50), OUT `OUT_CODRESULT` VARCHAR(3), OUT `OUT_MJERESULT` VARCHAR(100))   BEGIN    
  IF IN_idEvaluacion <= 0 THEN
      SET OUT_CODRESULT = '01';    
      SET OUT_MJERESULT = 'El ID de la evaluación debe ser mayor a cero.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT;
  ELSEIF IN_idEmpleado <= 0 THEN
        SET OUT_CODRESULT = '02';    
      SET OUT_MJERESULT = 'El ID del empleado debe ser mayor a cero.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT;
  ELSEIF IN_idEDDProyEmpEvaluado <= 0 THEN
      SET OUT_CODRESULT = '03';    
      SET OUT_MJERESULT = 'El ID del evaluado debe ser mayor a cero.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT; 
  ELSEIF UPPER(TRIM(IN_nomRol)) NOT IN ('ADMINISTRADOR', 'PEOPLE', 'GERENCIA', 'REFERENTE', 'COLABORADOR' ) THEN   
  	  SET OUT_CODRESULT = '04';    
      SET OUT_MJERESULT = 'El rol del usuario es incorrecto.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT;
      
  ELSE    
  
  	IF UPPER(TRIM(IN_nomRol)) IN ('ADMINISTRADOR', 'PEOPLE', 'GERENCIA', 'REFERENTE', 'COLABORADOR') THEN
    	
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

    SELECT 
    OUT_CODRESULT, OUT_MJERESULT,
    proyResp.idEDDEvalProyResp,
    proyResp.idEDDEvaluacion, 
    proyResp.idEDDProyEmp, 
    UPPER(proyResp.respuesta) as respuesta, 
    proyResp.idEDDEvalProyEmp, 
    proyResp.idEDDEvalRespPreg, 
    UPPER(pregunta.nomPregunta) as pregunta,
    pregunta.ordenPregunta,
    UPPER(empEvaluado.nomEmpleado) as nomEvaluado,
    UPPER(empEvaluador.nomEmpleado) as nomEvaluador,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    proyResp.verEnDashboard,
    proyResp.ordenDashboard,
    UPPER(competencia.nomCompetencia) as nomCompetencia,
    UPPER(pregunta.tipoResp) as tipoResp,
    eval.logoFormulario
    FROM eddEvalProyResp proyResp
    LEFT JOIN eddevalpregunta pregunta ON (proyResp.idEDDEvalPregunta = pregunta.idEDDEvalPregunta AND pregunta.isActive = 1)
    LEFT JOIN eddevalcompetencia competencia ON (competencia.idEDDEvalCompetencia = pregunta.idEDDEvalCompetencia AND competencia.isActive = 1)
    INNER JOIN eddproyemp proyEmp ON (proyEmp.idEmpleado = IN_idEmpleado)
    INNER JOIN eddevalproyemp evalproyEmp ON (evalproyEmp.idEDDEvalProyEmp = proyResp.idEDDEvalProyEmp 
                                              AND evalproyEmp.evalRespondida = 1 
                                              AND evalproyEmp.cicloEvaluacion = IN_cicloEvaluacion
                                              AND evalproyEmp.idEDDProyEmpEvaluador = proyEmp.idEDDProyEmp
                                              AND evalproyEmp.idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado
                                             )

    INNER JOIN eddevalproyemp empEvaluados ON (proyResp.idEDDEvalProyEmp = empEvaluados.idEDDEvalProyEmp)                                         
    INNER JOIN eddproyemp proyEmpEvaluado ON (proyEmpEvaluado.idEDDProyEmp = empEvaluados.idEDDProyEmpEvaluado)                   
    INNER JOIN eddproyemp proyEmpEvaluador ON (proyEmpEvaluador.idEDDProyEmp = empEvaluados.idEDDProyEmpEvaluador)
    INNER JOIN empleado empEvaluado ON (empEvaluado.idEmpleado = proyEmpEvaluado.idEmpleado)
    INNER JOIN empleado empEvaluador ON (empEvaluador.idEmpleado = proyEmpEvaluador.idEmpleado)

 

    INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
    WHERE proyResp.idEDDEvaluacion = IN_idEvaluacion
    ORDER BY pregunta.ordenPregunta, proyResp.respuesta;
  
        
    
    
    
    ELSE
    
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';


    SELECT 
    OUT_CODRESULT, OUT_MJERESULT,
    proyResp.idEDDEvalProyResp,
    proyResp.idEDDEvaluacion, 
    proyResp.idEDDProyEmp, 
    UPPER(proyResp.respuesta) as respuesta, 
    proyResp.idEDDEvalProyEmp, 
    proyResp.idEDDEvalRespPreg, 
    UPPER(pregunta.nomPregunta) as pregunta,
    pregunta.ordenPregunta,
    UPPER(empEvaluado.nomEmpleado) as nomEvaluado,
    UPPER(empEvaluador.nomEmpleado) as nomEvaluador,
    UPPER(eval.nomEvaluacion) as nomEvaluacion,
    proyResp.verEnDashboard,
    proyResp.ordenDashboard,
    UPPER(competencia.nomCompetencia) as nomCompetencia,
    UPPER(pregunta.tipoResp) as tipoResp,
    eval.logoFormulario
    FROM eddEvalProyResp proyResp
    LEFT JOIN eddevalpregunta pregunta ON (proyResp.idEDDEvalPregunta = pregunta.idEDDEvalPregunta AND pregunta.isActive = 1)
    LEFT JOIN eddevalcompetencia competencia ON (competencia.idEDDEvalCompetencia = pregunta.idEDDEvalCompetencia AND competencia.isActive = 1)
    INNER JOIN eddproyemp proyEmp ON (proyEmp.idEmpleado = IN_idEmpleado)
    INNER JOIN eddevalproyemp evalproyEmp ON (evalproyEmp.idEDDEvalProyEmp = proyResp.idEDDEvalProyEmp 
                                              AND evalproyEmp.evalRespondida = 1 
                                              AND evalproyEmp.cicloEvaluacion = IN_cicloEvaluacion
                                              AND evalproyEmp.idEDDProyEmpEvaluador = proyEmp.idEDDProyEmp
                                              AND evalproyEmp.idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado
                                             )

    INNER JOIN eddevalproyemp empEvaluados ON (proyResp.idEDDEvalProyEmp = empEvaluados.idEDDEvalProyEmp)                                        
    INNER JOIN eddproyemp proyEmpEvaluado ON (proyEmpEvaluado.idEDDProyEmp = empEvaluados.idEDDProyEmpEvaluado)                   
    INNER JOIN eddproyemp proyEmpEvaluador ON (proyEmpEvaluador.idEDDProyEmp = empEvaluados.idEDDProyEmpEvaluador)
    INNER JOIN empleado empEvaluado ON (empEvaluado.idEmpleado = proyEmpEvaluado.idEmpleado)
    INNER JOIN empleado empEvaluador ON (empEvaluador.idEmpleado = proyEmpEvaluador.idEmpleado)
    INNER JOIN eddevaluacion eval ON (proyResp.idEDDEvaluacion = eval.idEDDEvaluacion)
    WHERE proyResp.idEDDEvaluacion = IN_idEvaluacion
    ORDER BY pregunta.ordenPregunta, proyResp.respuesta;

    
    
    END IF;
  

  END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoRamoExamen` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idRamo` INT)   BEGIN
	IF IN_idRamo IS NULL OR IN_idRamo = 0  THEN
        SET @temp_cantRegistros = (SELECT COUNT(idRamoExamen) FROM ramoexamen WHERE isActive = true);

        SELECT @temp_cantRegistros, ramoEx.idRamoExamen, UPPER(ramoEx.nomExamen), 
        DATE_FORMAT(ramoEx.fechaExamen, "%d/%m/%Y") as fechaExamen,
        UPPER(ram.nomRamo)
        FROM ramoexamen ramoEx 
        INNER JOIN ramo ram ON (ramoEx.idRamo = ram.idRamo)
        WHERE ramoEx.isActive = true
        ORDER BY ramoEx.nomExamen ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    ELSE
    
    SET @temp_cantRegistros = (SELECT COUNT(idRamoExamen) FROM ramoexamen WHERE isActive = true AND idRamo = IN_idRamo);

    SELECT @temp_cantRegistros, ramoEx.idRamoExamen, UPPER(ramoEx.nomExamen), DATE_FORMAT(ramoEx.fechaExamen, "%d/%m/%Y") as fechaExamen, UPPER(ram.nomRamo)
    FROM ramoexamen ramoEx 
    INNER JOIN ramo ram ON (ramoEx.idRamo = ram.idRamo)
    WHERE ramoEx.isActive = true AND ramoEx.idRamo = IN_idRamo
    ORDER BY ramoEx.nomExamen ASC
    LIMIT IN_inicio, IN_cantidadPorPagina;
    
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoRamos` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idCurso` INT)   BEGIN

	IF IN_idCurso IS NULL OR TRIM(IN_idCurso) = "" OR IN_idCurso = 0 THEN 
    

        SET @temp_cantRegistros = (SELECT COUNT(idRamo) FROM ramo WHERE isActive = true);
        
        SELECT @temp_cantRegistros, ram.idRamo, UPPER(ram.codRamo), UPPER(ram.nomRamo), UPPER(ram.tipoRamo), UPPER(ram.tipoRamoHH), ram.duracionRamoHH, ram.cantSesionesRamo, UPPER(cur.nomCurso)
        FROM ramo ram 
        INNER JOIN curso cur ON (ram.idCurso = cur.idCurso)
        WHERE ram.isActive = true 
        ORDER BY ram.nomRamo ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    	ELSE
        
        SET @temp_cantRegistros = (SELECT COUNT(idRamo) FROM ramo WHERE isActive = true AND idCurso = IN_idCurso);
        
        SELECT @temp_cantRegistros, ram.idRamo, UPPER(ram.codRamo), UPPER(ram.nomRamo), UPPER(ram.tipoRamo), UPPER(ram.tipoRamoHH), ram.duracionRamoHH, ram.cantSesionesRamo, UPPER(cur.nomCurso)
        FROM ramo ram 
        INNER JOIN curso cur ON (ram.idCurso = cur.idCurso)
        WHERE ram.isActive = true AND ram.idCurso = IN_idCurso
        ORDER BY ram.nomRamo ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
        END IF;
        
    END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoRelatorRamo` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idEmpleado` INT, IN `IN_idRamo` INT)   BEGIN
	IF IN_idRamo = 0 AND IN_idEmpleado = 0 THEN
        SET @temp_cantRegistros = (SELECT COUNT(idRelatorRamo) FROM relatorramo WHERE isActive = true);

        SELECT @temp_cantRegistros, relRam.idRelatorRamo, 
        DATE_FORMAT(relRam.fechaIni, '%d/%m/%Y') as fechaIni, 
        DATE_FORMAT(relRam.fechaFin, '%d/%m/%Y') as fechaFin, 
        UPPER(emp.nomEmpleado), UPPER(ram.nomRamo)
        FROM relatorramo relRam
        INNER JOIN empleado emp ON (relRam.idEmpleado = emp.idEmpleado)
        INNER JOIN ramo ram ON (relRam.idRamo = ram.idRamo)
        WHERE relRam.isActive = true 
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
    ELSEIF IN_idRamo = 0 AND IN_idEmpleado != 0 THEN
    
        SET @temp_cantRegistros = (SELECT COUNT(idRelatorRamo) FROM relatorramo WHERE isActive = true AND idEmpleado = IN_idEmpleado);

        SELECT @temp_cantRegistros, relRam.idRelatorRamo,
        DATE_FORMAT(relRam.fechaIni, '%d/%m/%Y') as fechaIni, 
        DATE_FORMAT(relRam.fechaFin, '%d/%m/%Y') as fechaFin, 
        UPPER(emp.nomEmpleado), UPPER(ram.nomRamo)
        FROM relatorramo relRam
        INNER JOIN empleado emp ON (relRam.idEmpleado = emp.idEmpleado)
        INNER JOIN ramo ram ON (relRam.idRamo = ram.idRamo)
        WHERE relRam.isActive = true AND relRam.idEmpleado = IN_idEmpleado
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
    
    ELSEIF IN_idRamo != 0 AND IN_idEmpleado = 0 THEN
    
        SET @temp_cantRegistros = (SELECT COUNT(idRelatorRamo) FROM relatorramo WHERE isActive = true AND idRamo = IN_idRamo);

        SELECT @temp_cantRegistros, relRam.idRelatorRamo, 
        DATE_FORMAT(relRam.fechaIni, '%d/%m/%Y') as fechaIni, 
        DATE_FORMAT(relRam.fechaFin, '%d/%m/%Y') as fechaFin,
        UPPER(emp.nomEmpleado), UPPER(ram.nomRamo)
        FROM relatorramo relRam
        INNER JOIN empleado emp ON (relRam.idEmpleado = emp.idEmpleado)
        INNER JOIN ramo ram ON (relRam.idRamo = ram.idRamo)
        WHERE relRam.isActive = true AND relRam.idRamo = IN_idRamo
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
 	ELSEIF IN_idRamo != 0 AND IN_idEmpleado != 0 THEN
    
        SET @temp_cantRegistros = (SELECT COUNT(idRelatorRamo) FROM relatorramo WHERE isActive = true AND idRamo = IN_idRamo AND idEmpleado = IN_idEmpleado);

        SELECT @temp_cantRegistros, relRam.idRelatorRamo,
        DATE_FORMAT(relRam.fechaIni, '%d/%m/%Y') as fechaIni, 
        DATE_FORMAT(relRam.fechaFin, '%d/%m/%Y') as fechaFin, 
        UPPER(emp.nomEmpleado), UPPER(ram.nomRamo)
        FROM relatorramo relRam
        INNER JOIN empleado emp ON (relRam.idEmpleado = emp.idEmpleado)
        INNER JOIN ramo ram ON (relRam.idRamo = ram.idRamo)
        WHERE relRam.isActive = true AND relRam.idRamo = IN_idRamo AND relRam.idEmpleado = IN_idEmpleado
        ORDER BY emp.nomEmpleado ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoReqCurso` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idCurso` INT)   BEGIN
	IF IN_idCurso IS NULL OR IN_idCurso = 0 THEN
        SET @temp_cantRegistros = (SELECT COUNT(idReqCurso) FROM reqcurso WHERE isActive = true);

        SELECT @temp_cantRegistros, reCur.idReqCurso, UPPER(cur.nomCurso), UPPER(curReq.nomCurso) as requisitoCurso 
        FROM reqcurso reCur
        INNER JOIN curso cur ON (reCur.idCurso = cur.idCurso)
        INNER JOIN curso curReq ON (reCur.idCursoRequisito = curReq.idCurso)
        WHERE reCur.isActive = true
        ORDER BY reCur.idReqCurso ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
     
     ELSE
     
      	SET @temp_cantRegistros = (SELECT COUNT(idReqCurso) FROM reqcurso WHERE isActive = true AND idCurso = IN_idCurso);

        SELECT @temp_cantRegistros, reCur.idReqCurso, UPPER(cur.nomCurso), UPPER(curReq.nomCurso) as requisitoCurso 
        FROM reqcurso reCur
        INNER JOIN curso cur ON (reCur.idCurso = cur.idCurso)
        INNER JOIN curso curReq ON (reCur.idCursoRequisito = curReq.idCurso)
        WHERE reCur.isActive = true AND reCur.idCurso = IN_idCurso
        ORDER BY reCur.idReqCurso ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
       
      END IF; 

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoRespPregEvaluaciones` (IN `IN_idEvaluacion` INT, IN `IN_idEmpleado` INT, IN `IN_idEDDProyEmpEvaluado` INT, IN `IN_cicloEvaluacion` INT, OUT `OUT_CODRESULT` VARCHAR(3), OUT `OUT_MJERESULT` VARCHAR(100))   BEGIN    
  IF IN_idEvaluacion <= 0 THEN
      SET OUT_CODRESULT = '01';    
      SET OUT_MJERESULT = 'El ID de la evaluación debe ser mayor a cero.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT;
  ELSE    
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

    SELECT OUT_CODRESULT, OUT_MJERESULT, UPPER(ev.nomEvaluacion) nomEvaluacion, ev.tipoEvaluacion, ev.descFormulario, ev.logoFormulario, epe.idEDDEvalProyEmp, epe.idEDDProyEmpEvaluador, ep.ordenPregunta, ep.idEDDEvalPregunta, UPPER(ep.nomPregunta) nomPregunta, ep.tipoResp, erp.ordenRespPreg, erp.idEDDEvalRespPreg, erp.nomRespPreg, ep.preguntaObligatoria, ec.nomCompetencia
    FROM eddEvalPregunta ep
      LEFT JOIN eddEvalRespPreg erp ON (erp.idEDDEvalPregunta = ep.idEDDEvalPregunta AND ep.isActive = 1 AND erp.isActive = 1)
      LEFT JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia AND ep.isActive = 1 AND ec.isActive = 1)
      inner join eddEvaluacion ev on (ev.idEDDEvaluacion = ep.idEDDEvaluacion AND ev.isActive = 1)
      inner join eddProyEmp pe on (pe.idEmpleado = IN_idEmpleado AND pe.isActive = 1)
      inner join eddEvalProyEmp epe on (epe.idEDDEvaluacion = ev.idEDDEvaluacion 
                                        AND epe.idEDDProyEmpEvaluador = pe.idEDDProyEmp 
                                        AND epe.idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado 
                                        AND epe.cicloEvaluacion = IN_cicloEvaluacion 
                                        AND epe.isActive = 1)
    WHERE ep.idEDDEvaluacion = IN_idEvaluacion
    ORDER BY ep.ordenPregunta, erp.ordenRespPreg;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoRespPregEvaluacionesExt` (IN `IN_idEvaluacion` INT, IN `IN_idEDDProyEmpEvaluador` INT, IN `IN_idEDDProyEmpEvaluado` INT, IN `IN_cicloEvaluacion` INT, OUT `OUT_CODRESULT` VARCHAR(3), OUT `OUT_MJERESULT` VARCHAR(100))   BEGIN    
  IF IN_idEvaluacion <= 0 THEN
      SET OUT_CODRESULT = '01';    
      SET OUT_MJERESULT = 'El ID de la evaluación debe ser mayor a cero.';    
      SELECT OUT_CODRESULT, OUT_MJERESULT;
  ELSE    
    SET OUT_CODRESULT = '00';
    SET OUT_MJERESULT = 'Success';

    SELECT OUT_CODRESULT, OUT_MJERESULT, UPPER(ev.nomEvaluacion) nomEvaluacion, ev.tipoEvaluacion, ev.descFormulario, ev.logoFormulario, epe.idEDDEvalProyEmp, epe.idEDDProyEmpEvaluador, ep.ordenPregunta, ep.idEDDEvalPregunta, UPPER(ep.nomPregunta) nomPregunta, ep.tipoResp, erp.ordenRespPreg, erp.idEDDEvalRespPreg, erp.nomRespPreg, ep.preguntaObligatoria, ec.nomCompetencia
    FROM eddEvalPregunta ep
      LEFT JOIN eddEvalRespPreg erp ON (erp.idEDDEvalPregunta = ep.idEDDEvalPregunta AND ep.isActive = 1 AND erp.isActive = 1)
      LEFT JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia AND ep.isActive = 1 AND ec.isActive = 1)
      inner join eddEvaluacion ev on (ev.idEDDEvaluacion = ep.idEDDEvaluacion AND ev.isActive = 1)
      inner join eddEvalProyEmp epe on (epe.idEDDEvaluacion = ev.idEDDEvaluacion 
                                        AND epe.idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador 
                                        AND epe.idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado 
                                        AND epe.cicloEvaluacion = IN_cicloEvaluacion 
                                        AND epe.isActive = 1)
    WHERE ep.idEDDEvaluacion = IN_idEvaluacion
    ORDER BY ep.ordenPregunta, erp.ordenRespPreg;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoServicios` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idCliente` INT)   BEGIN
	
    IF IN_idCliente IS NULL OR IN_idCliente = 0 THEN
        SET @temp_cantRegistros = (SELECT COUNT(idServicio) FROM servicio WHERE isActive = true);
        SELECT @temp_cantRegistros, serv.idServicio, UPPER(serv.nomServicio), serv.isActive, UPPER(cli.nomCliente)
        FROM servicio serv
        INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)
        WHERE serv.isActive = true
        ORDER BY serv.nomServicio ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
        
     ELSE
     
     	SET @temp_cantRegistros = (SELECT COUNT(idServicio) FROM servicio WHERE isActive = true AND idCliente = IN_idCliente);
        
        SELECT @temp_cantRegistros, serv.idServicio, UPPER(serv.nomServicio), serv.isActive, UPPER(cli.nomCliente)
        FROM servicio serv
        INNER JOIN cliente cli ON (serv.idCliente = cli.idCliente)
        WHERE serv.isActive = true AND cli.idCliente = IN_idCliente
        ORDER BY serv.nomServicio ASC
        LIMIT IN_inicio, IN_cantidadPorPagina;
     
     END IF;
     
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_listadoSesiones` (IN `IN_inicio` INT, IN `IN_cantidadPorPagina` INT, IN `IN_idRamo` INT, IN `IN_idCurso` INT)   BEGIN
	
    IF IN_idCurso = 0 AND IN_idRamo = 0 THEN
    
          	SET @temp_cantRegistros = (SELECT COUNT(idSesion) FROM sesion WHERE isActive = true);
            
            SELECT @temp_cantRegistros, se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), UPPER(ram.nomRamo), UPPER(cur.nomCurso)
            FROM sesion se 
            INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
            INNER JOIN curso cur ON (cur.idCurso = ram.idCurso)
            WHERE se.isActive = true
            ORDER BY se.nomSesion ASC
            LIMIT IN_inicio, IN_cantidadPorPagina;
            
    	                        
    ELSEIF IN_idCurso = 0 AND IN_idRamo != 0 THEN

            SET @temp_cantRegistros = (SELECT COUNT(idSesion) FROM sesion WHERE isActive = true AND idRamo = IN_idRamo);
            
            SELECT @temp_cantRegistros, se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), UPPER(ram.nomRamo), UPPER(cur.nomCurso)
            FROM sesion se 
            INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
            INNER JOIN curso cur ON (cur.idCurso = ram.idCurso)
            WHERE se.isActive = true AND se.idRamo = IN_idRamo
            ORDER BY se.nomSesion ASC
            LIMIT IN_inicio, IN_cantidadPorPagina;  
            
 	ELSEIF IN_idCurso != 0 AND IN_idRamo = 0 THEN

            SET @temp_cantRegistros = (SELECT COUNT(se.idSesion) FROM sesion se
                                       INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
            							INNER JOIN curso cur ON (cur.idCurso = ram.idCurso)
                                       WHERE se.isActive = true AND cur.idCurso = IN_idCurso);
            
            SELECT @temp_cantRegistros, se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), UPPER(ram.nomRamo), UPPER(cur.nomCurso)
            FROM sesion se 
            INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
            INNER JOIN curso cur ON (cur.idCurso = ram.idCurso)
            WHERE se.isActive = true AND cur.idCurso = IN_idCurso
            ORDER BY se.nomSesion ASC
            LIMIT IN_inicio, IN_cantidadPorPagina; 
	
	ELSEIF IN_idCurso != 0 AND IN_idRamo != 0 THEN

            SET @temp_cantRegistros = (SELECT COUNT(se.idSesion) FROM sesion se
                                       INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
            							INNER JOIN curso cur ON (cur.idCurso = ram.idCurso)
                                       WHERE se.isActive = true AND cur.idCurso = IN_idCurso AND se.idRamo = IN_idRamo);
            
            SELECT @temp_cantRegistros, se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), UPPER(ram.nomRamo), UPPER(cur.nomCurso)
            FROM sesion se 
            INNER JOIN ramo ram ON (se.idRamo = ram.idRamo)
            INNER JOIN curso cur ON (cur.idCurso = ram.idCurso)
            WHERE se.isActive = true AND cur.idCurso = IN_idCurso AND se.idRamo = IN_idRamo
            ORDER BY se.nomSesion ASC
            LIMIT IN_inicio, IN_cantidadPorPagina; 
	
            
 
     END IF;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_login` (IN `IN_username` VARCHAR(25), IN `IN_password` VARCHAR(50), OUT `OUT_RESP` VARCHAR(300))   BEGIN
    DECLARE msj VARCHAR(300);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            SET msj = "Ha ocurrido un error en el proceso";
            SET OUT_RESP = msj;
               ROLLBACK;
        END;


    IF IN_username IS NULL 
    OR IN_password IS NULL 
    OR IN_username = "%null%"  
    OR IN_password = "%null%" 
    THEN
        SET OUT_RESP = "Uno o más parámetros de entrada vienen nulos / vacíos";

    ELSEIF TRIM(IN_username) = "" OR TRIM(IN_password) THEN
        SET OUT_RESP = "Los parámetros ingresados están vacíos.";

    ELSEIF FN_EXISTE_USUARIOLOGIN(TRIM(IN_username)) != true THEN
        SET OUT_RESP = "Usuario inexistente o parámetros inválidos";

    ELSE

 

        START TRANSACTION;
        SELECT 
        emp.idEmpleado, 
        UPPER(emp.nomEmpleado) as nomEmpleado, 
        loginUsuario.usuario, 
        loginUsuario.password, 
        loginUsuario.tipoUsuario, 
        rolusuario.nomRol 
        FROM loginUsuario

        INNER JOIN rolusuario ON (loginusuario.idRolUsuario = rolusuario.idRolUsuario AND rolusuario.isActive = 1) 
        INNER JOIN empleado emp ON (emp.idLoginUsuario = loginusuario.idLoginUsuario AND loginusuario.usuario = IN_username);

        SET OUT_RESP = 'SUCCESS';
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_RESUMEN_EVAL` (IN `in_idEvaluacion` INT, IN `IN_idProyecto` INT, IN `IN_cicloEvaluacion` INT, OUT `out_porcSatisfaccion` DOUBLE, OUT `out_referentesEvaluados` VARCHAR(10), OUT `out_competenciasEvaluadas` INT, OUT `out_cantEvaluadoresTsoft` INT, OUT `out_tiempoPromedio` DOUBLE, OUT `out_codResp` CHAR(2), OUT `out_msjResp` VARCHAR(200))   BEGIN
  DECLARE numTotalEvaluados INT;
  DECLARE numTotalEvaluaciones INT;
  DECLARE numTotalEvalResp INT;
  DECLARE numCantResp INT;
  DECLARE numCantRespBuenas INT;
  DECLARE dblTiempoTotEnMin DOUBLE;
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      
 
 
      SET out_codResp = '01';
      SET out_msjResp = str_msgMySQL;
    END;
 
 
    -- Obtiene contando todas las preguntas con alternativas, luego se cuentan las que tengan seleccionada 
  -- respuestas BUENO(A) o MUY BUENO(A) y se saca el porcentaje de satisfacción del total.
 
  SELECT a.totEval, sum(a.totEvalResp) totEvalResp, sum(a.tiempoTotEnMin) / count(*) tiempoTotEnMin INTO numTotalEvaluaciones, numTotalEvalResp, dblTiempoTotEnMin 
  FROM (
    SELECT epe.idEDDEvaluacion, epe.idEDDProyEmpEvaluador, count(*) totEval, sum(IF(epe.evalRespondida = 1, 1, 0)) totEvalResp, round(sum(IF(epe.evalRespondida = 1, timestampdiff(SECOND, epe.fechaIni, epe.fechaFin), 0)) / 60, 2) tiempoTotEnMin
    FROM eddproyemp pe
     inner join eddevalproyemp epe on (pe.idProyecto = IN_idProyecto and epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp and pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion) 
    WHERE epe.idEDDEvaluacion = in_idEvaluacion AND pe.isActive = 1
    GROUP BY epe.idEDDEvaluacion) a
  GROUP BY a.idEDDEvaluacion;
 
  -- Obtiene el total de respuestas tipo alternativa y tb, el total de respuestas tipo alternativa con respuestas BUENO y MUY BUENO. 
SELECT sum(a.cantResp) cantResp, sum(a.respBuenas) respBuenas INTO numCantResp, numCantRespBuenas
  FROM (
    SELECT epe.idEDDEvaluacion, count(*) cantResp, sum(IF(UPPER(erp.nomRespPreg) IN('BUENA', 'BUENO', 'MUY BUENA', 'MUY BUENO'), 1, 0)) respBuenas
    FROM eddproyemp pe
     inner join eddevalproyemp epe on (pe.idProyecto = IN_idProyecto and epe.idEDDProyEmpEvaluador = pe.idEDDProyEmp and pe.isActive = 1 and epe.idEDDEvaluacion = in_idEvaluacion AND epe.cicloEvaluacion = IN_cicloEvaluacion) 
      INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvaluacion = epe.idEDDEvaluacion AND epr.idEDDEvalProyEmp = epe.idEDDEvalProyEmp AND epe.EvalRespondida = 1 AND epe.isActive = 1 )  
      INNER JOIN eddEvalRespPreg erp ON (erp.idEDDEvalRespPreg = epr.idEDDEvalRespPreg AND epr.isActive = 1 AND erp.nomRespPreg != '<TEXTO>')
    GROUP BY epe.idEDDEvaluacion) a
  GROUP BY a.idEDDEvaluacion;
 
 
  SET out_porcSatisfaccion = round(numCantRespBuenas * 100 / numCantResp, 2);
  SET out_tiempoPromedio = round(dblTiempoTotEnMin / numTotalEvalResp, 2);
  SET out_referentesEvaluados = CONCAT(numTotalEvalResp, '/', numTotalEvaluaciones);
 
  -- Obtiene la cantida de competencias a evaluar.
  SELECT count(*) INTO out_competenciasEvaluadas FROM
    (SELECT ec.nomCompetencia
      FROM eddproyemp pe
     	inner join eddevalproyemp epe on (pe.idProyecto = IN_idProyecto and epe.idEDDProyEmpEvaluado = pe.idEDDProyEmp and pe.isActive = 1 AND epe.cicloEvaluacion = IN_cicloEvaluacion) 
        INNER JOIN eddEvalProyResp epr ON (epr.idEDDEvaluacion = in_idEvaluacion AND epe.EvalRespondida = 1 AND epe.isActive = 1)
        INNER JOIN eddEvalPregunta ep ON (ep.idEDDEvalPregunta = epr.idEDDEvalPregunta AND epr.isActive = 1)
        INNER JOIN eddEvalCompetencia ec ON (ec.idEDDEvalCompetencia = ep.idEDDEvalCompetencia AND ep.isActive = 1 )
      GROUP BY ec.nomCompetencia) a;
 
 
  -- Obtiene cantidad de evaluadores pertenecientes a Tsoft.
  SELECT count(*) INTO out_cantEvaluadoresTsoft 
  FROM eddEvalProyEmp epe
    INNER JOIN eddProyEmp pe ON (
        							epe.idEDDEvaluacion = in_idEvaluacion AND 
        							epe.cicloEvaluacion = IN_cicloEvaluacion AND
        							epe.isActive = 1 AND 
        							pe.idProyecto = IN_idProyecto AND
        							pe.idEDDProyEmp = epe.idEDDProyEmpEvaluado)
    INNER JOIN empleado e ON (e.idEmpleado = pe.idEmpleado and pe.isActive = 1)
    INNER JOIN cliente cl ON (cl.idCliente = e.idCliente and e.isActive = 1)
  WHERE cl.nomCliente like '%TSOFT%' and cl.isActive = 1;
 
  SET out_codResp = '00';
  SET out_msjResp = 'Success';
 
  SELECT out_porcSatisfaccion, out_referentesEvaluados, out_competenciasEvaluadas, out_cantEvaluadoresTsoft, out_tiempoPromedio, out_codResp, out_msjResp;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_seleccionarDatos` (IN `IN_nombreTabla` VARCHAR(40), IN `IN_idRegistro` INT, OUT `OUT_CODRESULT` CHAR(2), OUT `OUT_MJERESULT` VARCHAR(500))   BEGIN
  		DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  		DECLARE str_msgMySQL VARCHAR(100);
  		DECLARE str_mjeInterno VARCHAR(500);
  		DECLARE EXIT HANDLER FOR SQLEXCEPTION
    	BEGIN
      	 GET DIAGNOSTICS CONDITION 1
       		 str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;
      	 ROLLBACK;
        
      	SET str_mjeInterno = CONCAT('SP_seleccionarData: Error al modificar registro --> IN_nombreTabla: [', IN_nombreTabla, '] - IN_idRegistro: [', IN_idRegistro, ']');

      	INSERT INTO logErroresObj (idLogErrorObj, nomObjeto, codError, descError, fechaHoraError, codErrorInterno, descErrorInterno) 
      	VALUES(null, 'SP_seleccionarData', str_codMySQL, str_msgMySQL, now(), '13', str_mjeInterno);
      	COMMIT;
        
      	SET OUT_CODRESULT = '13';
     	SET OUT_MJERESULT = concat(str_codMySQL, ' - ', str_msgMySQL);
  END;
		 -- Validación de parámetros
            IF IN_idRegistro IS NULL 
            OR IN_nombreTabla is NULL 
            OR IN_idRegistro = "%null%" 
            OR IN_nombreTabla = "%null%" 
            
             THEN
               SET OUT_MJERESULT = "Uno o más parámetros de entrada vienen nulos / vacíos";
               SET OUT_CODRESULT = '01';
				SELECT OUT_CODRESULT, OUT_MJERESULT;
                
             ELSEIF TRIM(IN_nombreTabla) = '' THEN
   				SET OUT_CODRESULT = '02';
				SET OUT_MJERESULT = 'El nombre de la tabla viene vacío';
                SELECT OUT_CODRESULT, OUT_MJERESULT;
                
             ELSEIF IN_idRegistro <= 0 THEN
   				SET OUT_CODRESULT = '03';
				SET OUT_MJERESULT = 'El ID del registro debe ser mayor a cero';
                SELECT OUT_CODRESULT, OUT_MJERESULT;
                
            ELSEIF UPPER(IN_nombreTabla) NOT IN ('ALUMNO','AREA','CARGO','CLIENTE','CONTACTO','CURSO','CURSOALUMNO','CURSOALUMNO_SESION','EMPLEADO','NOTAEXAMEN','RAMO','RAMOEXAMEN','RELATORRAMO','REQCURSO','SERVICIO','SESION', 'EDDPROYECTO', 'EDDPROYEMP', 'EMPTIPOPERFIL', 'EMPSUBSIST', 'EDDEVALCOMPETENCIA', 'EDDEVALRESPPREG', 'EDDEVALPREGUNTA', 'EDDEVALPROYRESP', 'EDDEVALUACION', 'EDDEVALPROYEMP', 'IHHACOP', 'IHHELEMENTOIMP','IHHIMPUGNACIONEMP','IHHNOTAIMPUGNACION','IHHPERIODO','IHHTIPOELEMENTO','IHHTIPOPERIODO') THEN
   				SET OUT_CODRESULT = '04';
				SET OUT_MJERESULT = 'La tabla seleccionada no existe.'; 
                SELECT OUT_CODRESULT, OUT_MJERESULT;

            ELSE	
            
            	-- Reconocimiento de tabla para cada caso
                   SET AUTOCOMMIT = 0;
                   START TRANSACTION;
                -- Alumno
            	IF TRIM(IN_nombreTabla) = 'alumno' THEN
       
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
                    
                    SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', alum.idAlumno, UPPER(alum.nomAlumno), UPPER(alum.correoAlumno), UPPER(alum.telefonoAlumno), alum.idServicio, alum.idArea, alum.idPais, alum.idCargo
                    FROM alumno alum                     
                    WHERE alum.idAlumno = IN_idRegistro;
                    
                    -- Cliente
             	ELSEIF TRIM(IN_nombreTabla) = 'cliente' THEN

                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', cli.idCliente, UPPER(cli.nomCliente), UPPER(cli.direccionCliente), UPPER(cli.isActive), cli.idPais
                FROM cliente cli
                WHERE cli.idCliente = IN_idRegistro;
                    
                    -- Contacto
                    ELSEIF TRIM(IN_nombreTabla) = 'contacto' THEN

 
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', con.idContacto, UPPER(con.nomContacto), UPPER(con.correoContacto), con.telefonoContacto, con.fechaIni, con.fechaFin, con.idServicio
                    FROM contacto con
                    WHERE con.idContacto = IN_idRegistro;
                    
                    -- Curso
                    ELSEIF TRIM(IN_nombreTabla) = 'curso' THEN

                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', cur.idCurso, UPPER(cur.codCurso), UPPER(cur.nomCurso), UPPER(cur.tipoHH), cur.duracionCursoHH, cur.cantSesionesCurso 
                    FROM curso cur 
                    WHERE cur.idCurso = IN_idRegistro;
                    
                    -- CursoAlumno
                    ELSEIF TRIM(IN_nombreTabla) = 'cursoalumno' THEN
             
                    COMMIT;
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', curAl.idCursoAlumno, curAl.fechaIni, curAl.horaIni, curAl.fechaFin, curAl.horaFin, curAl.porcAsistencia, curAl.porcParticipacion, UPPER(curAl.claseAprobada), curAl.porcAprobacion,UPPER(curAl.estadoCurso), curAl.idEmpleado, curAl.idCurso
                    FROM cursoalumno curAl
                    WHERE curAl.isActive = true AND curAl.idCursoAlumno = IN_idRegistro
                    ORDER BY curAl.idCursoAlumno ASC;
                    
                    -- CursoAlumnoSesion
                    ELSEIF TRIM(IN_nombreTabla) = 'cursoalumno_sesion' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', curAlSe.idCursoAlumnoSesion, curAlSe.fechaIni, curAlSe.horaIni, curAlSe.horaFin, curAlSe.fechaFin, curAlSe.asistencia, curAlSe.participacion, se.idSesion, curAl.idCursoAlumno
                    FROM cursoalumno_sesion curAlSe
                    INNER JOIN sesion se ON (curAlSe.idSesion = se.idSesion)
                    INNER JOIN cursoalumno curAl ON (curAlSe.idCursoAlumno = curAL.idCursoAlumno)
                    WHERE curAlSe.idCursoAlumnoSesion = IN_idRegistro;
                    
                    -- Empleado
                    ELSEIF TRIM(IN_nombreTabla) = 'empleado' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', emp.idEmpleado, UPPER(emp.nomEmpleado), UPPER(emp.correoEmpleado), emp.telefonoEmpleado, emp.idArea, emp.idPais, emp.idCargo	
                    FROM empleado emp 
					WHERE emp.idEmpleado = IN_idRegistro;
                    
                    -- NotaExamen
                    ELSEIF TRIM(IN_nombreTabla) = 'notaexamen' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', notaEx.idNotaExamen, notaEx.notaExamen, UPPER(notaEx.apruebaExamen), notaEx.idRamoExamen, notaEx.idCursoAlumno
                    FROM notaexamen notaEx 
                    WHERE notaEx.isActive = true and notaEx.idNotaExamen = IN_idRegistro;
                    
                    -- Ramo
                    ELSEIF TRIM(IN_nombreTabla) = 'ramo' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', ram.idRamo, UPPER(ram.codRamo), UPPER(ram.nomRamo), UPPER(ram.tipoRamo), UPPER(ram.tipoRamoHH), ram.duracionRamoHH, ram.cantSesionesRamo, ram.idCurso
                    FROM ramo ram 
                    WHERE ram.idRamo = IN_idRegistro;
                    
                     -- RamoExamen
                    ELSEIF TRIM(IN_nombreTabla) = 'ramoexamen' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', ramEx.idRamoExamen, UPPER(ramEx.nomExamen), ramEx.fechaExamen, ramEx.isActive, ramEx.idRamo		  
                    FROM ramoexamen ramEx
                    WHERE ramEx.idRamoExamen = IN_idRegistro;
                    
                    -- RelatorRamo
                    ELSEIF TRIM(IN_nombreTabla) = 'relatorramo' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', relRam.idRelatorRamo, relRam.fechaIni, relRam.fechaFin, relRam.idEmpleado, relRam.idRamo
                    FROM relatorramo relRam   
                    WHERE relRam.idRelatorRamo = IN_idRegistro;
                    
                    -- ReqCurso
                    ELSEIF TRIM(IN_nombreTabla) = 'reqcurso' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', reCur.idReqCurso, reCur.idCurso, reCur.idCursoRequisito as requisitoCurso 
                    FROM reqcurso reCur
                    WHERE reCur.idReqCurso = IN_idRegistro;
                    
                    -- Servicio
                    ELSEIF TRIM(IN_nombreTabla) = 'servicio' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                 	SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', serv.idServicio, UPPER(serv.nomServicio), serv.isActive, serv.idCliente
                    FROM servicio serv                  
                    WHERE serv.idServicio = IN_idRegistro;
                    
                    -- Sesion
                    ELSEIF TRIM(IN_nombreTabla) = 'sesion' THEN
             
                    SET OUT_CODRESULT = '00';
                    SET OUT_MJERESULT = 'Success';
   
                   SELECT OUT_MJERESULT as 'OUT_MJERESULT', OUT_CODRESULT as 'OUT_CODRESULT', se.idSesion, se.nroSesion, UPPER(se.nomSesion), UPPER(se.tipoSesion), UPPER(se.tipoSesionHH), UPPER(se.duracionSesionHH), se.idRamo
                    FROM sesion se 
                    WHERE se.idSesion = IN_idRegistro;
                    
                    
                    -- EDD PROYECTO
                    ELSEIF TRIM(IN_nombreTabla) = 'eddproyecto' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT,proy.idEDDProyecto, proy.idServicio, UPPER(nomProyecto) as nomProyecto, 
                       proy.fechaInicio as fechaIni, proy.fechaFin, UPPER(serv.nomServicio) as nomServicio, UPPER(proy.tipoProyecto) tipoProyecto
                       FROM eddproyecto proy 
                       INNER JOIN servicio serv ON (proy.idServicio = serv.idServicio)
                       WHERE proy.idEDDProyecto = IN_idRegistro; 
                       
                     -- EDD PROYECTO EMPLEADO
                    ELSEIF TRIM(IN_nombreTabla) = 'eddproyemp' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, proyEmp.idEDDProyEmp , proyEmp.idProyecto, proyEmp.idEmpleado, UPPER(proyEmp.cargoEnProy) as cargoEnProy
                       FROM eddproyemp proyEmp
                       WHERE proyEmp.idEDDProyEmp = IN_idRegistro;   
                       
                     -- EMPTIPOPERFIL
                    ELSEIF TRIM(IN_nombreTabla) = 'emptipoperfil' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, etp.idEmpTipoPerfil , etp.idEmpleado, etp.idTipoPerfil
                       FROM emptipoperfil etp
                       WHERE etp.idEmpTipoPerfil = IN_idRegistro;    
                       
                      -- EMPSUBSIST
                    ELSEIF TRIM(IN_nombreTabla) = 'empsubsist' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, empSub.idEmpSubsist, empSub.idEmpleado, empSub.idSubsistema
                       FROM empsubsist empSub
                       WHERE empSub.idEmpSubsist = IN_idRegistro;
                       
                      -- EDDEVALCOMPETENCIA
                    ELSEIF TRIM(IN_nombreTabla) = 'eddevalcompetencia' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, UPPER(evalComp.nomCompetencia) as nomCompetencia
                       FROM eddevalcompetencia evalComp
                       WHERE evalComp.idEDDEvalCompetencia = IN_idRegistro;   
                       
                     -- EDDEVALRESPPREG
                    ELSEIF TRIM(IN_nombreTabla) = 'eddevalresppreg' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, UPPER(RespPreg.nomRespPreg) as nomRespPreg, RespPreg.ordenRespPreg,RespPreg.idEDDEvalPregunta
                       FROM eddevalresppreg RespPreg
                       WHERE RespPreg.idEDDEvalRespPreg = IN_idRegistro;   
                       
                    
                    -- EDDEVALPREG
                    ELSEIF TRIM(IN_nombreTabla) = 'eddevalpregunta' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, 
                       OUT_CODRESULT, 
                       UPPER(preg.nomPregunta) as nomPregunta, 
                       preg.ordenPregunta, preg.idEDDEvaluacion, 
                       preg.idEDDEvalCompetencia,
                       preg.tipoResp,
                       preg.preguntaObligatoria
                       FROM eddevalpregunta preg
                       WHERE preg.idEDDEvalPregunta = IN_idRegistro; 
                       
                       
                     -- EDDEVALPROYRESP
                    ELSEIF TRIM(IN_nombreTabla) = 'eddevalproyresp' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, evalproyresp.idEDDEvalProyResp, evalproyresp.idEDDEvaluacion, evalproyresp.idEDDProyEmp, UPPER(evalproyresp.respuesta) as respuesta, evalproyresp.idEDDEvalProyEmp, evalproyresp.idEDDEvalPregunta, evalproyresp.idEDDEvalRespPreg
                       FROM eddevalproyresp evalproyresp
                       WHERE evalproyresp.idEDDEvalProyResp = IN_idRegistro;  
                       
                     -- EDDEVALUACION
                    ELSEIF TRIM(IN_nombreTabla) = 'eddevaluacion' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, 
                       idEDDEvaluacion,
                       UPPER(nomEvaluacion) as nomEvaluacion,
                       UPPER(tipoEvaluacion) as tipoEvaluacion,
                       fechaIni,
                       fechaFin
                       FROM eddevaluacion
                       WHERE idEDDEvaluacion = IN_idRegistro;   
                -- EDDEVALPROYEMP
                    ELSEIF TRIM(IN_nombreTabla) = 'eddevalproyemp' THEN
                    
                         SET OUT_CODRESULT = '00';
                         SET OUT_MJERESULT = 'Success';

                       SELECT OUT_MJERESULT, OUT_CODRESULT, 
                       epe.idEDDEvalProyEmp,
                       epe.idEDDEvaluacion,
                       epe.idEDDProyEmpEvaluador,
                       epe.idEDDProyEmpEvaluado,
                       epe.cicloEvaluacion,
                       epe.evalRespondida,
                       epe.fechaIni,
                       epe.fechaFin,
                       ep.idProyecto,
                       UPPER(eproy.nomProyecto) nomProyecto
                       FROM eddevalproyemp epe
                       INNER JOIN eddproyemp ep ON (ep.idEDDProyEmp = epe.idEDDProyEmpEvaluador AND ep.isActive = 1)
                       INNER JOIN eddproyecto eproy ON (eproy.idEDDProyecto = ep.idProyecto AND eproy.isActive = 1)
                       WHERE epe.idEDDEvalProyEmp = IN_idRegistro;

                -- IHH_ACOP
                    ELSEIF TRIM(IN_nombreTabla) = 'ihhacop' THEN
                    
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';

                        SELECT OUT_MJERESULT, OUT_CODRESULT, 
                        idAcop,
                        idProyecto,
                        presupuestoTotal,
                        cantTotalMeses
                        FROM ihhacop
                        WHERE idAcop = IN_idRegistro; 
                
                -- IHH_ELEMENTOIMP
                    ELSEIF TRIM(IN_nombreTabla) = 'ihhelementoimp' THEN
                    
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';

                        SELECT OUT_MJERESULT, OUT_CODRESULT, 
                        idElementoImp,
                        idTipoElemento,
                        nomElemento,
                        descripcion
                        FROM ihhelementoimp
                        WHERE idElementoImp = IN_idRegistro; 

                -- IHH_IMPUGNACIONEMP
                    ELSEIF TRIM(IN_nombreTabla) = 'ihhimpugnacionemp' THEN
                    
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';

                        SELECT OUT_MJERESULT, OUT_CODRESULT, 
                        idImpugnacionEmp,
                        idEmpleado,
                        idElemento,
                        idPeriodo,
                        cantHorasPeriodo,
                        cantHorasExtra,
                        factor,
                        idAcop
                        FROM ihhimpugnacionemp
                        WHERE idImpugnacionEmp = IN_idRegistro; 

                -- IHH_PERIODO
                    ELSEIF TRIM(IN_nombreTabla) = 'ihhperiodo' THEN
                    
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';

                        SELECT OUT_MJERESULT, OUT_CODRESULT, 
                        idPeriodo,
                        idTipoPeriodo,
                        nomPeriodo,
                        descripcion
                        FROM ihhperiodo
                        WHERE idPeriodo = IN_idRegistro;

                -- IHH_TIPOELEMENTO
                    ELSEIF TRIM(IN_nombreTabla) = 'ihhtipoelemento' THEN
                    
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';

                        SELECT OUT_MJERESULT, OUT_CODRESULT, 
                        idTipoElemento,
                        nomTipoElemento,
                        descripcion
                        FROM ihhtipoelemento
                        WHERE idTipoElemento = IN_idRegistro;

                -- IHH_TIPOELEMENTO
                    ELSEIF TRIM(IN_nombreTabla) = 'ihhtipoperiodo' THEN
                    
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';

                        SELECT OUT_MJERESULT, OUT_CODRESULT, 
                        idTipoPeriodo,
                        nomTipoPeriodo,
                        dias,
                        descripcion
                        FROM ihhtipoperiodo
                        WHERE idTipoPeriodo = IN_idRegistro; 

                -- IHH_NOTAIMPUGNACION
                     ELSEIF TRIM(IN_nombreTabla) = 'ihhnotaimpugnacion' THEN
                    
                        SET OUT_CODRESULT = '00';
                        SET OUT_MJERESULT = 'Success';

                        SELECT OUT_MJERESULT, OUT_CODRESULT, 
                        idNotaImpugnacion,
                        idImpugnacionEmp,
                        nota
                        FROM ihhnotaimpugnacion
                        WHERE idNotaImpugnacion = IN_idRegistro;    
                         
                END IF;
            END IF;          			
        END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_seleccionarDocumento` (IN `IN_nomTabla` VARCHAR(50), IN `IN_idRegistro` INT)   BEGIN
SELECT
    doc.nomDocumento,
    doc.ruta,
    doc.tipo,
    doc.descripcion,
    doc.version,
    doc.nomTabla,
    doc.idRegistro
FROM
    ihhdocumentos doc
WHERE
    UPPER(doc.nomTabla) = UPPER(IN_nomTabla)
    AND idRegistro = IN_idRegistro
    AND doc.isActive = 1;

END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_todaInfoIHH` ()   BEGIN
    SELECT 
    UPPER(p.nomProyecto) nomProyecto,
    -- p.idEDDProyecto, 
    -- p.fechaInicio, 
	DATE_FORMAT(p.fechaInicio, "%Y-%m-%d") fechaInicio,
	DATE_FORMAT(p.fechaFin, "%Y-%m-%d") fechaFin,
    -- p.fechaFin, 
    ROUND(ac.presupuestoTotal, 2) presupuestoTotal, 
    -- ac.cantTotalMeses, 
    FN_convertirAMesAnio(rpp.mes) mes, 
    ROUND(rpp.presupuestoMensual, 2) presupuestoMensual,  
    ROUND(rpp.costoMensual, 2) costoMensual, 
    ROUND(rpp.saldoMensual, 2) saldoMensual, 
    ROUND(rpp.saldoPresupuesto, 2) saldoPresupuesto, 
    ROUND(rpp.presupuestoAcumulado, 2) presupuestoAcumulado,
    -- emp.idEmpleado,
    UPPER(emp.nomEmpleado) nomEmpleado, 
    UPPER(ele.nomElemento) nomElemento,
    ie.cantHorasPeriodo, 
    -- ie.cantHorasExtra, 
    ie.valorHH, 
    (ie.valorHH * ie.cantHorasPeriodo) costoHH, 
    IF(FN_EXISTE_empCosteado(emp.idEmpleado, p.idEDDProyecto) = TRUE, 'SI', 'NO') empCosteado,
    IF(FN_EXISTE_empMonetizado(emp.correoEmpleado) = TRUE, 'SI', 'NO') empMonetizado
    FROM `eddproyecto` p
    INNER JOIN ihhacop ac ON (ac.idProyecto = p.idEDDProyecto AND p.isActive = 1 AND ac.isActive = 1)
    INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idProyecto = p.idEDDProyecto AND rpp.isActive = 1)
    INNER JOIN ihhimpugnacionemp ie ON (ie.idresumenperproy = rpp.idresumenperproy AND ie.isActive = 1)
    INNER JOIN empleado emp ON (emp.idEmpleado = ie.idEmpleado AND emp.isActive = 1)
    INNER JOIN ihhelementoimp ele ON (ele.idElementoImp = ie.idElemento AND ele.isActive = 1);
END$$

--
-- Funciones
--
CREATE DEFINER=`root`@`localhost` FUNCTION `FN_comprobarRevisadoProyecto` (`IN_idProyecto` INT) RETURNS VARCHAR(10) CHARSET utf8mb4 COLLATE utf8mb4_general_ci DETERMINISTIC BEGIN
   DECLARE int_registrosRevisados INT;
    DECLARE int_totalRegistros INT;
    DECLARE resultado VARCHAR(10);


    -- total registros revisados
    SELECT COUNT(*) INTO int_registrosRevisados
    FROM ihhresumenperiodoproyecto
    WHERE idProyecto = IN_idProyecto 
    AND costoMensual IS NOT NULL 
    AND saldoMensual IS NOT NULL 
    AND saldoPresupuesto IS NOT NULL;

    -- total registros 
    SELECT COUNT(*) INTO int_totalRegistros
    FROM ihhresumenperiodoproyecto
    WHERE idProyecto = IN_idProyecto;


    -- returno resultado

    SET resultado = CONCAT(int_registrosRevisados, '/', int_totalRegistros);

    RETURN resultado;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_convertirAMesAnio` (`mesAnio` VARCHAR(10)) RETURNS VARCHAR(20) CHARSET utf8mb4 COLLATE utf8mb4_general_ci DETERMINISTIC BEGIN
    DECLARE mes INT;
    DECLARE anio INT;
    DECLARE mesTexto VARCHAR(20);
    
    SET mes = SUBSTRING(mesAnio, 5, 2);
    SET anio = SUBSTRING(mesAnio, 1, 4);
    
    SET mesTexto = CASE mes
        WHEN 1 THEN 'ENE'
        WHEN 2 THEN 'FEB'
        WHEN 3 THEN 'MAR'
        WHEN 4 THEN 'ABR'
        WHEN 5 THEN 'MAY'
        WHEN 6 THEN 'JUN'
        WHEN 7 THEN 'JUL'
        WHEN 8 THEN 'AGO'
        WHEN 9 THEN 'SEP'
        WHEN 10 THEN 'OCT'
        WHEN 11 THEN 'NOV'
        WHEN 12 THEN 'DIC'
    END;
    
    RETURN CONCAT(mesTexto, ' ', anio);
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_CODCURSO` (`IN_CODCURSO` VARCHAR(20)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_CODCURSO IS NULL OR IN_CODCURSO = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM CURSO WHERE CODCURSO = IN_CODCURSO LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_CODRAMO` (`IN_CODRAMO` VARCHAR(20)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;

  IF IN_CODRAMO IS NULL OR IN_CODRAMO = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM RAMO WHERE CODRAMO = IN_CODRAMO LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_CORREOCONTACTO` (`IN_correoContacto` VARCHAR(100), `IN_idServicio` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  SET boo_existe = False;
  IF IN_correoContacto IS NULL OR IN_correoContacto = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM contacto WHERE correoContacto = IN_correoContacto AND idServicio = IN_idServicio LIMIT 1;
  END IF;
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_CORREOEMP` (`IN_correoEmpleado` VARCHAR(100)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_correoEmpleado IS NULL OR IN_correoEmpleado = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM empleado WHERE correoEmpleado = IN_correoEmpleado LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_CORREOLOGIN` (`IN_correoEmpleado` VARCHAR(100)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_correoEmpleado IS NULL OR IN_correoEmpleado = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM empleado WHERE correoEmpleado = IN_correoEmpleado LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_EDDEvalProyEmp` (`IN_idEDDEvaluacion` INT, `IN_idEDDProyEmpEvaluador` INT, `IN_idEDDProyEmpEvaluado` INT, `IN_cicloEvaluacion` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_idEDDEvaluacion IS NULL OR TRIM(IN_idEDDEvaluacion) = '' THEN
  RETURN False;
  ELSEIF IN_idEDDProyEmpEvaluador IS NULL OR TRIM(IN_idEDDProyEmpEvaluador) = '' THEN
  RETURN False;
  ELSEIF IN_idEDDProyEmpEvaluado IS NULL OR TRIM(IN_idEDDProyEmpEvaluado) = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM eddevalproyemp WHERE idEDDEvaluacion = IN_idEDDEvaluacion AND idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador AND idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado AND cicloEvaluacion = IN_cicloEvaluacion LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_EDDProyEmp` (`IN_idProyecto` INT, `IN_idEmpleado` INT, `IN_cargoEnProy` VARCHAR(15)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_idProyecto IS NULL OR IN_idProyecto = '' THEN
  RETURN False;
  ELSEIF IN_idEmpleado IS NULL OR IN_idEmpleado = '' THEN
  RETURN False;
  ELSEIF IN_cargoEnProy IS NULL OR IN_cargoEnProy = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM eddproyemp WHERE idProyecto = IN_idProyecto AND idEmpleado = IN_idEmpleado AND cargoEnProy = IN_cargoEnProy LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_empCosteado` (`IN_idEmpleado` INT, `IN_idProyecto` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_idEmpleado IS NULL OR IN_idProyecto IS NULL OR IN_idEmpleado = '' OR IN_idProyecto = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM eddproyemp pe WHERE pe.idEmpleado = IN_idEmpleado AND pe.idProyecto = IN_idProyecto LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_empMonetizado` (`IN_correoEmpleado` VARCHAR(40)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_correoEmpleado IS NULL OR TRIM(IN_correoEmpleado) = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM confdatos c WHERE c.tipoConfDato = 'IHH' AND UPPER(c.subTipoConfDato) = 'COLABORADORES' AND UPPER(TRIM(c.datoVisible)) =  UPPER(TRIM(IN_correoEmpleado)) LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_NOMCLIENTE` (`IN_NOMCLIENTE` VARCHAR(50)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_NOMCLIENTE IS NULL OR IN_NOMCLIENTE = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM cliente WHERE UPPER(nomCliente) = TRIM(UPPER(IN_NOMCLIENTE)) LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_NOMCURSO` (`IN_NOMCURSO` VARCHAR(50)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_NOMCURSO IS NULL OR IN_NOMCURSO = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM CURSO WHERE NOMCURSO = IN_NOMCURSO LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_NOMPROYECTO` (`IN_nomProyecto` VARCHAR(20), `IN_idServicio` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_nomProyecto IS NULL OR IN_nomProyecto = '' OR IN_idServicio IS NULL OR IN_idServicio = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM eddproyecto WHERE nomProyecto = IN_nomProyecto AND idServicio = IN_idServicio LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_NOMRAMO` (`IN_NOMRAMO` VARCHAR(50)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_NOMRAMO IS NULL OR IN_NOMRAMO = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM RAMO WHERE NOMRAMO = IN_NOMRAMO LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_NOMSESION` (`IN_NOMSESION` VARCHAR(50), `IN_idRamo` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_NOMSESION IS NULL OR IN_NOMSESION = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM SESION WHERE NOMSESION = IN_NOMSESION AND idRamo = IN_idRamo LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_NROSESION` (`IN_NROSESION` INT, `IN_idRamo` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_NROSESION IS NULL OR IN_NROSESION <= 0 THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM SESION WHERE NROSESION = IN_NROSESION AND idRamo = IN_idRamo LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_REGEDDEVALPROYEMP` (`IN_idEDDEvaluacion` INT, `IN_idEDDProyEmpEvaluador` INT, `IN_idEDDProyEmpEvaluado` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE temp_cicloEval TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  	
    SELECT MAX(cicloEvaluacion) INTO temp_cicloEval from eddevalproyemp epe 
    WHERE epe.idEDDEvaluacion = IN_idEDDEvaluacion AND epe.idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador AND epe.idEDDProyEmpEvaluado = IN_idEDDProyEmpEvaluado AND epe.isActive = 1;
	
    IF temp_cicloEval < 1 THEN
    	RETURN 	1;
    ELSE
    	RETURN temp_cicloEval + 1;
  	END IF;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_REQCURSO` (`IN_idReqCurso` INT, `IN_idCurso` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_idReqCurso IS NULL OR IN_idCurso IS NULL OR IN_idCurso = '' OR IN_idReqCurso = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM reqcurso WHERE idCurso = IN_idCurso AND idCursoRequisito = IN_idReqCurso LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_USUARIOLOGIN` (`IN_usuario` VARCHAR(20)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_usuario IS NULL OR IN_usuario = '' THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM loginusuario WHERE usuario = IN_usuario LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_EXISTE_versionDocumento` (`IN_nomTabla` VARCHAR(50), `IN_idRegistro` INT, `IN_nomDocumento` VARCHAR(50)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
 DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF TRIM(IN_nomTabla) = "" OR IN_idRegistro < 1 THEN
    RETURN False;
  ELSE
    SELECT True INTO boo_existe FROM ihhdocumentos WHERE nomTabla = IN_nomTabla AND idRegistro = IN_idRegistro AND nomDocumento = IN_nomDocumento LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_obtenerEstadoSaldoRestante` (`IN_idProyecto` INT, `IN_fechaFin` DATETIME) RETURNS DOUBLE DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE mesFormat VARCHAR(10);


  DECLARE auxSaldoRestante DOUBLE;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  SET boo_existe = False;
  IF IN_idProyecto <= 0 THEN
    RETURN False;
  ELSE  

    -- Si el proyecto terminó antes de la fecha actual, retorno el último mes, si no, devuelvo el mes actual en el que está el proyecto.

    IF IN_fechaFin < NOW() THEN
      SELECT DATE_FORMAT(IN_fechaFin, '%Y%m') INTO mesFormat;
    ELSE 
      SELECT DATE_FORMAT(NOW(), '%Y%m') INTO mesFormat;
    END IF;


        -- Obtengo el último saldo mensual del proyecto
        SELECT rpp.saldoMensual INTO auxSaldoRestante FROM ihhresumenperiodoproyecto rpp 
        WHERE rpp.mes = mesFormat AND rpp.idProyecto = IN_idProyecto;

      RETURN auxSaldoRestante;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_obtenerPresupuestoProyecto` (`IN_idProyecto` INT, `IN_mes` VARCHAR(10)) RETURNS INT(11) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE mesAnterior VARCHAR(10);
  DECLARE yearAnterior VARCHAR(10);
  DECLARE mesFormat VARCHAR(10);

  DECLARE auxSaldoRestante INT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  SET boo_existe = False;
  IF IN_idProyecto <= 0 THEN
    RETURN False;
  ELSEIF TRIM(IN_mes) = "" THEN
  	RETURN False;
  ELSE  
        -- Obtengo el mes anterior
SET mesFormat = MONTH(STR_TO_DATE(CONCAT(IN_mes, '01'), '%Y%m%d'));
SET yearAnterior = YEAR(STR_TO_DATE(CONCAT(IN_mes, '01'), '%Y%m%d'));

IF mesFormat = 1 THEN
    SET yearAnterior = yearAnterior - 1;
    SET mesAnterior = CONCAT(yearAnterior, '12');
ELSE
    SET mesAnterior = CONCAT(yearAnterior, LPAD(mesFormat - 1, 2, '0'));
END IF;


        -- Compruebo existencia registro anterior
        SELECT True INTO boo_existe FROM ihhresumenperiodoproyecto rpp 
        WHERE rpp.mes = mesAnterior AND rpp.idProyecto = IN_idProyecto AND rpp.saldoPresupuesto IS NOT NULL LIMIT 1;

        -- Si existe, retorna el saldo del mes anterior 
        IF boo_existe = TRUE THEN
          SELECT rpp.saldoPresupuesto INTO auxSaldoRestante FROM ihhresumenperiodoproyecto rpp 
          WHERE rpp.mes = mesAnterior AND rpp.idProyecto = IN_idProyecto AND rpp.saldoPresupuesto IS NOT Null LIMIT 1;

        -- Si no existe, retorna el presupuesto original 
        ELSE 
          SELECT presupuestoTotal INTO auxSaldoRestante from ihhacop WHERE idProyecto = IN_idProyecto;
        END IF;

   RETURN auxSaldoRestante;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_obtenerSaldoAnterior` (`IN_idProyecto` INT, `IN_mes` VARCHAR(10)) RETURNS DOUBLE DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE mesAnterior VARCHAR(10);
  DECLARE yearAnterior VARCHAR(10);
  DECLARE mesFormat VARCHAR(10);

  DECLARE auxSaldoRestante DOUBLE;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  SET boo_existe = False;
  IF IN_idProyecto <= 0 THEN
    RETURN False;
  ELSEIF TRIM(IN_mes) = "" THEN
  	RETURN False;
  ELSE  
        -- Obtengo el mes anterior
SET mesFormat = MONTH(STR_TO_DATE(CONCAT(IN_mes, '01'), '%Y%m%d'));
SET yearAnterior = YEAR(STR_TO_DATE(CONCAT(IN_mes, '01'), '%Y%m%d'));

IF mesFormat = 1 THEN
    SET yearAnterior = yearAnterior - 1;
    SET mesAnterior = CONCAT(yearAnterior, '12');
ELSE
    SET mesAnterior = CONCAT(yearAnterior, LPAD(mesFormat - 1, 2, '0'));
END IF;


        -- Compruebo existencia registro anterior
        SELECT True INTO boo_existe FROM ihhresumenperiodoproyecto rpp 
        WHERE rpp.mes = mesAnterior AND rpp.idProyecto = IN_idProyecto AND rpp.saldoMensual IS NOT NULL LIMIT 1;

        -- Si existe, retorna el saldo del mes anterior 
        IF boo_existe = TRUE THEN
          SELECT rpp.saldoMensual INTO auxSaldoRestante FROM ihhresumenperiodoproyecto rpp 
          WHERE rpp.mes = mesAnterior AND rpp.idProyecto = IN_idProyecto AND rpp.saldoMensual IS NOT Null LIMIT 1;

        -- Si no existe, retorna el presupuesto mensual original 
        ELSE 
          SELECT presupuestoMensual INTO auxSaldoRestante from ihhresumenperiodoproyecto WHERE idProyecto = IN_idProyecto LIMIT 1;
        END IF;

   RETURN auxSaldoRestante;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_obtenerValorHH` (`IN_idEmpleado` INT, `IN_idProyecto` INT, `IN_mes` VARCHAR(10)) RETURNS INT(11) DETERMINISTIC BEGIN
  DECLARE boo_existeAnterior TINYINT;
  DECLARE boo_existeActual TINYINT;
  DECLARE mesAnterior VARCHAR(10);
  DECLARE yearAnterior VARCHAR(10);
  DECLARE mesFormat VARCHAR(10);
  DECLARE auxValorHH INT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  SET boo_existeAnterior = False;
  SET boo_existeActual = False;
  IF IN_idEmpleado <= 0 THEN
    RETURN False;
  ELSEIF TRIM(IN_mes) = "" THEN
  	RETURN False;
  ELSE  
        -- Obtengo el mes anterior
SET mesFormat = MONTH(STR_TO_DATE(CONCAT(IN_mes, '01'), '%Y%m%d'));
SET yearAnterior = YEAR(STR_TO_DATE(CONCAT(IN_mes, '01'), '%Y%m%d'));

IF mesFormat = 1 THEN
    SET yearAnterior = yearAnterior - 1;
    SET mesAnterior = CONCAT(yearAnterior, '12');
ELSE
    SET mesAnterior = CONCAT(yearAnterior, LPAD(mesFormat - 1, 2, '0'));
END IF;

        -- Compruebo existencia registro actual
        SELECT True INTO boo_existeActual FROM ihhimpugnacionemp ie 
        INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND TRIM(rpp.mes) = TRIM(IN_mes) AND rpp.idProyecto = IN_idProyecto)
        WHERE ie.idEmpleado = IN_idEmpleado LIMIT 1;

        IF boo_existeActual = TRUE THEN

          SELECT ie.valorHH INTO auxValorHH FROM ihhimpugnacionemp ie 
          INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND TRIM(rpp.mes) = TRIM(IN_mes) AND rpp.idProyecto = IN_idProyecto)
          WHERE ie.idEmpleado = IN_idEmpleado LIMIT 1;

        ELSE

          -- Compruebo existencia registro anterior
          SELECT True INTO boo_existeAnterior FROM ihhimpugnacionemp ie 
          INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND TRIM(rpp.mes) = TRIM(mesAnterior) AND rpp.idProyecto = IN_idProyecto)
          WHERE ie.idEmpleado = IN_idEmpleado LIMIT 1;

          -- Si existe, retorna el valor HH anteriormente imputado 
          IF boo_existeAnterior = TRUE THEN

            SELECT ie.valorHH INTO auxValorHH FROM ihhimpugnacionemp ie 
            INNER JOIN ihhresumenperiodoproyecto rpp ON (rpp.idresumenperproy = ie.idresumenperproy AND TRIM(rpp.mes) = TRIM(mesAnterior) AND rpp.idProyecto = IN_idProyecto)
            WHERE ie.idEmpleado = IN_idEmpleado LIMIT 1;

          -- Si no existe, retorna el valor HH de la tabla empleado 
          ELSE 
            SELECT valorHH into auxValorHH FROM empleado WHERE idEmpleado = IN_idEmpleado;
          END IF;
        END IF;

   RETURN auxValorHH;
  END IF;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_REQCURSO_APROBADOS` (`IN_IDCURSO` INT, `IN_IDEMPLEADO` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE done INT DEFAULT 0;
  DECLARE num_cantCursoReq INT;
  DECLARE num_idCursoReq INT;
  DECLARE boo_cursoAprobado TINYINT DEFAULT 0;
  DECLARE boo_existeCurso TINYINT;
  DECLARE boo_existeEmp TINYINT;
  DECLARE boo_reqCursosOK TINYINT DEFAULT 0;
  DECLARE str_codMySQL CHAR(5) DEFAULT '00000';
  DECLARE str_msgMySQL VARCHAR(100);
  -- Query que trae todos los cursos-requisitos para el ID del curso recibido. Loop.
  DECLARE cur1 CURSOR FOR SELECT idCursoRequisito FROM reqCurso WHERE idCurso = IN_IDCURSO AND isActive = 1;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      GET DIAGNOSTICS CONDITION 1
        str_codMySQL = RETURNED_SQLSTATE, str_msgMySQL = MESSAGE_TEXT;      
      RETURN 0;
    END;
    
  SELECT 1 INTO boo_existeCurso FROM curso WHERE idCurso = IN_IDCURSO AND isActive = 1;
  IF boo_existeCurso = 1 THEN  -- Si existe el curso activo para el ID recibido, continúa. Si no, retorna 0 (falso).
    SELECT 1 INTO boo_existeEmp FROM empleado WHERE idEmpleado = IN_IDEMPLEADO AND isActive = 1;
    IF boo_existeEmp = 1 THEN  -- Si existe el empleado activo para el ID recibido, continúa. Si no, retorna 0 (falso).
      BEGIN
        DECLARE CONTINUE HANDLER FOR NOT FOUND RETURN 1;  -- Si no encuentra registros de cursos-requisito, devuelve 1 (OK). 
        SELECT count(*) INTO num_cantCursoReq FROM reqCurso WHERE idCurso = IN_IDCURSO AND isActive = 1;       
      END;
      
      IF num_cantCursoReq > 0 THEN
        SET done = 0;
            
        OPEN cur1;
        loop_reqCurso: LOOP
          SET num_idCursoReq = 0;  -- Inicializa variable en cada iteración.
          FETCH cur1 INTO num_idCursoReq;
          -- Si no encuentra más registros, sale del loop.
          IF done = 1 THEN
            SET boo_reqCursosOK = boo_cursoAprobado;  -- Asigna resultado de búsqueda, pudiendo ser 1: Todos los cursos-requisitos OK / 0: NOK.
            LEAVE loop_reqCurso;
          END IF;
          
          BEGIN
            DECLARE CONTINUE HANDLER FOR NOT FOUND
              BEGIN
                SET done = 2;
              END;
            -- Verifica que el curso requisito actual esté aprobado por el alumno (empleado). Si aprobado, devuelve 1. Si no existe registro, done = 2.
            SELECT IF(estadoCurso = 'APROBADO', 1, 0) INTO boo_cursoAprobado FROM cursoAlumno WHERE idCurso = num_idCursoReq AND idEmpleado = IN_IDEMPLEADO AND isActive = 1;
          END;
          
          -- Si el curso-requisito no está aprobado o no encontró registro, sale del loop indicando que no están cursados todos los cursos-requisito.
          IF boo_cursoAprobado = 0 OR done = 2 THEN
            SET boo_reqCursosOK = 0;
            LEAVE loop_reqCurso;
          END IF;
            
        END LOOP;
        CLOSE cur1;
      ELSE
        SET boo_reqCursosOK = 1;
      END IF;
    END IF;
  END IF;

  -- 1: Todos los cursos requisito aprobados / 0: Al menos 1 curso no aprobabo o no cursado o en curso.
  IF boo_reqCursosOK = 1 THEN
    RETURN 1; 
  ELSE
    RETURN 0;
  END IF;  
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_revisadoMesEnCurso` (`IN_idProyecto` INT, `IN_fechaFin` DATE) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE mesFormat VARCHAR(10);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;
  IF IN_idProyecto IS NULL OR IN_idProyecto < 0 THEN
    RETURN False;
  ELSE
	
    IF IN_fechaFin < NOW() THEN
      SELECT DATE_FORMAT(IN_fechaFin, '%Y%m') INTO mesFormat;
    ELSE 
      SELECT DATE_FORMAT(NOW(), '%Y%m') INTO mesFormat;
    END IF;


--    SELECT DATE_FORMAT(NOW(), '%Y%m') INTO mesActual;

    SELECT True INTO boo_existe FROM ihhresumenperiodoproyecto rpp WHERE 
	rpp.idProyecto = IN_idProyecto AND
	rpp.mes = mesFormat AND
	rpp.costoMensual IS NOT NULL AND
	rpp.saldoMensual IS NOT NULL AND
	rpp.saldoPresupuesto IS NOT NULL
	LIMIT 1;
  END IF;
  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_tiempoPromedio` (`IN_fechaIni` DATETIME, `IN_fechaFin` DATETIME) RETURNS VARCHAR(10) CHARSET utf8mb4 COLLATE utf8mb4_general_ci DETERMINISTIC BEGIN
  DECLARE tiempoPromedio VARCHAR(10);
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
   SELECT concat(
       lpad(truncate(round((timestampdiff(SECOND, IN_fechaIni, IN_fechaFin) / 60), 2), 0),2, 0)

        , ':',

        lpad(round((round(
        timestampdiff(SECOND, IN_fechaIni, IN_fechaFin) / 60
        , 2) - 
        truncate(round(
        (timestampdiff(SECOND, IN_fechaIni, IN_fechaFin) / 60),
        2),
        0)) * 60, 0),2, 0)
        ) INTO tiempoPromedio;

  RETURN tiempoPromedio;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_validarFechaCorreo` (`IN_idProyecto` INT, `IN_idEDDProyEmpEvaluador` INT, `IN_cargoEnProy` VARCHAR(30), `IN_cicloEvaluacion` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  SET boo_existe = False;
  IF IN_idProyecto  <= 0 THEN
    RETURN False;
  ELSEIF TRIM(IN_cargoEnProy) = "" THEN
  	RETURN False;
  ELSE
        IF TRIM(UPPER(IN_cargoEnProy)) IN ('REFERENTE', 'REFERENTES') THEN
            SELECT IF(DATE(epe.fechaIniVigenciaEvalRef) <= CURRENT_DATE AND CURRENT_DATE <= DATE(DATE_ADD(epe.fechaIniVigenciaEvalRef, INTERVAL epe.diasVigenciaEvalRef DAY)), TRUE, FALSE) INTO boo_existe FROM eddevalproyemp epe
            INNER JOIN eddproyemp ep ON (ep.idEDDProyEmp = epe.idEDDProyEmpEvaluador 
                                         AND epe.idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador AND epe.cicloEvaluacion = IN_cicloEvaluacion
                                         AND ep.idProyecto = IN_idProyecto 
                                         AND ep.cargoEnProy = IN_cargoEnProy)
            LIMIT 1;
        ELSEIF TRIM(UPPER(IN_cargoEnProy)) IN ('COLABORADOR', 'COLABORADORES') THEN
            SELECT IF(DATE(epe.fechaIniVigenciaEvalColab) <= CURRENT_DATE() AND CURRENT_DATE() <= DATE(DATE_ADD(epe.fechaIniVigenciaEvalColab, INTERVAL epe.diasVigenciaEvalRefColab DAY)), TRUE, FALSE) INTO boo_existe FROM eddevalproyemp epe
            INNER JOIN eddproyemp ep ON (ep.idEDDProyEmp = epe.idEDDProyEmpEvaluador  AND epe.cicloEvaluacion = IN_cicloEvaluacion
                                     AND epe.idEDDProyEmpEvaluador = IN_idEDDProyEmpEvaluador
                                     AND ep.idProyecto = IN_idProyecto 
                                     AND ep.cargoEnProy = IN_cargoEnProy)
            LIMIT 1;
 
         END IF; 
  END IF;
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_validarImpugnacionEmp` (`IN_idImpugnacionEmp` INT) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;

    SELECT True INTO boo_existe FROM ihhimpugnacionemp ie WHERE ie.idImpugnacionEmp = IN_idImpugnacionEmp LIMIT 1;

  
  RETURN boo_existe;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_validarMultiIDS` (`IN_IDS` VARCHAR(30)) RETURNS TINYINT(4) DETERMINISTIC BEGIN
  DECLARE boo_existe TINYINT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      RETURN False;
    END;
  
  SET boo_existe = False;

    SELECT IN_IDS REGEXP "^[0-9\,]" INTO boo_existe
            LIMIT 1;
  
  RETURN boo_existe;
END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `area`
--

CREATE TABLE `area` (
  `idArea` int(11) NOT NULL,
  `nomArea` varchar(50) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `area`
--

INSERT INTO `area` (`idArea`, `nomArea`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'A confirmar', 1, '2024-06-24 17:56:15', 'admin_emiliano', '2024-06-24 17:56:15', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `cargo`
--

CREATE TABLE `cargo` (
  `idCargo` int(11) NOT NULL,
  `nomCargo` varchar(50) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `cargo`
--

INSERT INTO `cargo` (`idCargo`, `nomCargo`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'A confirmar', 1, '2024-06-24 17:56:44', 'admin_emiliano', '2024-06-24 17:56:44', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `cliente`
--

CREATE TABLE `cliente` (
  `idCliente` int(11) NOT NULL,
  `nomCliente` varchar(100) NOT NULL,
  `direccionCliente` varchar(100) NOT NULL,
  `idPais` int(11) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `cliente`
--

INSERT INTO `cliente` (`idCliente`, `nomCliente`, `direccionCliente`, `idPais`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'BANCHILE', 'dirección desconocida', 1, 1, '2024-06-24 12:58:56', 'admin_emiliano', '2024-06-24 12:58:56', 'admin_emiliano'),
(2, 'BANCO RIPLEY CHILE', 'dirección desconocida', 1, 1, '2024-06-24 13:11:09', 'admin_emiliano', '2024-06-24 13:11:09', 'admin_emiliano'),
(3, 'BANCO SECURITY', 'dirección desconocida', 1, 1, '2024-06-24 13:11:19', 'admin_emiliano', '2024-06-24 13:11:19', 'admin_emiliano'),
(4, 'BCI BANCO CREDITO INVERSIONES', 'dirección desconocida', 1, 1, '2024-06-24 13:11:25', 'admin_emiliano', '2024-06-24 13:11:25', 'admin_emiliano'),
(5, 'BNP PARIBAS (CHILE)', 'dirección desconocida', 1, 1, '2024-06-24 13:11:29', 'admin_emiliano', '2024-06-24 13:11:29', 'admin_emiliano'),
(6, 'CONSORCIO FINANCIERO SA', 'dirección desconocida', 1, 1, '2024-06-24 13:11:33', 'admin_emiliano', '2024-06-24 13:11:33', 'admin_emiliano'),
(7, 'ECOS', 'dirección desconocida', 1, 1, '2024-06-24 13:11:38', 'admin_emiliano', '2024-06-24 13:11:38', 'admin_emiliano'),
(8, 'FALABELLA CHILE FINANCIERO', 'dirección desconocida', 1, 1, '2024-06-24 13:11:43', 'admin_emiliano', '2024-06-24 13:11:43', 'admin_emiliano'),
(9, 'GRUPO SECURITY', 'dirección desconocida', 1, 1, '2024-06-24 13:11:46', 'admin_emiliano', '2024-06-24 13:11:46', 'admin_emiliano'),
(10, 'ICB FOOD SERVICE', 'dirección desconocida', 1, 1, '2024-06-24 13:12:01', 'admin_emiliano', '2024-06-24 13:12:01', 'admin_emiliano'),
(11, 'PARQUE ARAUCO CL', 'dirección desconocida', 1, 1, '2024-06-24 13:12:05', 'admin_emiliano', '2024-06-24 13:12:05', 'admin_emiliano'),
(12, 'TANNER', 'dirección desconocida', 1, 1, '2024-06-24 13:12:10', 'admin_emiliano', '2024-06-24 13:12:10', 'admin_emiliano'),
(13, 'TRANSBANK S.A.', 'dirección desconocida', 1, 1, '2024-06-24 13:12:14', 'admin_emiliano', '2024-06-24 13:12:14', 'admin_emiliano'),
(14, 'VIDA SECURITY', 'dirección desconocida', 1, 1, '2024-06-24 13:12:19', 'admin_emiliano', '2024-06-24 13:12:19', 'admin_emiliano'),
(15, 'WORKMATE', 'dirección desconocida', 1, 1, '2024-06-24 13:12:23', 'admin_emiliano', '2024-06-24 13:12:23', 'admin_emiliano'),
(16, 'Tsoft', 'tsoft chile', 1, 1, '2024-06-24 17:00:56', 'admin_emiliano', '2024-06-24 17:00:56', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `confdatos`
--

CREATE TABLE `confdatos` (
  `idConfDatos` int(11) NOT NULL,
  `tipoConfDato` varchar(100) NOT NULL,
  `subTipoConfDato` varchar(100) NOT NULL,
  `orden` int(11) NOT NULL,
  `datoVisible` varchar(100) NOT NULL,
  `datoNoVisible` text DEFAULT NULL,
  `descDato` varchar(300) DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `confdatos`
--

INSERT INTO `confdatos` (`idConfDatos`, `tipoConfDato`, `subTipoConfDato`, `orden`, `datoVisible`, `datoNoVisible`, `descDato`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'COMPETENCIA', 'RANGO_COLOR', 1, '#29B12B', '===100', 'Color verde', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(2, 'COMPETENCIA', 'RANGO_COLOR', 5, '#FFA329', '<60', 'Color naranjo', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(3, 'COMPETENCIA', 'RANGO_COLOR', 2, '#53FF3C', '<100', 'Color verde oliva', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(4, 'COMPETENCIA', 'RANGO_COLOR', 3, '#EBFB39', '<90', 'Color limón', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(5, 'COMPETENCIA', 'RANGO_COLOR', 4, '#F0F33A', '<70', 'Color amarillo', 0, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(6, 'COMPETENCIA', 'RANGO_COLOR', 6, '#F63535', '<30', 'Color rojo', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(7, 'COMPETENCIA', 'RANGO_FLECHA', 1, 'carita_excelente', '===100', 'Flecha para arriba', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(8, 'COMPETENCIA', 'RANGO_FLECHA', 2, 'carita_mejora', '<100', 'Flecha para arriba', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(9, 'COMPETENCIA', 'RANGO_FLECHA', 3, 'carita_atencion', '<90', 'Flecha para arriba', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(10, 'COMPETENCIA', 'RANGO_FLECHA', 4, 'carita_desempeño', '<70', 'Flecha para arriba', 0, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(11, 'COMPETENCIA', 'RANGO_FLECHA', 5, 'carita_situacion', '<60', 'Flecha para arriba', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(12, 'COMPETENCIA', 'RANGO_FLECHA', 6, 'carita_alerta', '<30', 'Flecha para abajo', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(13, 'COMENTARIOS', 'CANT_MAX_EVAL', 1, '6', '6', 'Cantidad máxima de comentarios a desplegar en informe final', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(14, 'CRITERIO_EVAL', 'RANGO_COLOR_PORC', 1, '#008000', '>= 80', 'Color verde para competencias destacables', 1, '2023-08-14 22:25:52', 'admin_florencia', '2023-08-14 22:25:52', ''),
(15, 'CRITERIO_EVAL', 'RANGO_COLOR_PORC', 2, '#808000', '>=30', 'Color verde oliva para competencias de oportunidades', 1, '2023-08-14 22:44:42', 'admin_florencia', '2023-08-14 22:44:42', ''),
(16, 'CRITERIO_EVAL', 'RANGO_COLOR_PORC', 3, '#00FF00', '<30', 'Color limón para la competencias en alertas', 1, '2023-08-14 22:44:42', 'admin_florencia', '2023-08-14 22:44:42', ''),
(17, 'DESTACABLE', 'TSOFT', 1, '#008000', '>=90', 'Colaborador Tsoft de acuerdo con el % dado - Color verde', 1, '2023-08-18 16:03:26', 'admin_emiliano', '2023-08-18 16:03:26', 'admin_emiliano'),
(18, 'DESTACABLE', 'REFERENTE', 1, '#008000', '>=90', 'Referente destacable de acuerdo con el % dado - Color verde', 1, '2023-08-18 16:03:26', 'admin_emiliano', '2023-08-18 16:03:26', 'admin_emiliano'),
(19, 'DESTACABLE', 'COLABORADOR', 1, '#008000', '>=90', 'Colaborador equipo completo de acuerdo con el % dado - Color verde', 1, '2023-08-18 16:10:33', 'admin_emiliano', '2023-08-18 16:10:33', 'admin_emiliano'),
(20, 'OPORTUNIDAD', 'REFERENTE', 1, '#FFFF00', '<=70', 'Rango de porcentaje en el cual una o más competencias aparecerá como oportunidad', 1, '2023-08-21 09:00:00', 'MCORTES', '2023-08-21 09:00:00', 'MCORTES'),
(21, 'OPORTUNIDAD', 'COLABORADOR', 1, '#FFFF00', '<=70', 'Rango de porcentaje en el cual una o más competencias aparecerá como oportunidad', 1, '2023-08-21 09:00:00', 'MCORTES', '2023-08-21 09:00:00', 'MCORTES'),
(22, 'OPORTUNIDAD', 'TSOFT', 1, '#FFFF00', '<=70', 'Rango de porcentaje en el cual una o más competencias aparecerá como oportunidad', 1, '2023-08-21 09:00:00', 'MCORTES', '2023-08-21 09:00:00', 'MCORTES'),
(23, 'ALERTA', 'REFERENTE', 1, '#FF0000', '<= 30', 'Rango de porcentaje en el cual una o más competencias aparecerá como alerta', 1, '2023-08-21 09:00:00', 'MCORTES', '2023-08-21 09:00:00', 'MCORTES'),
(24, 'ALERTA', 'COLABORADOR', 1, '#FF0000', '<= 30', 'Rango de porcentaje en el cual una o más competencias aparecerá como alerta', 1, '2023-08-21 09:00:00', 'MCORTES', '2023-08-21 09:00:00', 'MCORTES'),
(25, 'ALERTA', 'TSOFT', 1, '#FF0000', '<= 30', 'Rango de porcentaje en el cual una o más competencias aparecerá como alerta', 1, '2023-08-21 09:00:00', 'MCORTES', '2023-08-21 09:00:00', 'MCORTES'),
(26, 'ALERTA', 'DIF_RANGO', 1, '#FF0000', '>=70', 'Rango de porcentaje de diferencia entre dos evaluadores al mismo evaluado', 1, '2023-08-21 09:00:00', 'MCORTES', '2023-08-21 09:00:00', 'MCORTES'),
(27, 'COMPETENCIA', 'RANGO_LEYENDA', 1, 'EXCELENTE', '===100', 'Leyenda para la condición correspondiente', 1, '2023-08-24 23:27:09', 'admin_florencia', '2023-08-24 23:27:09', 'admin_florencia'),
(28, 'COMPETENCIA', 'RANGO_LEYENDA', 2, 'OPORTUNIDAD DE MEJORA', '<100', 'Leyenda para la condición correspondiente', 1, '2023-08-24 23:27:09', 'admin_florencia', '2023-08-24 23:27:09', 'admin_florencia'),
(29, 'COMPETENCIA', 'RANGO_LEYENDA', 3, 'REQUIERE ATENCIÓN', '<90', 'Leyenda para la condición correspondiente', 1, '2023-08-24 23:53:38', 'admin_florencia', '2023-08-24 23:53:38', 'admin_florencia'),
(30, 'COMPETENCIA', 'RANGO_LEYENDA', 4, 'SinAsignación', '<70', 'Leyenda para la condición correspondiente', 0, '2023-08-24 23:53:38', 'admin_florencia', '2023-08-24 23:53:38', 'admin_florencia'),
(31, 'COMPETENCIA', 'RANGO_LEYENDA', 5, 'REVISAR SITUACIÓN', '<60', 'Leyenda para la condición correspondiente', 1, '2023-08-25 16:32:25', 'admin_florencia', '2023-08-25 16:32:25', 'admin_florencia'),
(32, 'COMPETENCIA', 'RANGO_LEYENDA', 6, 'ALERTA', '<30', 'Leyenda para la condición correspondiente', 1, '2023-08-25 16:32:25', 'admin_florencia', '2023-08-25 16:32:25', 'admin_florencia'),
(33, 'EMAIL', 'REFERENTES_GRAL', 1, '<>', '<html>\n  <style>\n   #cssReferente{\n  padding: 10 3.5pt;\n  padding-left: 12px;\n  border-style: solid solid solid solid;\n  border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n  font-size: 10pt;\n  font-family: Calibri, sans-serif;\n  text-align: left;\n  margin: 0;\n  color: black;\n  font-size: 14pt;  \n\n}\n\n  #cssColaborador{\n  \n    padding: 10 3.5pt;\n    padding-left: 12px;\n    border-style: solid solid solid solid;\n  border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n    font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    text-align: left;\n    margin: 0;\n    color: black;\n    font-size: 14pt;\n  }\n\n  #cssColabAEvaluar{\n    background-color: #0070c0;\n    padding: 0 3.5pt;\n    border-width: 1pt;\n    border-style: solid solid solid solid;\n    border-color: windowtext;\n    font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    text-align: center;\n    margin: 0;\n    color: white; \n    font-size: 14pt\n  }\n\n    #cssTitleReferente{ background-color: #0070c0;\n    padding: 0 3.5pt;\n    border: 1pt solid windowtext; font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    text-align: center;\n    margin: 0;\n    color: white;\n    font-size: 14pt\n  }\n\n  #cssDisponibilidadFechas{\n    font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    margin: 0;\n    widows: auto;\n    word-spacing: 0px;\n    font-variant-caps: normal;\n    orphans: auto;\n    color: black;\n    font-family: Century Gothic, sans-serif;\n    text-decoration: underline;\n  }\n\n  #cssExplicacion{\n    font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    margin: 0;\n    widows: auto;\n    word-spacing: 0px;\n    font-variant-caps: normal;\n    orphans: auto;\n    color: black;\n    font-family: Century Gothic, sans-serif;\n    }\n\n  #cssDescripcion{\n    font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    margin: 0;\n    widows: auto;\n    word-spacing: 0px;\n    font-variant-caps: normal;\n    orphans: auto;\n    color: black;\n    font-family: Century Gothic, sans-serif;\n  }\n\n  #cssEstimado{\n    font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    font-size: 11pt\n}\n\n#cssOrganizadores{\n  font-size: 10pt;\n  font-family: Calibri, sans-serif;\n  margin: 0;\n  color: #212121;\n  font-family: Century Gothic, sans-serif;\n}\n\n    \n    </style>\n  <body>\n      <div id=\"cssEstimado\">\n          <p>\n            <span>Estimado(a) %%(nom_Lider)%%</span>\n          </p>         \n              <p id=\"cssDescripcion\">\n                <span\n                  >Como parte del seguimiento de servicio y mejora\n                  continua, disponibilizamos una breve evaluaci&oacute;n que nos\n                  permitir&aacute; analizar puntos de medici&oacute;n para llevar a cabo\n                  decisiones asertivas en pro del servicio, adem&aacute;s de\n                  identificar las falencias para entregar el apoyo\n                  necesario proactivamente.\n                </span>\n              </p>\n              \n            <br>\n\n              <p id=\"cssDisponibilidadFechas\" >\n                <b>\n                  <span\n                    >La evaluaci&oacute;n estar&aacute; disponible desde el %%(Fecha_ini)%% hasta el %%(Fecha_fin)%%\n                  </span>\n                </b>\n              </p>\n\n            <br>\n\n            <p id=\"cssExplicacion\">\n              <strong\n          >A cada referente le llegar&aacute; un correo personalizado con la\n          informaci&oacute;n de cada uno de sus colaboradores a evaluar.\n            </strong>\n            </p>\n            <br>\n            <table border=\"0\" cellspacing=\"0\" ellpadding=\"0\" style=\"width: 395.2pt; border-collapse: collapse\">\n                <thead>\n                    <tr style=\"height: 19pt\">\n                      <td valign=\"bottom\" nowrap=\"\" id=\"cssTitleReferente\" >\n                         <strong>Referente</strong>\n                      </td>\n                      <td valign=\"bottom\" nowrap=\"\" id=\"cssColabAEvaluar\">\n                         <b><span>Colaborador a Evaluar</span></b>\n                      </td>\n                    </tr>\n                    \n                </thead>\n                <tbody>\n                      %%(auxFilaRef)%%\n                      %%(auxFilaColab)%%\n                    \n                </tbody>              \n            </table>     \n            <br>\n            <br>\n            <span id=\"cssExplicacion\">Desde ya, agradecemos tu colaboraci&oacute;n<br>Saludos cordiales,</span>\n            <br>\n            <br>\n              <b>\n                <span id=\"cssOrganizadores\" >\n                  Factory DevOps / Academia de Formaci&oacute;n\n                  <br>\n                  Gerencia Delivery\n                  <br>\n                  TSOFT Chile\n                </span>\n                  <p>\n                    <!-- <img\n                      data-imagetype=\"AttachmentByCid\"\n                      originalsrc=\"cid:image001.jpg@01D97EB5.E33BAEA0\"\n                      data-custom=\"AAMkADM0MzViYWU4LTZiYWMtNDUzNC05YjcxLWViNzE2ZmNiYTFmNgBGAAAAAACBpkANzTaxR5R4xa78KjoGBwDbVAjpIeEGQp2B48BJ1nbFAAAAAAEMAAAlaskjPod0TbARcAmWnhJWAADpVof9AAABEgAQADn0Op0U%2Bj5Oo2amFHhRnls%3D\"\n                      naturalheight=\"0\"\n                      naturalwidth=\"0\"\n                      src=\"\"\n                      border=\"0\"\n                      alt=\"Image\"\n                      id=\"x_Imagen_x0020_2\"\n                      style=\"\n                        width: 374.99pt;\n                        height: 82.49pt;\n                        cursor: pointer;\n                        min-height: auto;\n                        min-width: auto;\n                      \"\n                      crossorigin=\"use-credentials\"\n                      fetchpriority=\"high\"\n                      class=\"Do8Zj\"> -->\n                  \n                  </p>\n        </div>\n    </body>\n</html>\n\n\n', NULL, 1, '2023-09-08 16:51:04', 'admin_emiliano', '2023-09-08 16:51:04', 'admin_emiliano'),
(34, 'EMAIL', 'REFERENTES_PERS', 2, '<>', '<html>\n  <style>\n    #cssReferente{\n  padding: 10 3.5pt;\n  padding-left: 12px;\n  border-style: solid solid solid solid;\n  border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n  font-size: 10pt;\n  font-family: Calibri, sans-serif;\n  text-align: left;\n  margin: 0;\n  color: black;\n  font-size: 14pt;  }\n\n  #cssColaborador{\n  \n    padding: 10 3.5pt;\n  padding-left: 12px;\n  border-style: solid solid solid solid;\n  border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n    font-size: 10pt;\n    font-family: Calibri, sans-serif;\n    text-align: left;\n    margin: 0;\n    color: black;\n    font-size: 14pt;\n  }\n    \n      #cssColabAEvaluar{\n        background-color: #0070c0;\n        padding: 0 3.5pt;\n        border-width: 1pt;\n        border-style: solid solid solid solid;\n        border-color: windowtext;\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        text-align: center;\n        margin: 0;\n        color: white; \n        font-size: 14pt\n      }\n    \n        #cssTitleReferente{ background-color: #0070c0;\n        padding: 0 3.5pt;\n        border: 1pt solid windowtext; font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        text-align: center;\n        margin: 0;\n        color: white;\n        font-size: 14pt\n      }\n    \n      #cssDisponibilidadFechas{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n        text-decoration: underline;\n      }\n    \n      #cssExplicacion{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n        }\n    \n      #cssDescripcion{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n      }\n    \n      #cssEstimado{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        font-size: 11pt\n    }\n    \n    #cssOrganizadores{\n      font-size: 10pt;\n      font-family: Calibri, sans-serif;\n      margin: 0;\n      color: #212121;\n      font-family: Century Gothic, sans-serif;\n    }\n    \n    </style>\n<body>\n  <div              \n   id=\"cssEstimado\"\n    >\n      <p>\n        <span \n          >Estimado(a) %%(nom_Referente)%%</span\n        >\n      </p>\n\n      <p\n       id=\"cssDescripcion\"\n      >\n        <span\n          \n          >Como parte del seguimiento de servicio y mejora\n          continua, disponibilizamos una evaluaci&oacute;n que nos\n          permitir&aacute; analizar puntos de medici&oacute;n para llevar a cabo\n          decisiones asertivas en pro del servicio, adem&aacute;s de\n          identificar las falencias para entregar el apoyo\n          necesario proactivamente.</span\n        >\n      </p>\n      <br>\n      <p\n       id=\"cssDisponibilidadFechas\"\n      >\n        <b\n          ><span\n          >La evaluaci&oacute;n estar&aacute; disponible desde el %%(Fecha_ini)%% hasta el %%(Fecha_fin)%%\n          </span></b\n        >\n      </p>  <br><p\n     id=\"cssExplicacion\"\n    >\n      <span\n        style=\"\n          color: black;\n          font-family: Century Gothic, sans-serif;\n        \"\n        >En este <a href=\"%%(URL)%%\">LINK<a/> podr&aacute;s evaluar a cada uno de tus\n        colaboradores asignados, de acuerdo con la siguiente\n        tabla:</span\n      >\n          \n        </p>\n            <br />\n            <table\n              border=\"0\"\n              cellspacing=\"0\"\n              cellpadding=\"0\"\n              style=\"width: 395.2pt; border-collapse: collapse\"\n            >\n              <tbody>\n                <tr style=\"height: 19pt\">\n                  <td\n                    valign=\"bottom\"\n                    nowrap=\"\"\n                    id=\"cssColabAEvaluar\"\n                  >\n                        <strong \n                          >Colaborador a Evaluar</strong\n                        >\n                  </td>\n                </tr>\n\n                <div>\n                \n                  %%(auxFilaRef)%%\n                \n                \n              </tbody>\n            </table>\n            \n            <br />\n          <br>\n            <span id=\"cssExplicacion\"\n              >Desde ya, agradecemos tu colaboraci&oacute;n<br>Saludos cordiales,</span\n            >\n        </span>\n        <br>\n\n\n            <br>\n              <b\n                ><span\n                  id=\"cssOrganizadores\"\n                  >Factory DevOps / Academia de Formaci&oacute;n<br>Gerencia Delivery<br>TSOFT Chile</span>\n\n            <p>\n                  <!-- <img\n                    data-imagetype=\"AttachmentByCid\"\n                    originalsrc=\"cid:image001.jpg@01D97EB5.E33BAEA0\"\n                    data-custom=\"AAMkADM0MzViYWU4LTZiYWMtNDUzNC05YjcxLWViNzE2ZmNiYTFmNgBGAAAAAACBpkANzTaxR5R4xa78KjoGBwDbVAjpIeEGQp2B48BJ1nbFAAAAAAEMAAAlaskjPod0TbARcAmWnhJWAADpVof9AAABEgAQADn0Op0U%2Bj5Oo2amFHhRnls%3D\"\n                    naturalheight=\"0\"\n                    naturalwidth=\"0\"\n                    src=\"\"\n                    alt=\"Image\"\n                    id=\"x_Imagen_x0020_2\"\n                    style=\"\n                      width: 374.99pt;\n                      height: 82.49pt;\n                      cursor: pointer;\n                      min-height: auto;\n                      min-width: auto;\n                    \"\n                    crossorigin=\"use-credentials\"\n                    fetchpriority=\"high\"\n                    class=\"Do8Zj\"\n                /> -->\n              </p>\n          \n          \n    </div>\n\n\n\n</body>\n\n</html>\n\n\n  ', 'Email personalizado destinado a los referentes de un proyecto', 1, '2023-09-11 09:22:10', 'admin_emiliano', '2023-09-11 09:22:10', 'admin_emiliano'),
(35, 'EMAIL', 'COLAB_GRAL', 1, '<>', '<html>\n  <style>\n     #cssReferente{\n      padding: 10 3.5pt;\n  padding-left: 12px;\n      border-style: solid solid solid solid;\n      border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n      font-family: Calibri, sans-serif;\n      text-align: left;\n      color: black; font-size: 14pt\n      }\n    \n      #cssColaborador{\n        padding: 10 3.5pt;\n  padding-left: 12px;\n  border-style: solid solid solid solid;\n  border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n        border-color: windowtext;\n        font-family: Calibri, sans-serif;\n        text-align: left;\n        color: black; font-size: 14pt\n      }\n    \n      #cssColabAEvaluar{\n        background-color: #d0cece;\n        height: 20pt;\n        padding: 0 3.5pt;\n        border: 1pt solid windowtext;font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        color: black; font-size: 14pt;\n        text-align: center;\n      }\n    \n        #cssTitleReferente{ \n          background-color: #d0cece;           \n          height: 20pt;\n          padding: 0 3.5pt;\n          border-width: 1pt;\n          border-style: solid solid solid solid;  \n          font-family: Calibri, sans-serif;\n          text-align: center;\n          color: black; font-size: 14pt\n      }\n    \n      #cssDisponibilidadFechas{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n        text-decoration: underline;\n      }\n    \n      #cssExplicacion{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n        }\n    \n      #cssDescripcion{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n      }\n    \n      #cssEstimado{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        font-size: 11pt\n    }\n    \n    #cssOrganizadores{\n      font-size: 10pt;\n      font-family: Calibri, sans-serif;\n      margin: 0;\n      color: #212121;\n      font-family: Century Gothic, sans-serif;\n    }\n    \n  </style>\n<body>\n  <div id=\"cssEstimado\" >\n    <p>\n      <span>Estimado(a) %%(nom_Lider)%%</span>\n    </p>\n      <p id=\"cssDescripcion\">\n        <span\n          >Como parte del seguimiento de servicio y mejora\n          continua, disponibilizamos una\n          evaluaci&oacute;n\n          que nos permitir&aacute; analizar puntos de medici&oacute;n para llevar\n          a cabo decisiones asertivas en pro del servicio, adem&aacute;s\n          de identificar las falencias para entregar el apoyo\n          necesario proactivamente.\n        </span>\n      </p>\n<br>\n      <p id=\"cssDisponibilidadFechas\">\n        <b>\n          <span>\n            La evaluaci&oacute;n estar&aacute; disponible desde el %%(Fecha_ini)%% hasta el %%(Fecha_fin)%%\n          </span>\n        </b>\n      </p>\n\n      <br>\n      <p id=\"cssExplicacion\">\n        <strong>\n          A cada colaborador le llegar&aacute; un correo personalizado con la informaci&oacute;n de cada uno de sus referentes a evaluar, incluyendo referentes Tsoft.\n        </strong>\n      </p>\n     <br>\n      <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"width: 445pt; border-collapse: collapse\">\n        <thead>\n          <tr style=\"height: 20pt\">\n            <td valign=\"bottom\" nowrap=\"\" id=\"cssColabAEvaluar\" >\n                <b>\n                  <span>Colaborador TSOFT</span>\n                </b>\n            </td>\n            <td nowrap=\"\" id=\"cssTitleReferente\">\n                <b>\n                  <span>\n                    Referente a evaluar\n                  </span>\n                </b>\n            </td>\n            <!-- <td nowrap=\"\" id=\"cssTitleReferente\" >\n                <b>\n                  <span>Referente Tsoft a evaluar</span>\n                </b>\n            </td> -->\n          </tr>\n               </thead>\n\n          <tbody>\n            %%(auxFilaColab)%%\n            %%(auxFilaRef)%%\n            \n        </tbody>\n      </table>\n      <br>\n      <br>\n\n      <span id=\"cssExplicacion\">\n        Desde ya, agradecemos tu colaboraci&oacute;n<br>Saludos cordiales,\n      </span> \n  \n        <br>\n        <br>\n        <b>\n          <span id=\"cssOrganizadores\" >\n            Factory DevOps / Academia de Formaci&oacute;n\n            <br>\n            Gerencia Delivery\n            <br>\n            TSOFT Chile\n          </span>\n            <p>\n              <!-- <img\n                data-imagetype=\"AttachmentByCid\"\n                originalsrc=\"cid:image001.jpg@01D97EB5.E33BAEA0\"\n                data-custom=\"AAMkADM0MzViYWU4LTZiYWMtNDUzNC05YjcxLWViNzE2ZmNiYTFmNgBGAAAAAACBpkANzTaxR5R4xa78KjoGBwDbVAjpIeEGQp2B48BJ1nbFAAAAAAEMAAAlaskjPod0TbARcAmWnhJWAADpVof9AAABEgAQADn0Op0U%2Bj5Oo2amFHhRnls%3D\"\n                naturalheight=\"0\"\n                naturalwidth=\"0\"\n                src=\"\"\n                border=\"0\"\n                alt=\"Image\"\n                id=\"x_Imagen_x0020_2\"\n                style=\"\n                  width: 374.99pt;\n                  height: 82.49pt;\n                  cursor: pointer;\n                  min-height: auto;\n                  min-width: auto;\n                \"\n                crossorigin=\"use-credentials\"\n                fetchpriority=\"high\"\n                class=\"Do8Zj\"\n            > -->\n          </p>\n      </div>\n</body>\n\n</html>\n\n\n', 'Cuerpo de email para notificar a quien corresponda sobre una evaluación de desempeño destinada a colaboradores', 1, '2023-09-11 10:04:10', 'admin_emiliano', '2023-09-11 10:04:10', 'admin_emiliano'),
(36, 'EMAIL', 'COLAB_PERS', 2, '<>', '<html>\n  <style>\n    #cssReferente{\n      padding: 10 3.5pt;\n  padding-left: 12px;\n  border-style: solid solid solid solid;\n  border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n      font-family: Calibri, sans-serif;\n      text-align: left;\n      color: black; font-size: 14pt\n      }\n    \n      #cssColaborador{\n        padding: 10 3.5pt;\n  padding-left: 12px;\n  border-style: solid solid solid solid;\n  border-right-width: 1pt;\n  border-bottom-width: 1pt;\n  border-left-width: 1pt;\n        border-color: windowtext;\n        font-family: Calibri, sans-serif;\n        text-align: left;\n        color: black; font-size: 14pt\n      }\n    \n      #cssColabAEvaluar{\n        background-color: #d0cece;\n        height: 20pt;\n        padding: 0 3.5pt;\n        border: 1pt solid windowtext;font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        color: black; font-size: 14pt\n      }\n    \n        #cssTitleReferente{ \n          background-color: #d0cece;           \n          height: 20pt;\n          padding: 0 3.5pt;\n          border-width: 1pt;\n          border-style: solid solid solid solid;  \n          font-family: Calibri, sans-serif;\n          text-align: center;\n          color: black; font-size: 14pt\n      }\n    \n      #cssDisponibilidadFechas{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n        text-decoration: underline;\n      }\n    \n      #cssExplicacion{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n        }\n    \n      #cssDescripcion{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        margin: 0;\n        widows: auto;\n        word-spacing: 0px;\n        font-variant-caps: normal;\n        orphans: auto;\n        color: black;\n        font-family: Century Gothic, sans-serif;\n      }\n    \n      #cssEstimado{\n        font-size: 10pt;\n        font-family: Calibri, sans-serif;\n        font-size: 11pt\n    }\n    \n    #cssOrganizadores{\n      font-size: 10pt;\n      font-family: Calibri, sans-serif;\n      margin: 0;\n      color: #212121;\n      font-family: Century Gothic, sans-serif;\n    }\n    \n    \n    </style>\n<body>\n  <div              \nid=\"cssEstimado\"\n  >\n    <p>\n      <span \n        >Estimado(a) %%(nom_Colab)%%</span\n      >\n    </p>\n\n    <p\n     id=\"cssDescripcion\"\n    >\n      <span\n        \n        >Como parte del seguimiento de servicio y mejora\n        continua, disponibilizamos una evaluaci&oacute;n que nos\n        permitir&aacute; analizar puntos de medici&oacute;n para llevar a cabo\n        decisiones asertivas en pro del servicio, adem&aacute;s de\n        identificar las falencias para entregar el apoyo\n        necesario proactivamente.</span\n      >\n    </p>\n    <br>\n    <p\n    id=\"cssDisponibilidadFechas\"\n    >\n     <strong\n         \n          >La evaluaci&oacute;n estar&aacute; disponible desde el %%(Fecha_ini)%% hasta el %%(Fecha_fin)%%\n        </strong>\n    </p>\n\n   <br>\n    <p\n    id=\"cssExplicacion\"\n    >\n      <span\n      \n        >En este <a href=\"%%(URL)%%\">LINK<a/> podr&aacute;s evaluar a cada uno de tus\n        referentes asignados, de acuerdo con la siguiente\n        tabla:</span\n      >\n    </p>\n  \n    <br>\n\n    <table\n      border=\"0\"\n      cellspacing=\"0\"\n      cellpadding=\"0\"\n      style=\"width: 445pt; border-collapse: collapse\"\n    >\n      <thead>\n        <tr style=\"height: 20pt\">\n          <td nowrap=\"\" id=\"cssTitleReferente\" >\n             <strong >\n                Referente a evaluar\n             </strong >\n          </td>\n        </tr>\n      </thead>\n        <tbody>\n          %%(auxFilaColab)%%\n       </tbody>\n    </table>\n\n\n    <br />\n  <br>\n    <span id=\"cssExplicacion\"\n      >Desde ya, agradecemos tu colaboraci&oacute;n<br>Saludos cordiales,</span\n    >\n</span>\n<br>\n\n\n   <br>\n      <b\n        ><span\n          id=\"cssOrganizadores\"\n          >Factory DevOps / Academia de Formaci&oacute;n<br>Gerencia Delivery<br>TSOFT Chile</span>\n\n       \n   \n      <span\n       \n        ><p>\n          <!-- <img\n            data-imagetype=\"AttachmentByCid\"\n            originalsrc=\"cid:image002.jpg@01D9E024.36F63590\"\n            data-custom=\"AAMkADM0MzViYWU4LTZiYWMtNDUzNC05YjcxLWViNzE2ZmNiYTFmNgBGAAAAAACBpkANzTaxR5R4xa78KjoGBwDbVAjpIeEGQp2B48BJ1nbFAAAAAAEMAAAlaskjPod0TbARcAmWnhJWAADpVof%2BAAABEgAQADxaWnYwHMhCpWlXpzN18ik%3D\"\n            naturalheight=\"0\"\n            naturalwidth=\"0\"\n            src=\"\"\n            border=\"0\"\n            alt=\"Image\"\n            id=\"x_Imagen_x0020_2\"\n            style=\"\n              width: 374.99pt;\n              height: 82.49pt;\n              min-height: auto;\n              min-width: auto;\n              cursor: pointer;\n            \"\n            crossorigin=\"use-credentials\"\n            fetchpriority=\"high\"\n            class=\"Do8Zj\"\n        /> -->\n      </p>\n    </div>\n  \n\n</body>\n\n</html>\n\n\n', 'Cuerpo de Email para notificar a los colaboradores sobre su evaluación de desempeño', 1, '2023-09-11 10:04:10', 'admin_emiliano', '2023-09-11 10:04:10', 'admin_emiliano'),
(37, 'EMAIL', 'ASUNTO_COLAB', 1, '<>', '[EDD_COLAB] - %%(nomEval)%% - %%(Fecha_ini)%% - %%(Fecha_fin)%%', NULL, 1, '2023-09-15 10:09:57', 'admin_emiliano', '2023-09-15 10:09:57', 'admin_emiliano'),
(38, 'EMAIL', 'ASUNTO_REF', 1, '<>', '[EDD_REF] - %%(nomEval)%% - %%(Fecha_ini)%% - %%(Fecha_fin)%%', NULL, 1, '2023-09-15 10:09:57', 'admin_emiliano', '2023-09-15 10:09:57', 'admin_emiliano'),
(39, 'EMAIL', 'DESTINATARIOS', 1, '<>', 'Emiliano Sotomayor, Emiliano.Sotomayor@tsoftglobal.com;\nMarcelo Cortés, marcelo.cortes@tsoftglobal.com', 'Contactos adjuntos importantes en los correos de notificación de EDD', 1, '2023-09-20 10:33:26', 'admin_emiliano', '2023-09-20 10:33:26', 'admin_emiliano'),
(40, 'EMAIL', 'DIAS_VIGENCIA', 1, '<>', '7', 'Días de vigencia que tendrá el link enviado por correo para resolver una evaluación de desempeño', 1, '2023-09-11 09:22:10', 'admin_emiliano', '2023-09-11 09:22:10', 'admin_emiliano'),
(41, 'EDD', 'TIEMPO_LIMITE', 1, '<>', '10', 'Representa el tiempo máximo que se contabiliza para realizar una evaluación de desempeño en minutos', 1, '2023-10-03 11:31:53', 'admin_emiliano', '2023-10-03 11:31:53', 'admin_emiliano'),
(42, 'TIPO_PROYECTO', 'ESHOPPING', 1, '<>', '90', 'Representa el intervalo entre ciclos de EDD en días', 1, '2023-10-03 11:31:53', 'admin_emiliano', '2023-10-03 11:31:53', 'admin_emiliano'),
(43, 'TIPO_PROYECTO', 'LLAVE EN MANO', 1, '<>', '180', 'Representa el intervalo entre ciclos de EDD en días para un proyecto determinado', 1, '2023-10-03 11:31:53', 'admin_emiliano', '2023-10-03 11:31:53', 'admin_emiliano'),
(44, 'IHH', 'ESTADO_PRESUPUESTO', 1, '#f00000', '<0', NULL, 1, '2024-04-16 14:26:17', 'admin_emiliano', '2024-04-16 14:26:17', 'admin_emiliano'),
(45, 'IHH', 'ESTADO_PRESUPUESTO', 2, '#1eeb22', '<=1000000', NULL, 1, '2024-04-16 14:26:17', 'admin_emiliano', '2024-04-16 14:26:17', 'admin_emiliano'),
(46, 'IHH', 'ESTADO_PRESUPUESTO', 3, '#f0e918', '<=3000000', NULL, 1, '2024-04-16 14:26:17', 'admin_emiliano', '2024-04-16 14:26:17', 'admin_emiliano'),
(47, 'IHH', 'ESTADO_PRESUPUESTO', 4, '#e38100', '>3000000', NULL, 1, '2024-04-16 14:26:17', 'admin_emiliano', '2024-04-16 14:26:17', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `contacto`
--

CREATE TABLE `contacto` (
  `idContacto` int(11) NOT NULL,
  `nomContacto` varchar(50) NOT NULL,
  `correoContacto` varchar(100) NOT NULL,
  `correoContacto2` varchar(100) NOT NULL,
  `telefonoContacto` varchar(15) NOT NULL,
  `fechaIni` datetime NOT NULL,
  `fechaFin` datetime DEFAULT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idServicio` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `curso`
--

CREATE TABLE `curso` (
  `idCurso` int(11) NOT NULL,
  `codCurso` varchar(20) NOT NULL,
  `nomCurso` varchar(50) NOT NULL,
  `tipoHH` varchar(12) NOT NULL,
  `duracionCursoHH` double NOT NULL,
  `cantSesionesCurso` int(11) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `cursoalumno`
--

CREATE TABLE `cursoalumno` (
  `idCursoAlumno` int(11) NOT NULL,
  `fechaIni` date NOT NULL,
  `horaIni` time NOT NULL,
  `fechaFin` date NOT NULL,
  `horaFin` time NOT NULL,
  `porcAsistencia` int(11) NOT NULL,
  `porcParticipacion` int(11) NOT NULL,
  `claseAprobada` char(1) DEFAULT NULL,
  `porcAprobacion` int(11) DEFAULT NULL,
  `estadoCurso` varchar(15) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idEmpleado` int(11) NOT NULL,
  `idCurso` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `cursoalumno_sesion`
--

CREATE TABLE `cursoalumno_sesion` (
  `idCursoAlumnoSesion` int(11) NOT NULL,
  `fechaIni` date NOT NULL,
  `horaIni` time NOT NULL,
  `fechaFin` date NOT NULL,
  `horaFin` time NOT NULL,
  `asistencia` int(11) NOT NULL,
  `participacion` int(11) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idSesion` int(11) NOT NULL,
  `idCursoAlumno` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddevalcompetencia`
--

CREATE TABLE `eddevalcompetencia` (
  `idEDDEvalCompetencia` int(11) NOT NULL,
  `nomCompetencia` varchar(50) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `eddevalcompetencia`
--

INSERT INTO `eddevalcompetencia` (`idEDDEvalCompetencia`, `nomCompetencia`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'COMUNICACION', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(2, 'INTELIGENCIA EMOCIONAL', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(3, 'GESTION', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(4, 'LIDERAZGO CUALITATIVO', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-11-16 15:52:26', 'admin_emiliano'),
(5, 'SERVICIO', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(6, 'PROACTIVIDAD', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(7, 'CONFIANZA', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(8, 'CAPACIDAD DE APRENDIZAJE ', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(9, 'DISPOSICION/ACTITUD', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(10, 'AUTONOMIA', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-11-16 15:26:40', 'admin_emiliano'),
(11, 'EMPODERAMIENTO', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(12, 'TRABAJO EN EQUIPO', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(13, 'TRABAJO BAJO PRESION', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(14, 'CAPACIDAD ANALITICA', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES'),
(15, 'DESEMPEÑO', 1, '2023-07-11 09:00:00', 'MCORTES', '2023-07-11 09:00:00', 'MCORTES');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddevalpregunta`
--

CREATE TABLE `eddevalpregunta` (
  `idEDDEvalPregunta` int(11) NOT NULL,
  `nomPregunta` varchar(300) NOT NULL,
  `ordenPregunta` int(11) NOT NULL,
  `tipoResp` char(1) NOT NULL,
  `preguntaObligatoria` tinyint(4) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `idEDDEvaluacion` int(11) NOT NULL,
  `idEDDEvalCompetencia` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddevalproyemp`
--

CREATE TABLE `eddevalproyemp` (
  `idEDDEvalProyEmp` int(11) NOT NULL,
  `idEDDEvaluacion` int(11) NOT NULL,
  `idEDDProyEmpEvaluador` int(11) NOT NULL,
  `idEDDProyEmpEvaluado` int(11) NOT NULL,
  `cicloEvaluacion` int(11) NOT NULL,
  `evalRespondida` tinyint(4) NOT NULL,
  `fechaIni` datetime NOT NULL,
  `fechaFin` datetime NOT NULL,
  `fechaIniVigenciaEvalRef` datetime DEFAULT NULL,
  `diasVigenciaEvalRef` int(11) DEFAULT NULL,
  `CorreoLinkEnviadoRef` tinyint(4) DEFAULT NULL,
  `fechaIniVigenciaEvalColab` datetime DEFAULT NULL,
  `diasVigenciaEvalRefColab` int(11) DEFAULT NULL,
  `CorreoLinkEnviadoColab` tinyint(4) DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddevalproyresp`
--

CREATE TABLE `eddevalproyresp` (
  `idEDDEvalProyResp` int(11) NOT NULL,
  `idEDDEvaluacion` int(11) NOT NULL,
  `idEDDProyEmp` int(11) NOT NULL,
  `respuesta` varchar(500) DEFAULT NULL,
  `verEnDashboard` tinyint(4) DEFAULT NULL,
  `ordenDashboard` int(11) DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `idEDDEvalProyEmp` int(11) NOT NULL,
  `idEDDEvalPregunta` int(11) NOT NULL,
  `idEDDEvalRespPreg` int(11) DEFAULT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddevalresppreg`
--

CREATE TABLE `eddevalresppreg` (
  `idEDDEvalRespPreg` int(11) NOT NULL,
  `nomRespPreg` varchar(50) NOT NULL,
  `ordenRespPreg` int(11) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `idEDDEvalPregunta` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddevaluacion`
--

CREATE TABLE `eddevaluacion` (
  `idEDDEvaluacion` int(11) NOT NULL,
  `nomEvaluacion` varchar(50) NOT NULL,
  `tipoEvaluacion` varchar(15) NOT NULL,
  `fechaIni` datetime NOT NULL,
  `fechaFin` datetime NOT NULL,
  `descFormulario` text NOT NULL,
  `logoFormulario` longblob NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddproyecto`
--

CREATE TABLE `eddproyecto` (
  `idEDDProyecto` int(11) NOT NULL,
  `nomProyecto` varchar(100) NOT NULL,
  `fechaInicio` datetime NOT NULL,
  `fechaFin` datetime DEFAULT NULL,
  `tipoProyecto` varchar(50) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `idServicio` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `eddproyecto`
--

INSERT INTO `eddproyecto` (`idEDDProyecto`, `nomProyecto`, `fechaInicio`, `fechaFin`, `tipoProyecto`, `isActive`, `idServicio`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'Banchile (CH)-Testing Factory 2024', '2024-01-01 00:00:00', '2024-12-01 00:00:00', 'LLAVE EN MANO', 1, 1, '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano'),
(2, 'Banco Security(CH) - Automatizadores Core Bancario', '2024-01-01 00:00:00', '2024-12-01 00:00:00', 'LLAVE EN MANO', 1, 3, '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano'),
(3, 'BCI (CH) - Testing Factory 2024', '2024-01-01 00:00:00', '2024-12-01 00:00:00', 'LLAVE EN MANO', 1, 4, '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano'),
(4, 'BNP PARIBAS CARDIF CL- Servicio de estabilización', '2024-04-01 00:00:00', '2025-03-01 00:00:00', 'LLAVE EN MANO', 1, 5, '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano'),
(5, 'Banco Consorcio - Testing Factory 2023', '2023-02-01 00:00:00', '2023-08-01 00:00:00', 'LLAVE EN MANO', 1, 6, '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano'),
(6, 'Consorcio financiero (CH)-Implementación Framework', '2024-01-01 00:00:00', '2024-07-01 00:00:00', 'LLAVE EN MANO', 1, 6, '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano'),
(7, 'ECOS (CH)- Servicio de Ingeniero QA', '2023-10-01 00:00:00', '2024-06-01 00:00:00', 'LLAVE EN MANO', 1, 7, '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano'),
(8, 'Banco Falabella (CH) – Portafolio de Habilitadores', '2024-01-01 00:00:00', '2024-12-01 00:00:00', 'LLAVE EN MANO', 1, 8, '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano'),
(9, 'Banco Falabella (CH) - Testing Factory 2024', '2024-01-01 00:00:00', '2024-06-01 00:00:00', 'LLAVE EN MANO', 1, 8, '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano'),
(10, 'Grupo Security (CH) -Certificación Microservicios con Karate Framework', '2023-06-01 00:00:00', '2024-08-01 00:00:00', 'LLAVE EN MANO', 1, 9, '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano'),
(11, 'Banco Security (CH) - Testing factory 2024', '2024-04-01 00:00:00', '2024-08-01 00:00:00', 'LLAVE EN MANO', 1, 9, '2024-06-24 16:08:48', 'admin_emiliano', '2024-06-24 16:08:48', 'admin_emiliano'),
(12, 'Parque Arauco (CH)- Testing Factory', '2024-04-01 00:00:00', '2024-07-01 00:00:00', 'LLAVE EN MANO', 1, 11, '2024-06-24 16:35:32', 'admin_emiliano', '2024-06-24 16:35:32', 'admin_emiliano'),
(13, 'Tanner (CH)-Servicio Core Bancario', '2023-10-01 00:00:00', '2024-10-01 00:00:00', 'LLAVE EN MANO', 1, 12, '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano'),
(14, 'Transbank (CH) -Testing Factory 2024', '2024-01-01 00:00:00', '2024-12-01 00:00:00', 'LLAVE EN MANO', 1, 13, '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano'),
(15, 'Vida Security (CH) - Servicio Testing Factory 2024', '2024-01-01 00:00:00', '2024-12-01 00:00:00', 'LLAVE EN MANO', 1, 14, '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano'),
(16, 'Workmate (CH) - Servicio de Control de Calidad & Mejoras Framework de Automatización', '2024-05-01 00:00:00', '2024-07-01 00:00:00', 'LLAVE EN MANO', 1, 15, '2024-06-24 16:57:54', 'admin_emiliano', '2024-06-24 16:57:54', 'admin_emiliano'),
(17, 'TSOFT - MISCELÁNEOS', '2023-01-01 00:00:00', '2030-12-31 00:00:00', 'LLAVE EN MANO', 1, 16, '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `eddproyemp`
--

CREATE TABLE `eddproyemp` (
  `idEDDProyEmp` int(11) NOT NULL,
  `idProyecto` int(11) NOT NULL,
  `idEmpleado` int(11) NOT NULL,
  `cargoEnProy` varchar(15) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `empleado`
--

CREATE TABLE `empleado` (
  `idEmpleado` int(11) NOT NULL,
  `nomEmpleado` varchar(50) NOT NULL,
  `correoEmpleado` varchar(100) NOT NULL,
  `telefonoEmpleado` varchar(15) DEFAULT NULL,
  `valorHH` double NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idPais` int(11) DEFAULT NULL,
  `idArea` int(11) NOT NULL,
  `idCargo` int(11) NOT NULL,
  `idLoginUsuario` int(11) NOT NULL,
  `idCliente` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `empleado`
--

INSERT INTO `empleado` (`idEmpleado`, `nomEmpleado`, `correoEmpleado`, `telefonoEmpleado`, `valorHH`, `isActive`, `idPais`, `idArea`, `idCargo`, `idLoginUsuario`, `idCliente`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'EMILIANO SOTOMAYOR', 'EMILIANO.SOTOMAYOR@TSOFTLATAM.COM', '777777777', 1500, 1, 2, 1, 1, 1, 16, '2023-02-20 09:00:00', 'MCORTES', '2023-09-05 12:07:42', 'admin_florencia'),
(3, 'MARCELO', 'Marcelo@hola.com', '123456', 4100, 1, 1, 1, 1, 3, 1, '2024-06-06 15:23:24', 'admin_sistema', '2024-06-06 15:23:24', 'admin_sistema'),
(4, 'Abarca Vergara Marco Fabián', 'Sin.correo@ejemplo.com', '', 9700, 1, 3, 1, 1, 4, 16, '2024-06-24 18:19:07', 'admin_emiliano', '2024-06-24 18:19:07', 'admin_emiliano'),
(5, 'Acevedo Parra José Alexander', 'Sin.correo@ejemplo.com', '', 11729, 1, 3, 1, 1, 6, 16, '2024-06-24 18:27:52', 'admin_emiliano', '2024-06-24 18:27:52', 'admin_emiliano'),
(6, 'Acostay Lara Inti', 'Sin.correo@ejemplo.com', '', 16873, 1, 3, 1, 1, 7, 16, '2024-06-24 18:28:51', 'admin_emiliano', '2024-06-24 18:28:51', 'admin_emiliano'),
(7, 'Acuña Haro José Pablo Demesio', 'Sin.correo@ejemplo.com', '', 12471, 1, 3, 1, 1, 8, 16, '2024-06-24 18:30:01', 'admin_emiliano', '2024-06-24 18:30:01', 'admin_emiliano'),
(8, 'Aedo Millas Carlos Bernardo', 'Sin.correo@ejemplo.com', '', 8012, 1, 3, 1, 1, 9, 16, '2024-06-24 18:30:34', 'admin_emiliano', '2024-06-24 18:30:34', 'admin_emiliano'),
(9, 'Aguila Angela', 'Sin.correo@ejemplo.com', '', 13065, 1, 3, 1, 1, 10, 16, '2024-06-24 18:30:59', 'admin_emiliano', '2024-06-24 18:30:59', 'admin_emiliano'),
(10, 'Aguilera Moreno Paris', 'Sin.correo@ejemplo.com', '', 10611, 1, 3, 1, 1, 11, 16, '2024-06-24 18:31:16', 'admin_emiliano', '2024-06-24 18:31:16', 'admin_emiliano'),
(11, 'Albornoz González,Matias Nicolás', 'Sin.correo@ejemplo.com', '', 11545, 1, 3, 1, 1, 12, 16, '2024-06-24 18:31:46', 'admin_emiliano', '2024-06-24 18:31:46', 'admin_emiliano'),
(12, 'Albornoz Armando', 'Sin.correo@ejemplo.com', '', 13504, 1, 3, 1, 1, 13, 16, '2024-06-24 18:32:27', 'admin_emiliano', '2024-06-24 18:32:27', 'admin_emiliano'),
(13, 'Alvarez La Cruz Karla Manuela', 'Sin.correo@ejemplo.com', '', 8574, 1, 3, 1, 1, 14, 16, '2024-06-24 18:33:29', 'admin_emiliano', '2024-06-24 18:33:29', 'admin_emiliano'),
(14, 'Alvarez Rodriguez Gerardo Christian', 'Sin.correo@ejemplo.com', '', 9377, 1, 3, 1, 1, 15, 16, '2024-06-24 18:33:59', 'admin_emiliano', '2024-06-24 18:33:59', 'admin_emiliano'),
(15, 'Amestica Maricel', 'Sin.correo@ejemplo.com', '', 8079, 1, 3, 1, 1, 16, 16, '2024-06-24 18:34:19', 'admin_emiliano', '2024-06-24 18:34:19', 'admin_emiliano'),
(16, 'Anders San Martin Carlos Fabian', 'Sin.correo@ejemplo.com', '', 9007, 1, 3, 1, 1, 17, 16, '2024-06-24 18:34:47', 'admin_emiliano', '2024-06-24 18:34:47', 'admin_emiliano'),
(17, 'Aranguiz Gonzalez Eduardo Patricio', 'Sin.correo@ejemplo.com', '', 8252, 1, 3, 1, 1, 18, 16, '2024-06-24 18:35:12', 'admin_emiliano', '2024-06-24 18:35:12', 'admin_emiliano'),
(18, 'Aravena Debora', 'Sin.correo@ejemplo.com', '', 11540, 1, 3, 1, 1, 19, 16, '2024-06-24 18:35:35', 'admin_emiliano', '2024-06-24 18:35:35', 'admin_emiliano'),
(19, 'Araya Ahumada Eduardo Andres', 'Sin.correo@ejemplo.com', '', 20953, 1, 3, 1, 1, 20, 16, '2024-06-24 18:36:10', 'admin_emiliano', '2024-06-24 18:36:10', 'admin_emiliano'),
(20, 'Arce paola', 'Sin.correo@ejemplo.com', '', 3688, 1, 3, 1, 1, 21, 16, '2024-06-24 18:36:32', 'admin_emiliano', '2024-06-24 18:36:32', 'admin_emiliano'),
(21, 'Archile Aguilar Freddy Jesus', 'Sin.correo@ejemplo.com', '', 7486, 1, 3, 1, 1, 22, 16, '2024-06-24 18:36:55', 'admin_emiliano', '2024-06-24 18:36:55', 'admin_emiliano'),
(22, 'Arcos Burgos Nicolás Alfonso', 'Sin.correo@ejemplo.com', '', 10834, 1, 3, 1, 1, 23, 16, '2024-06-24 18:38:10', 'admin_emiliano', '2024-06-24 18:38:10', 'admin_emiliano'),
(23, 'Astorga Fuentes Carolina Andrea', 'Sin.correo@ejemplo.com', '', 9672, 1, 3, 1, 1, 24, 16, '2024-06-24 18:41:31', 'admin_emiliano', '2024-06-24 18:41:31', 'admin_emiliano'),
(24, 'Astudillo Jaime', 'Sin.correo@ejemplo.com', '', 9920, 1, 3, 1, 1, 25, 16, '2024-06-24 18:42:11', 'admin_emiliano', '2024-06-24 18:42:11', 'admin_emiliano'),
(25, 'Avalos Escobar Jonathan Ignacio', 'Sin.correo@ejemplo.com', '', 8414, 1, 3, 1, 1, 26, 16, '2024-06-24 18:42:28', 'admin_emiliano', '2024-06-24 18:42:28', 'admin_emiliano'),
(26, 'Ayala Ali', 'Sin.correo@ejemplo.com', '', 10550, 1, 3, 1, 1, 27, 16, '2024-06-24 18:42:46', 'admin_emiliano', '2024-06-24 18:42:46', 'admin_emiliano'),
(27, 'Bahamondez Garcés Javier Alejandro', 'Sin.correo@ejemplo.com', '', 9017, 1, 3, 1, 1, 28, 16, '2024-06-24 18:43:02', 'admin_emiliano', '2024-06-24 18:43:02', 'admin_emiliano'),
(28, 'Banda Herrera Victoria Alejandra', 'Sin.correo@ejemplo.com', '', 12167, 1, 3, 1, 1, 29, 16, '2024-06-24 18:43:23', 'admin_emiliano', '2024-06-24 18:43:23', 'admin_emiliano'),
(29, 'Barcia Iriarte David Andres', 'Sin.correo@ejemplo.com', '', 3628, 1, 3, 1, 1, 30, 16, '2024-06-24 18:43:43', 'admin_emiliano', '2024-06-24 18:43:43', 'admin_emiliano'),
(30, 'Barra Araya Aaron', 'Sin.correo@ejemplo.com', '', 6656, 1, 3, 1, 1, 31, 16, '2024-06-24 18:44:06', 'admin_emiliano', '2024-06-24 18:44:06', 'admin_emiliano'),
(31, 'Barrera Lagos Daniel Ignacio', 'Sin.correo@ejemplo.com', '', 7513, 1, 3, 1, 1, 32, 16, '2024-06-24 18:45:27', 'admin_emiliano', '2024-06-24 18:45:27', 'admin_emiliano'),
(32, 'Barrera Riquelme Diego Ignacio', 'Sin.correo@ejemplo.com', '', 9480, 1, 3, 1, 1, 33, 16, '2024-06-24 18:45:48', 'admin_emiliano', '2024-06-24 18:45:48', 'admin_emiliano'),
(33, 'Basáez Miranda Andrés Eduardo', 'Sin.correo@ejemplo.com', '', 6605, 1, 3, 1, 1, 34, 16, '2024-06-24 18:46:05', 'admin_emiliano', '2024-06-24 18:46:05', 'admin_emiliano'),
(34, 'Basaure Lecaros Diego Felipe', 'Sin.correo@ejemplo.com', '', 10942, 1, 3, 1, 1, 35, 16, '2024-06-24 18:46:27', 'admin_emiliano', '2024-06-24 18:46:27', 'admin_emiliano'),
(35, 'Basualto Correa Denisse Nicole', 'Sin.correo@ejemplo.com', '', 12456, 1, 3, 1, 1, 36, 16, '2024-06-24 18:46:45', 'admin_emiliano', '2024-06-24 18:46:45', 'admin_emiliano'),
(36, 'Bateman Machuca Guillermo', 'Sin.correo@ejemplo.com', '', 7973, 1, 3, 1, 1, 37, 16, '2024-06-24 18:47:07', 'admin_emiliano', '2024-06-24 18:47:07', 'admin_emiliano'),
(37, 'Becerra Azocar Camilo Esteban', 'Sin.correo@ejemplo.com', '', 8976, 1, 3, 1, 1, 38, 16, '2024-06-24 18:47:36', 'admin_emiliano', '2024-06-24 18:47:36', 'admin_emiliano'),
(38, 'Benardis Pérez Braulio Esteban', 'Sin.correo@ejemplo.com', '', 13473, 1, 3, 1, 1, 39, 16, '2024-06-24 18:48:12', 'admin_emiliano', '2024-06-24 18:48:12', 'admin_emiliano'),
(39, 'Benavides Cariqueo Francisca Carolina', 'Sin.correo@ejemplo.com', '', 6656, 1, 3, 1, 1, 40, 16, '2024-06-24 18:48:31', 'admin_emiliano', '2024-06-24 18:48:31', 'admin_emiliano'),
(40, 'Bracamonte Torrez Abril Del Rosario', 'Sin.correo@ejemplo.com', '', 6656, 1, 3, 1, 1, 41, 16, '2024-06-24 18:49:07', 'admin_emiliano', '2024-06-24 18:49:07', 'admin_emiliano'),
(41, 'Bravo Alvarez Oscar', 'Sin.correo@ejemplo.com', '', 5790, 1, 3, 1, 1, 42, 16, '2024-06-24 18:49:33', 'admin_emiliano', '2024-06-24 18:49:33', 'admin_emiliano'),
(42, 'Bravo Alex', 'Sin.correo@ejemplo.com', '', 13567, 1, 3, 1, 1, 43, 16, '2024-06-24 18:49:50', 'admin_emiliano', '2024-06-24 18:49:50', 'admin_emiliano'),
(43, 'Bravo Emanuel', 'Sin.correo@ejemplo.com', '', 7257, 1, 3, 1, 1, 44, 16, '2024-06-25 12:26:33', 'admin_emiliano', '2024-06-25 12:26:33', 'admin_emiliano'),
(44, 'Brito Colmenarez Daniela del Carmen', 'Sin.correo@ejemplo.com', '', 10093, 1, 3, 1, 1, 45, 16, '2024-06-25 12:27:02', 'admin_emiliano', '2024-06-25 12:27:02', 'admin_emiliano'),
(45, 'BUGUEÑO JAQUE ESTEFANÍA ANDREA', 'Sin.correo@ejemplo.com', '', 8103, 1, 3, 1, 1, 46, 16, '2024-06-25 12:32:42', 'admin_emiliano', '2024-06-25 12:32:42', 'admin_emiliano'),
(46, 'CABRERA BAEZA PABLO ANDRÉS', 'Sin.correo@ejemplo.com', '', 11316, 1, 3, 1, 1, 47, 16, '2024-06-25 12:33:54', 'admin_emiliano', '2024-06-25 12:33:54', 'admin_emiliano'),
(47, 'CABRERA CORNEJO ARMANDO ALFONSO', 'Sin.correo@ejemplo.com', '', 7187, 1, 3, 1, 1, 48, 16, '2024-06-25 12:34:17', 'admin_emiliano', '2024-06-25 12:34:17', 'admin_emiliano'),
(48, 'CABRERA REYES PABLO ERNESTO', 'Sin.correo@ejemplo.com', '', 9017, 1, 3, 1, 1, 49, 16, '2024-06-25 12:35:03', 'admin_emiliano', '2024-06-25 12:35:03', 'admin_emiliano'),
(49, 'CÁCERES CREUZ ESTEBAN ORLANDO', 'Sin.correo@ejemplo.com', '', 12124, 1, 3, 1, 1, 50, 16, '2024-06-25 12:35:29', 'admin_emiliano', '2024-06-25 12:35:29', 'admin_emiliano'),
(50, 'CAMACHO LOPEZ GUADALUPE', 'Sin.correo@ejemplo.com', '', 13068, 1, 3, 1, 1, 51, 16, '2024-06-25 12:35:47', 'admin_emiliano', '2024-06-25 12:35:47', 'admin_emiliano'),
(51, 'CAMPILLAY RUMINOT LORENA  ARACELLY', 'Sin.correo@ejemplo.com', '', 12640, 1, 3, 1, 1, 52, 16, '2024-06-25 12:36:11', 'admin_emiliano', '2024-06-25 12:36:11', 'admin_emiliano'),
(52, 'CANCINO SALAZAR RODOLFO ARTURO', 'Sin.correo@ejemplo.com', '', 6656, 1, 3, 1, 1, 53, 16, '2024-06-25 12:36:32', 'admin_emiliano', '2024-06-25 12:36:32', 'admin_emiliano'),
(53, 'CANDIA AGURTO SEBASTIAN ALEJANDRO', 'Sin.correo@ejemplo.com', '', 14550, 1, 3, 1, 1, 54, 16, '2024-06-25 12:36:48', 'admin_emiliano', '2024-06-25 12:36:48', 'admin_emiliano'),
(54, 'CANIULAO FLORES JUAN CARLOS', 'Sin.correo@ejemplo.com', '', 16770, 1, 3, 1, 1, 55, 16, '2024-06-25 12:37:04', 'admin_emiliano', '2024-06-25 12:37:04', 'admin_emiliano'),
(55, 'CARDOZO PIRELA GABRIELA TERESA', 'Sin.correo@ejemplo.com', '', 6201, 1, 3, 1, 1, 56, 16, '2024-06-25 12:37:20', 'admin_emiliano', '2024-06-25 12:37:20', 'admin_emiliano'),
(56, 'CARRASCO MANUEL', 'Sin.correo@ejemplo.com', '', 10625, 1, 3, 1, 1, 57, 16, '2024-06-25 12:37:41', 'admin_emiliano', '2024-06-25 12:37:41', 'admin_emiliano'),
(57, 'CARRILLO AGUILERA MAXIMILIANO JESUS', 'Sin.correo@ejemplo.com', '', 7187, 1, 3, 1, 1, 58, 16, '2024-06-25 12:38:04', 'admin_emiliano', '2024-06-25 12:38:04', 'admin_emiliano'),
(58, 'CARTER TORO MATIAS ALEXANDER', 'Sin.correo@ejemplo.com', '', 6795, 1, 3, 1, 1, 59, 16, '2024-06-25 12:38:22', 'admin_emiliano', '2024-06-25 12:38:22', 'admin_emiliano'),
(59, 'CASTILLO ALZURU LOURDES EFIGENIA', 'Sin.correo@ejemplo.com', '', 10614, 1, 3, 1, 1, 60, 16, '2024-06-25 12:38:40', 'admin_emiliano', '2024-06-25 12:38:40', 'admin_emiliano'),
(60, 'CASTILLO DE BARRIENTOS YUSMIRA DE JESUS', 'Sin.correo@ejemplo.com', '', 9132, 1, 3, 1, 1, 61, 16, '2024-06-25 12:38:54', 'admin_emiliano', '2024-06-25 12:38:54', 'admin_emiliano'),
(61, 'CASTILLO MORGADO DANIEL FELIPE', 'Sin.correo@ejemplo.com', '', 11095, 1, 3, 1, 1, 62, 16, '2024-06-25 12:39:10', 'admin_emiliano', '2024-06-25 12:39:10', 'admin_emiliano'),
(62, 'CASTILLO VILLALOBOS GERARDO ANDRES', 'Sin.correo@ejemplo.com', '', 8340, 1, 3, 1, 1, 63, 16, '2024-06-25 12:39:22', 'admin_emiliano', '2024-06-25 12:39:22', 'admin_emiliano'),
(63, 'CHAMORRO HUIRCAN RICHARD MARCELO', 'Sin.correo@ejemplo.com', '', 9244, 1, 3, 1, 1, 64, 16, '2024-06-25 12:39:37', 'admin_emiliano', '2024-06-25 12:39:37', 'admin_emiliano'),
(64, 'CHAVEZ ESPINOZA RONALDO ALIRO', 'Sin.correo@ejemplo.com', '', 8405, 1, 3, 1, 1, 65, 16, '2024-06-25 12:39:54', 'admin_emiliano', '2024-06-25 12:39:54', 'admin_emiliano'),
(65, 'CLAVO MARIA', 'Sin.correo@ejemplo.com', '', 8099, 1, 3, 1, 1, 66, 16, '2024-06-25 12:40:15', 'admin_emiliano', '2024-06-25 12:40:15', 'admin_emiliano'),
(66, 'COMAS QUEZADA ADOLFO NICOLÁS', 'Sin.correo@ejemplo.com', '', 7698, 1, 3, 1, 1, 67, 16, '2024-06-25 12:40:38', 'admin_emiliano', '2024-06-25 12:40:38', 'admin_emiliano'),
(67, 'CONCHA SOTO OLGA MARGARITA', 'Sin.correo@ejemplo.com', '', 9151, 1, 3, 1, 1, 68, 16, '2024-06-25 12:41:45', 'admin_emiliano', '2024-06-25 12:41:45', 'admin_emiliano'),
(68, 'CONTRERAS CONTRERAS FRANCISCO ANDRES', 'Sin.correo@ejemplo.com', '', 6809, 1, 3, 1, 1, 69, 16, '2024-06-25 12:42:05', 'admin_emiliano', '2024-06-25 12:42:05', 'admin_emiliano'),
(69, 'CONTRERAS MARÍN PALOMA ANDREA', 'Sin.correo@ejemplo.com', '', 6656, 1, 3, 1, 1, 70, 16, '2024-06-25 12:42:21', 'admin_emiliano', '2024-06-25 12:42:21', 'admin_emiliano'),
(70, 'CONTRERAS PEREZ MARCO ANTONIO', 'Sin.correo@ejemplo.com', '', 9956, 1, 3, 1, 1, 71, 16, '2024-06-25 12:42:49', 'admin_emiliano', '2024-06-25 12:42:49', 'admin_emiliano'),
(71, 'CONTRERAS SEPULVEDA CRISTIAN', 'Sin.correo@ejemplo.com', '', 11794, 1, 3, 1, 1, 72, 16, '2024-06-25 12:43:07', 'admin_emiliano', '2024-06-25 12:43:07', 'admin_emiliano'),
(72, 'CONTRERAS TRONCOSO PABLO CESAR', 'Sin.correo@ejemplo.com', '', 11729, 1, 3, 1, 1, 73, 16, '2024-06-25 12:43:24', 'admin_emiliano', '2024-06-25 12:43:24', 'admin_emiliano'),
(73, 'CORREA GUTIERREZ CLAUDIA', 'Sin.correo@ejemplo.com', '', 11378, 1, 3, 1, 1, 74, 16, '2024-06-25 12:43:54', 'admin_emiliano', '2024-06-25 12:43:54', 'admin_emiliano'),
(74, 'CORTÉS ORTEGA MARCELO', 'Sin.correo@ejemplo.com', '', 15328, 1, 3, 1, 1, 75, 16, '2024-06-25 12:44:11', 'admin_emiliano', '2024-06-25 12:44:11', 'admin_emiliano'),
(75, 'CORTEZ GUAJARDO ARIEL PATRICIO', 'Sin.correo@ejemplo.com', '', 8576, 1, 3, 1, 1, 76, 16, '2024-06-25 12:44:29', 'admin_emiliano', '2024-06-25 12:44:29', 'admin_emiliano'),
(76, 'CRUZ REYES MICHEL CESAR', 'Sin.correo@ejemplo.com', '', 6591, 1, 3, 1, 1, 77, 16, '2024-06-25 12:44:51', 'admin_emiliano', '2024-06-25 12:44:51', 'admin_emiliano'),
(77, 'CUEVAS FRANCO', 'Sin.correo@ejemplo.com', '', 1591, 1, 3, 1, 1, 78, 16, '2024-06-25 12:45:27', 'admin_emiliano', '2024-06-25 12:45:27', 'admin_emiliano'),
(78, 'DAZA FRANCO', 'Sin.correo@ejemplo.com', '', 9920, 1, 3, 1, 1, 79, 16, '2024-06-25 12:45:41', 'admin_emiliano', '2024-06-25 12:45:41', 'admin_emiliano'),
(79, 'DEVIA FERNÁNDEZ SEBASTIÁN EDUARDO', 'Sin.correo@ejemplo.com', '', 10093, 1, 3, 1, 1, 80, 16, '2024-06-25 12:46:04', 'admin_emiliano', '2024-06-25 12:46:04', 'admin_emiliano'),
(80, 'DÍAZ DONOSO RODRIGO ENRIQUE', 'Sin.correo@ejemplo.com', '', 7449, 1, 3, 1, 1, 81, 16, '2024-06-25 12:46:21', 'admin_emiliano', '2024-06-25 12:46:21', 'admin_emiliano'),
(81, 'DONOSO RAMIREZ MARCIA CAROLINA', 'Sin.correo@ejemplo.com', '', 12396, 1, 3, 1, 1, 82, 16, '2024-06-25 12:47:15', 'admin_emiliano', '2024-06-25 12:47:15', 'admin_emiliano'),
(82, 'DURAND ESCALONA GUSTAVO JOSÉ', 'Sin.correo@ejemplo.com', '', 14988, 1, 3, 1, 1, 83, 16, '2024-06-25 12:47:30', 'admin_emiliano', '2024-06-25 12:47:30', 'admin_emiliano'),
(83, 'ESCALONA JOYCE', 'Sin.correo@ejemplo.com', '', 11342, 1, 3, 1, 1, 84, 16, '2024-06-25 12:47:56', 'admin_emiliano', '2024-06-25 12:47:56', 'admin_emiliano'),
(84, 'ESCOBAR CASTAÑEDA MAURICIO SEBASTIAN', 'Sin.correo@ejemplo.com', '', 13406, 1, 3, 1, 1, 85, 16, '2024-06-25 12:48:10', 'admin_emiliano', '2024-06-25 12:48:10', 'admin_emiliano'),
(85, 'ESCOBAR SILVA SIMÓN EDUARDO', 'Sin.correo@ejemplo.com', '', 10102, 1, 3, 1, 1, 86, 16, '2024-06-25 12:48:24', 'admin_emiliano', '2024-06-25 12:48:24', 'admin_emiliano'),
(86, 'FERNANDEZ GREGORY', 'Sin.correo@ejemplo.com', '', 6827, 1, 3, 1, 1, 87, 16, '2024-06-25 12:48:42', 'admin_emiliano', '2024-06-25 12:48:42', 'admin_emiliano'),
(87, 'FERNANDEZ JAVIER', 'Sin.correo@ejemplo.com', '', 9001, 1, 3, 1, 1, 88, 16, '2024-06-25 12:48:55', 'admin_emiliano', '2024-06-25 12:48:55', 'admin_emiliano'),
(88, 'FERNANDEZ RENAN', 'Sin.correo@ejemplo.com', '', 11468, 1, 3, 1, 1, 89, 16, '2024-06-25 12:49:08', 'admin_emiliano', '2024-06-25 12:49:08', 'admin_emiliano'),
(89, 'FERRADA CID CLAUDIO FELIPE', 'Sin.correo@ejemplo.com', '', 9455, 1, 3, 1, 1, 90, 16, '2024-06-25 12:49:24', 'admin_emiliano', '2024-06-25 12:49:24', 'admin_emiliano'),
(90, 'FERREIRA QUILÁN JUAN IGNACIO', 'Sin.correo@ejemplo.com', '', 6656, 1, 3, 1, 1, 91, 16, '2024-06-25 12:49:43', 'admin_emiliano', '2024-06-25 12:49:43', 'admin_emiliano'),
(91, 'FIERRO SAMUEL', 'Sin.correo@ejemplo.com', '', 12349, 1, 3, 1, 1, 92, 16, '2024-06-25 12:50:06', 'admin_emiliano', '2024-06-25 12:50:06', 'admin_emiliano'),
(92, 'FLORES BRAVO CRISTOBAL GONZALO', 'Sin.correo@ejemplo.com', '', 11278, 1, 3, 1, 1, 93, 16, '2024-06-25 12:50:27', 'admin_emiliano', '2024-06-25 12:50:27', 'admin_emiliano'),
(93, 'FLORES MORENO MATÍAS FERNANDO', 'Sin.correo@ejemplo.com', '', 6656, 1, 3, 1, 1, 94, 16, '2024-06-25 12:50:48', 'admin_emiliano', '2024-06-25 12:50:48', 'admin_emiliano'),
(94, 'FREDES DANIELA', 'Sin.correo@ejemplo.com', '', 13495, 1, 3, 1, 1, 95, 16, '2024-06-25 12:51:24', 'admin_emiliano', '2024-06-25 12:51:24', 'admin_emiliano'),
(95, 'FUENTES CATALÁN JOSÉ FELIPE', 'Sin.correo@ejemplo.com', '', 12854, 1, 3, 1, 1, 96, 16, '2024-06-25 12:51:42', 'admin_emiliano', '2024-06-25 12:51:42', 'admin_emiliano'),
(96, 'FUENTES KACIC YERKO ARIEL', 'Sin.correo@ejemplo.com', '', 11307, 1, 3, 1, 1, 97, 16, '2024-06-25 12:52:02', 'admin_emiliano', '2024-06-25 12:52:02', 'admin_emiliano'),
(97, 'FUENTES OPAZO RAUL ALBERTO', 'Sin.correo@ejemplo.com', '', 12720, 1, 3, 1, 1, 98, 16, '2024-06-25 12:52:18', 'admin_emiliano', '2024-06-25 12:52:18', 'admin_emiliano'),
(98, 'FUENTES RAMÍREZ ALEX ANTIDORO', 'Sin.correo@ejemplo.com', '', 15421, 1, 3, 1, 1, 99, 16, '2024-06-25 12:52:31', 'admin_emiliano', '2024-06-25 12:52:31', 'admin_emiliano'),
(99, 'FUENTES CARLOS', 'Carlos.Fuentes@tsoftglobal.com', '', 12743, 1, 3, 1, 1, 100, 16, '2024-06-25 15:44:03', 'admin_emiliano', '2024-06-25 15:44:03', 'admin_emiliano'),
(100, 'FUENZALIDA BARRERA CAMILA ANDREA', 'Camila.Fuenzalida@tsoftglobal.com', '', 12172, 1, 3, 1, 1, 101, 16, '2024-06-25 15:44:37', 'admin_emiliano', '2024-06-25 15:44:37', 'admin_emiliano'),
(101, 'FUENZALIDA RODRIGUEZ DANIELA PAZ', 'Daniela.Fuenzalida@tsoftglobal.com', '', 10987, 1, 3, 1, 1, 102, 16, '2024-06-25 15:45:02', 'admin_emiliano', '2024-06-25 15:45:02', 'admin_emiliano'),
(102, 'FUENZALIDA SOTO RICARDO DAVID', 'Ricardo.Fuenzalida@tsoftglobal.com', '', 7712, 1, 3, 1, 1, 103, 16, '2024-06-25 15:45:24', 'admin_emiliano', '2024-06-25 15:45:24', 'admin_emiliano'),
(103, 'GAETE SALAZAR ISMAEL ANTONIO', 'Ismael.Gaete@tsoftglobal.com', '', 9868, 1, 3, 1, 1, 104, 16, '2024-06-25 15:45:44', 'admin_emiliano', '2024-06-25 15:45:44', 'admin_emiliano'),
(104, 'GALLARDO MENDEZ CHRISTINA ESTRELLA', 'Christina.Gallardo@tsoftglobal.com', '', 8495, 1, 3, 1, 1, 105, 16, '2024-06-25 15:46:11', 'admin_emiliano', '2024-06-25 15:46:11', 'admin_emiliano'),
(105, 'GALLARDO MARCO ANTONIO', 'Marco.Gallardo@tsoftglobal.com', '', 12971, 1, 3, 1, 1, 106, 16, '2024-06-25 15:46:29', 'admin_emiliano', '2024-06-25 15:46:29', 'admin_emiliano'),
(106, 'GANDOLFO CARLOS', 'Carlos.Gandolfo@tsoftglobal.com', '', 8316, 1, 3, 1, 1, 107, 16, '2024-06-25 15:46:57', 'admin_emiliano', '2024-06-25 15:46:57', 'admin_emiliano'),
(107, 'GARATE PIÑONES ISRAEL ANDRES', 'Israel.Garate@tsoftglobal.com', '', 15656, 1, 3, 1, 1, 108, 16, '2024-06-25 15:47:18', 'admin_emiliano', '2024-06-25 15:47:18', 'admin_emiliano'),
(108, 'GARCIA RODRIGO', 'Rodrigo.Garcia@tsoftglobal.com', '', 9402, 1, 3, 1, 1, 109, 16, '2024-06-25 15:47:34', 'admin_emiliano', '2024-06-25 15:47:34', 'admin_emiliano'),
(109, 'GIL PÉREZ KAREN BEATRIZ', 'Karen.Gil@tsoftglobal.com', '', 12386, 1, 3, 1, 1, 110, 16, '2024-06-25 15:47:53', 'admin_emiliano', '2024-06-25 15:47:53', 'admin_emiliano'),
(110, 'GODOY RIVEROS LEONEL ENRIQUE', 'Leonel.Godoy@tsoftglobal.com', '', 6578, 1, 3, 1, 1, 111, 16, '2024-06-25 15:48:29', 'admin_emiliano', '2024-06-25 15:48:29', 'admin_emiliano'),
(111, 'GODOY VERGARA HUGO FRANCISCO', 'Hugo.Godoy@tsoftglobal.com', '', 12938, 1, 3, 1, 1, 112, 16, '2024-06-25 15:48:44', 'admin_emiliano', '2024-06-25 15:48:44', 'admin_emiliano'),
(112, 'GONZALEZ ACEVEDO FELIPE ANDRÉS', 'Felipe.Gonzalez@tsoftglobal.com', '', 16781, 1, 3, 1, 1, 113, 16, '2024-06-25 15:48:59', 'admin_emiliano', '2024-06-25 15:48:59', 'admin_emiliano'),
(113, 'GONZALEZ AGUILAR MANUEL OSVALDO', 'Manuel.Gonzalez@tsoftglobal.com', '', 8771, 1, 3, 1, 1, 114, 16, '2024-06-25 15:49:15', 'admin_emiliano', '2024-06-25 15:49:15', 'admin_emiliano'),
(114, 'GONZALEZ JARAMILLO MARLENE SCARLET', 'Marlene.Gonzalez@tsoftglobal.com', '', 10279, 1, 3, 1, 1, 115, 16, '2024-06-25 15:49:30', 'admin_emiliano', '2024-06-25 15:49:30', 'admin_emiliano'),
(115, 'GONZALEZ PINCHETTI GABRIELA', 'Gabriela.Gonzalez@tsoftglobal.com', '', 8246, 1, 3, 1, 1, 116, 16, '2024-06-25 15:50:17', 'admin_emiliano', '2024-06-25 15:50:17', 'admin_emiliano'),
(116, 'GONZALEZ ROMAN YOCELYN', 'Yocelyn.Gonzalez@tsoftglobal.com', '', 12068, 1, 3, 1, 1, 117, 16, '2024-06-25 15:50:35', 'admin_emiliano', '2024-06-25 15:50:35', 'admin_emiliano'),
(117, 'GONZALEZ VEGA CLAUDIO', 'Claudio.Gonzalez@tsoftglobal.com', '', 8362, 1, 3, 1, 1, 118, 16, '2024-06-25 15:50:48', 'admin_emiliano', '2024-06-25 15:50:48', 'admin_emiliano'),
(118, 'GONZALEZ VILORIA JONATHAN ALBERTO', 'Jonathan.Gonzalez@tsoftglobal.com', '', 12741, 1, 3, 1, 1, 119, 16, '2024-06-25 15:51:07', 'admin_emiliano', '2024-06-25 15:51:07', 'admin_emiliano'),
(119, 'GONZÁLEZ ZEPEDA DENNIS VANNIA', 'Dennis.GonzAlez@tsoftglobal.com', '', 10501, 1, 3, 1, 1, 120, 16, '2024-06-25 15:51:35', 'admin_emiliano', '2024-06-25 15:51:35', 'admin_emiliano'),
(120, 'GONZALEZ, CLAUDIA', 'Claudia.Gonzalez@tsoftglobal.com', '', 15158, 1, 3, 1, 1, 121, 16, '2024-06-25 15:51:51', 'admin_emiliano', '2024-06-25 15:51:51', 'admin_emiliano'),
(121, 'GUGGERI PEREIRA FEDERICO MARTIN', 'Federico.Guggeri@tsoftglobal.com', '', 17752, 1, 3, 1, 1, 122, 16, '2024-06-25 15:52:24', 'admin_emiliano', '2024-06-25 15:52:24', 'admin_emiliano'),
(122, 'GUTIERREZ CANIV JUAN CARLOS', 'Juan.Gutierrez@tsoftglobal.com', '', 10580, 1, 3, 1, 1, 123, 16, '2024-06-25 15:52:38', 'admin_emiliano', '2024-06-25 15:52:38', 'admin_emiliano'),
(123, 'GUTIERREZ GONZALEZ JONATHAN CARLOS', 'Jonathan.Gutierrez@tsoftglobal.com', '', 6816, 1, 3, 1, 1, 124, 16, '2024-06-25 15:52:55', 'admin_emiliano', '2024-06-25 15:52:55', 'admin_emiliano'),
(124, 'GUTIÉRREZ ROJAS LESME MARTÍN', 'Lesme.GutiErrez@tsoftglobal.com', '', 10767, 1, 3, 1, 1, 125, 16, '2024-06-25 15:53:25', 'admin_emiliano', '2024-06-25 15:53:25', 'admin_emiliano'),
(125, 'GUZMÁN OSORIO MANUEL ALEJANDRO', 'Manuel.GuzmAn@tsoftglobal.com', '', 8238, 1, 3, 1, 1, 126, 16, '2024-06-25 15:53:45', 'admin_emiliano', '2024-06-25 15:53:45', 'admin_emiliano'),
(126, 'HENRIQUEZ VILLEGAS EDUARDO SEBASTIAN', 'Eduardo.Henriquez@tsoftglobal.com', '', 13392, 1, 3, 1, 1, 127, 16, '2024-06-25 15:54:04', 'admin_emiliano', '2024-06-25 15:54:04', 'admin_emiliano'),
(127, 'HENRIQUEZ ZAMBRANO CARLOS ALBERTO', 'Carlos.Henriquez@tsoftglobal.com', '', 11051, 1, 3, 1, 1, 128, 16, '2024-06-25 15:54:21', 'admin_emiliano', '2024-06-25 15:54:21', 'admin_emiliano'),
(128, 'HERNANDEZ ARAVENA MAXIMILIANO RICARDO', 'Maximiliano.Hernandez@tsoftglobal.com', '', 11388, 1, 3, 1, 1, 129, 16, '2024-06-25 15:54:57', 'admin_emiliano', '2024-06-25 15:54:57', 'admin_emiliano'),
(129, 'HERNANDEZ GUZMAN, EDITH', 'Edith.Hernandez@tsoftglobal.com', '', 8269, 1, 3, 1, 1, 130, 16, '2024-06-25 15:55:32', 'admin_emiliano', '2024-06-25 15:55:32', 'admin_emiliano'),
(130, 'HERNANDEZ RIQUELME ANDRÉS ARMANDO', 'AndrEs.Hernandez@tsoftglobal.com', '', 14329, 1, 3, 1, 1, 131, 16, '2024-06-25 15:55:50', 'admin_emiliano', '2024-06-25 15:55:50', 'admin_emiliano'),
(131, 'HERNANDEZ TORRES ALEXIS IGNACIO', 'Alexis.Hernandez@tsoftglobal.com', '', 6578, 1, 3, 1, 1, 132, 16, '2024-06-25 15:56:07', 'admin_emiliano', '2024-06-25 15:56:07', 'admin_emiliano'),
(132, 'HERNANDEZ GERARDO JAVIER', 'Gerardo.Hernandez@tsoftglobal.com', '', 7974, 1, 3, 1, 1, 133, 16, '2024-06-25 15:56:28', 'admin_emiliano', '2024-06-25 15:56:28', 'admin_emiliano'),
(133, 'HERRERA CORNEJO JOSE OSVALDO', 'Jose.Herrera@tsoftglobal.com', '', 8119, 1, 3, 1, 1, 134, 16, '2024-06-25 15:57:42', 'admin_emiliano', '2024-06-25 15:57:42', 'admin_emiliano'),
(134, 'HERRERA MARTINEZ JUAN EDUARDO', 'Juan.Herrera@tsoftglobal.com', '', 12211, 1, 3, 1, 1, 135, 16, '2024-06-25 15:58:14', 'admin_emiliano', '2024-06-25 15:58:14', 'admin_emiliano'),
(135, 'HERRERA PINTO SEBASTIAN BENJAMIN', 'Sebastian.Herrera@tsoftglobal.com', '', 6468, 1, 3, 1, 1, 136, 16, '2024-06-25 15:58:34', 'admin_emiliano', '2024-06-25 15:58:34', 'admin_emiliano'),
(136, 'HIDALGO ARAYA JOSÉ ALEJANDRO', 'JosE.Hidalgo@tsoftglobal.com', '', 11416, 1, 3, 1, 1, 137, 16, '2024-06-25 15:59:19', 'admin_emiliano', '2024-06-25 15:59:19', 'admin_emiliano'),
(137, 'IBARRA LÓPEZ YEISY LESLIE', 'Yeisy.Ibarra@tsoftglobal.com', '', 12255, 1, 3, 1, 1, 138, 16, '2024-06-25 16:00:22', 'admin_emiliano', '2024-06-25 16:00:22', 'admin_emiliano'),
(138, 'INFANTE CORONA ARIANA', 'Ariana.Infante@tsoftglobal.com', '', 13575, 1, 3, 1, 1, 139, 16, '2024-06-25 16:00:37', 'admin_emiliano', '2024-06-25 16:00:37', 'admin_emiliano'),
(139, 'JIMENEZ GAJARDO JORDAN ANDRES', 'Jordan.Jimenez@tsoftglobal.com', '', 6996, 1, 3, 1, 1, 140, 16, '2024-06-25 16:00:50', 'admin_emiliano', '2024-06-25 16:00:50', 'admin_emiliano'),
(140, 'KELLY LUISINA', 'Luisina.Kelly@tsoftglobal.com', '', 1334, 1, 3, 1, 1, 141, 16, '2024-06-25 16:01:08', 'admin_emiliano', '2024-06-25 16:01:08', 'admin_emiliano'),
(141, 'LAGOS PABLO', 'Pablo.Lagos@tsoftglobal.com', '', 16007, 1, 3, 1, 1, 142, 16, '2024-06-25 16:01:27', 'admin_emiliano', '2024-06-25 16:01:27', 'admin_emiliano'),
(142, 'LASTRA DOMINGUEZ FRANCISCA IGNACIA', 'Francisca.Lastra@tsoftglobal.com', '', 7486, 1, 3, 1, 1, 143, 16, '2024-06-25 16:02:39', 'admin_emiliano', '2024-06-25 16:02:39', 'admin_emiliano'),
(143, 'LEFICOY CASANOVA NAYADETH ELDAY', 'Nayadeth.Leficoy@tsoftglobal.com', '', 9950, 1, 3, 1, 1, 144, 16, '2024-06-25 16:03:00', 'admin_emiliano', '2024-06-25 16:03:00', 'admin_emiliano'),
(144, 'LEIVA NARANJO CAROL ESTEPHANIE', 'Carol.Leiva@tsoftglobal.com', '', 4858, 1, 3, 1, 1, 145, 16, '2024-06-25 16:03:16', 'admin_emiliano', '2024-06-25 16:03:16', 'admin_emiliano'),
(145, 'LETELIER SEPULVEDA GABRIEL ALEJANDRO', 'Gabriel.Letelier@tsoftglobal.com', '', 4253, 1, 3, 1, 1, 146, 16, '2024-06-25 16:04:25', 'admin_emiliano', '2024-06-25 16:04:25', 'admin_emiliano'),
(146, 'LICANQUEO PÉREZ LUCIA', 'Lucia.Licanqueo@tsoftglobal.com', '', 7803, 1, 3, 1, 1, 147, 16, '2024-06-25 16:04:55', 'admin_emiliano', '2024-06-25 16:04:55', 'admin_emiliano'),
(147, 'LILLO BELTRÁN FELIPE ANTONIO', 'Felipe.Lillo@tsoftglobal.com', '', 11428, 1, 3, 1, 1, 148, 16, '2024-06-25 16:05:13', 'admin_emiliano', '2024-06-25 16:05:13', 'admin_emiliano'),
(148, 'LLANTÉN HERRERA JOSÉ CAMILO', 'JosE.LlantEn@tsoftglobal.com', '', 10286, 1, 3, 1, 1, 149, 16, '2024-06-25 16:05:33', 'admin_emiliano', '2024-06-25 16:05:33', 'admin_emiliano'),
(149, 'LOPEZ CHAVEZ CHRISTIAN FRANCISCO', 'Christian.Lopez@tsoftglobal.com', '', 7187, 1, 3, 1, 1, 150, 16, '2024-06-25 16:05:48', 'admin_emiliano', '2024-06-25 16:05:48', 'admin_emiliano'),
(150, 'LOPEZ MANIEU DOMINIQUE CONSTANZA', 'Dominique.Lopez@tsoftglobal.com', '', 7803, 1, 3, 1, 1, 151, 16, '2024-06-25 16:07:09', 'admin_emiliano', '2024-06-25 16:07:09', 'admin_emiliano'),
(151, 'LOPEZ ANDRES', 'Andres.Lopez@tsoftglobal.com', '', 7749, 1, 3, 1, 1, 152, 16, '2024-06-25 16:07:31', 'admin_emiliano', '2024-06-25 16:07:31', 'admin_emiliano'),
(152, 'LORCA MORALES JAIME ANDRES', 'Jaime.Lorca@tsoftglobal.com', '', 8203, 1, 3, 1, 1, 153, 16, '2024-06-25 16:08:52', 'admin_emiliano', '2024-06-25 16:08:52', 'admin_emiliano'),
(153, 'LORCA VEGA DAVID MACARIO', 'David.Lorca@tsoftglobal.com', '', 16613, 1, 3, 1, 1, 154, 16, '2024-06-25 16:09:08', 'admin_emiliano', '2024-06-25 16:09:08', 'admin_emiliano'),
(154, 'LUNA BENAVIDES PAMELA', 'Pamela.Luna@tsoftglobal.com', '', 9956, 1, 3, 1, 1, 155, 16, '2024-06-25 16:09:25', 'admin_emiliano', '2024-06-25 16:09:25', 'admin_emiliano'),
(155, 'MADARIAGA TRONCOSO DIEGO ORLANDO', 'Diego.Madariaga@tsoftglobal.com', '', 7807, 1, 3, 1, 1, 156, 16, '2024-06-25 16:09:43', 'admin_emiliano', '2024-06-25 16:09:43', 'admin_emiliano'),
(156, 'MADURO URBINA JESUS ROBERTO', 'Jesus.Maduro@tsoftglobal.com', '', 8367, 1, 3, 1, 1, 157, 16, '2024-06-25 16:09:56', 'admin_emiliano', '2024-06-25 16:09:56', 'admin_emiliano'),
(157, 'MALDONADO RODRIGUEZ TANIA MARÍA', 'Tania.Maldonado@tsoftglobal.com', '', 9360, 1, 3, 1, 1, 158, 16, '2024-06-25 16:10:14', 'admin_emiliano', '2024-06-25 16:10:14', 'admin_emiliano'),
(158, 'MANRÍQUEZ MANRÍQUEZ HÉCTOR LUIS', 'HEctor.ManrIquez@tsoftglobal.com', '', 8898, 1, 3, 1, 1, 159, 16, '2024-06-25 16:10:35', 'admin_emiliano', '2024-06-25 16:10:35', 'admin_emiliano'),
(159, 'MANRIQUEZ RUBILAR GUSTAVO SAMUEL', 'Gustavo.Manriquez@tsoftglobal.com', '', 12458, 1, 3, 1, 1, 160, 16, '2024-06-25 16:10:52', 'admin_emiliano', '2024-06-25 16:10:52', 'admin_emiliano'),
(160, 'MANZANILLA PULGAR SALVADOR ANTONIO', 'Salvador.Manzanilla@tsoftglobal.com', '', 12637, 1, 3, 1, 1, 161, 16, '2024-06-25 16:11:20', 'admin_emiliano', '2024-06-25 16:11:20', 'admin_emiliano'),
(161, 'MANZO MUÑOZ DANIEL ANTONIO', 'Daniel.Manzo@tsoftglobal.com', '', 14329, 1, 3, 1, 1, 162, 16, '2024-06-25 16:11:34', 'admin_emiliano', '2024-06-25 16:11:34', 'admin_emiliano'),
(162, 'MARAMBIO ACUÑA NAYP CLAAS', 'Nayp.Marambio@tsoftglobal.com', '', 10023, 1, 3, 1, 1, 163, 16, '2024-06-25 16:11:49', 'admin_emiliano', '2024-06-25 16:11:49', 'admin_emiliano'),
(163, 'MARÍN CASTILLO EDGAR ALEXANDER', 'Edgar.MarIn@tsoftglobal.com', '', 10614, 1, 3, 1, 1, 164, 16, '2024-06-25 16:12:13', 'admin_emiliano', '2024-06-25 16:12:13', 'admin_emiliano'),
(164, 'MARIN LAGOS MATÍAS IGNACIO', 'MatIas.Marin@tsoftglobal.com', '', 6216, 1, 3, 1, 1, 165, 16, '2024-06-25 16:12:38', 'admin_emiliano', '2024-06-25 16:12:38', 'admin_emiliano'),
(165, 'MARTINEZ CARRASCO CRISTOPHER GERALD', 'Cristopher.Martinez@tsoftglobal.com', '', 13278, 1, 3, 1, 1, 166, 16, '2024-06-25 16:12:56', 'admin_emiliano', '2024-06-25 16:12:56', 'admin_emiliano'),
(166, 'MARTINEZ FLORES PABLO', 'Pablo.Martinez@tsoftglobal.com', '', 11316, 1, 3, 1, 1, 167, 16, '2024-06-25 16:13:12', 'admin_emiliano', '2024-06-25 16:13:12', 'admin_emiliano'),
(167, 'MARTINEZ MONTIEL FRANCISCO JAVIER', 'Francisco.Martinez@tsoftglobal.com', '', 7087, 1, 3, 1, 1, 168, 16, '2024-06-25 16:13:32', 'admin_emiliano', '2024-06-25 16:13:32', 'admin_emiliano'),
(168, 'MARTINEZ PARADA VALERIA PAULINA', 'Valeria.Martinez@tsoftglobal.com', '', 14091, 1, 3, 1, 1, 169, 16, '2024-06-25 16:14:29', 'admin_emiliano', '2024-06-25 16:14:29', 'admin_emiliano'),
(169, 'MASIAS ESTEBAN', 'Esteban.Masias@tsoftglobal.com', '', 12768, 1, 3, 1, 1, 170, 16, '2024-06-25 16:14:55', 'admin_emiliano', '2024-06-25 16:14:55', 'admin_emiliano'),
(170, 'MATHEUS MONTERO DOUGLEXYS CAROLINA', 'Douglexys.Matheus@tsoftglobal.com', '', 8853, 1, 3, 1, 1, 171, 16, '2024-06-25 16:16:54', 'admin_emiliano', '2024-06-25 16:16:54', 'admin_emiliano'),
(171, 'MAURE BASTIAN', 'Bastian.Maure@tsoftglobal.com', '', 7706, 1, 3, 1, 1, 172, 16, '2024-06-25 16:17:34', 'admin_emiliano', '2024-06-25 16:17:34', 'admin_emiliano'),
(172, 'MAYOLAFQUEN SOTO MIRIAM', 'Miriam.Mayolafquen@tsoftglobal.com', '', 10442, 1, 3, 1, 1, 173, 16, '2024-06-25 16:17:48', 'admin_emiliano', '2024-06-25 16:17:48', 'admin_emiliano'),
(173, 'MAZZINI CONTADOR MARIO LUIS', 'Mario.Mazzini@tsoftglobal.com', '', 15236, 1, 3, 1, 1, 174, 16, '2024-06-25 16:18:07', 'admin_emiliano', '2024-06-25 16:18:07', 'admin_emiliano'),
(174, 'MEDINA MEDINA CRISTIAN FRANCISCO', 'Cristian.Medina@tsoftglobal.com', '', 13066, 1, 3, 1, 1, 175, 16, '2024-06-25 16:18:22', 'admin_emiliano', '2024-06-25 16:18:22', 'admin_emiliano'),
(175, 'MEJÍAS SOTO HÉCTOR ARTURO', 'HEctor.MejIas@tsoftglobal.com', '', 8898, 1, 3, 1, 1, 176, 16, '2024-06-25 16:18:55', 'admin_emiliano', '2024-06-25 16:18:55', 'admin_emiliano'),
(176, 'MELLA CARRASCO FRANCISCO JAVIER', 'Francisco.Mella@tsoftglobal.com', '', 8268, 1, 3, 1, 1, 177, 16, '2024-06-25 16:19:37', 'admin_emiliano', '2024-06-25 16:19:37', 'admin_emiliano'),
(177, 'MÉNDEZ LLANOS JOSÉ LUIS', 'JosE.MEndez@tsoftglobal.com', '', 10274, 1, 3, 1, 1, 178, 16, '2024-06-25 16:20:01', 'admin_emiliano', '2024-06-25 16:20:01', 'admin_emiliano'),
(178, 'MEZA GODOZ CLAUDIA CONSTANZA', 'Claudia.Meza@tsoftglobal.com', '', 17510, 1, 3, 1, 1, 179, 16, '2024-06-25 16:20:20', 'admin_emiliano', '2024-06-25 16:20:20', 'admin_emiliano'),
(179, 'MIRANDA LUCERO JAASIEL PATRICIO', 'Jaasiel.Miranda@tsoftglobal.com', '', 7297, 1, 3, 1, 1, 180, 16, '2024-06-25 16:20:39', 'admin_emiliano', '2024-06-25 16:20:39', 'admin_emiliano'),
(180, 'MIRANDA PEREZ RAFAEL EDUARDO', 'Rafael.Miranda@tsoftglobal.com', '', 8292, 1, 3, 1, 1, 181, 16, '2024-06-25 16:20:59', 'admin_emiliano', '2024-06-25 16:20:59', 'admin_emiliano'),
(181, 'MOLINA VICTOR', 'Victor.MolinA@tsoftglobal.com', '', 13466, 1, 3, 1, 1, 182, 16, '2024-06-25 16:21:19', 'admin_emiliano', '2024-06-25 16:21:19', 'admin_emiliano'),
(182, 'MOLINARI SOTOMAYOR JOSÉ LUIS', 'JosE.Molinari@tsoftglobal.com', '', 7694, 1, 3, 1, 1, 183, 16, '2024-06-25 16:23:17', 'admin_emiliano', '2024-06-25 16:23:17', 'admin_emiliano'),
(183, 'MONSALVE CORTEZ JACKSON AARON', 'Jackson.Monsalve@tsoftglobal.com', '', 11264, 1, 3, 1, 1, 184, 16, '2024-06-25 16:23:40', 'admin_emiliano', '2024-06-25 16:23:40', 'admin_emiliano'),
(184, 'MONTECINOS CATALDO HECTOR ALEJANDRO', 'Hector.Montecinos@tsoftglobal.com', '', 13226, 1, 3, 1, 1, 185, 16, '2024-06-25 16:23:55', 'admin_emiliano', '2024-06-25 16:23:55', 'admin_emiliano'),
(185, 'MORA ZÚÑIGA MAYLEE ESPERANZA', 'Maylee.Mora@tsoftglobal.com', '', 5481, 1, 3, 1, 1, 186, 16, '2024-06-25 16:24:11', 'admin_emiliano', '2024-06-25 16:24:11', 'admin_emiliano'),
(186, 'MORAGA OCHOA CRISTIAN', 'Cristian.Moraga@tsoftglobal.com', '', 15487, 1, 3, 1, 1, 187, 16, '2024-06-25 16:24:31', 'admin_emiliano', '2024-06-25 16:24:31', 'admin_emiliano'),
(187, 'MORAGA VARGAS EDUARDO ANTONIO', 'Eduardo.Moraga@tsoftglobal.com', '', 12018, 1, 3, 1, 1, 188, 16, '2024-06-25 16:24:53', 'admin_emiliano', '2024-06-25 16:24:53', 'admin_emiliano'),
(188, 'MORALES HERNANDEZ ALEJANDRO ANTONIO', 'Alejandro.Morales@tsoftglobal.com', '', 8726, 1, 3, 1, 1, 189, 16, '2024-06-25 16:25:37', 'admin_emiliano', '2024-06-25 16:25:37', 'admin_emiliano'),
(189, 'MORALES URIBE BETZABET INÉS', 'Betzabet.Morales@tsoftglobal.com', '', 9395, 1, 3, 1, 1, 190, 16, '2024-06-25 16:25:56', 'admin_emiliano', '2024-06-25 16:25:56', 'admin_emiliano'),
(190, 'MORENO COLOMA MARCO ANTONIO', 'Marco.Moreno@tsoftglobal.com', '', 11739, 1, 3, 1, 1, 191, 16, '2024-06-25 16:33:59', 'admin_emiliano', '2024-06-25 16:33:59', 'admin_emiliano'),
(191, 'MORENO ORTEGA MARIAN JENIREE', 'Marian.Moreno@tsoftglobal.com', '', 9697, 1, 3, 1, 1, 192, 16, '2024-06-25 16:34:12', 'admin_emiliano', '2024-06-25 16:34:12', 'admin_emiliano'),
(192, 'MORENO ROMERO BEXIMAR', 'Beximar.Moreno@tsoftglobal.com', '', 7400, 1, 3, 1, 1, 193, 16, '2024-06-25 16:34:30', 'admin_emiliano', '2024-06-25 16:34:30', 'admin_emiliano'),
(193, 'MOSCOSO ELGUETA NAYARETT NICOLE', 'Nayarett.Moscoso@tsoftglobal.com', '', 7840, 1, 3, 1, 1, 194, 16, '2024-06-25 16:34:45', 'admin_emiliano', '2024-06-25 16:34:45', 'admin_emiliano'),
(194, 'MOSQUEIRA MÁRQUEZ ZULEMA DEL ROSARIO', 'Zulema.Mosqueira@tsoftglobal.com', '', 8745, 1, 3, 1, 1, 195, 16, '2024-06-25 16:36:11', 'admin_emiliano', '2024-06-25 16:36:11', 'admin_emiliano'),
(195, 'MOYA SANCHEZ PAOLA ANDREA', 'Paola.Moya@tsoftglobal.com', '', 10785, 1, 3, 1, 1, 196, 16, '2024-06-25 16:36:27', 'admin_emiliano', '2024-06-25 16:36:27', 'admin_emiliano'),
(196, 'MUNOZ ALEXIS', 'Alexis.Munoz@tsoftglobal.com', '', 5497, 1, 3, 1, 1, 197, 16, '2024-06-25 16:36:41', 'admin_emiliano', '2024-06-25 16:36:41', 'admin_emiliano'),
(197, 'MUÑOZ CORTEZ JUANA LISSETT', 'Juana.MuNoz@tsoftglobal.com', '', 7526, 1, 3, 1, 1, 198, 16, '2024-06-25 16:37:03', 'admin_emiliano', '2024-06-25 16:37:03', 'admin_emiliano'),
(198, 'MUÑOZ GONZÁLEZ ALEX MARCEL', 'Alex.MuNoz@tsoftglobal.com', '', 7228, 1, 3, 1, 1, 199, 16, '2024-06-25 16:37:35', 'admin_emiliano', '2024-06-25 16:37:35', 'admin_emiliano'),
(199, 'MUÑOZ LEAL GONZALO MATIAS', 'Gonzalo.MuNoz@tsoftglobal.com', '', 11615, 1, 3, 1, 1, 200, 16, '2024-06-25 16:38:21', 'admin_emiliano', '2024-06-25 16:38:21', 'admin_emiliano'),
(200, 'MUÑOZ LOPEZ BRANDON ANDRES', 'Brandon.MuNoz@tsoftglobal.com', '', 6996, 1, 3, 1, 1, 201, 16, '2024-06-25 16:38:44', 'admin_emiliano', '2024-06-25 16:38:44', 'admin_emiliano'),
(201, 'MUÑOZ SALGADO CARLOS HUMBERTO', 'Carlos.MuNoz@tsoftglobal.com', '', 12634, 1, 3, 1, 1, 202, 16, '2024-06-25 16:40:44', 'admin_emiliano', '2024-06-25 16:40:44', 'admin_emiliano'),
(202, 'NAHUELNIR JUAN', 'Juan.Nahuelnir@tsoftglobal.com', '', 11785, 1, 3, 1, 1, 203, 16, '2024-06-25 16:41:11', 'admin_emiliano', '2024-06-25 16:41:11', 'admin_emiliano'),
(203, 'NAVARRO REIMAN MARÍA JOSÉ', 'MarIa.Navarro@tsoftglobal.com', '', 11739, 1, 3, 1, 1, 204, 16, '2024-06-25 16:41:32', 'admin_emiliano', '2024-06-25 16:41:32', 'admin_emiliano'),
(204, 'NEIRA MAUTZ JONATHAN ANTONIO', 'Jonathan.Neira@tsoftglobal.com', '', 6599, 1, 3, 1, 1, 205, 16, '2024-06-25 16:43:03', 'admin_emiliano', '2024-06-25 16:43:03', 'admin_emiliano'),
(205, 'NILO PALACIOS DANIEL BASTIAN', 'Daniel.Nilo@tsoftglobal.com', '', 8093, 1, 3, 1, 1, 206, 16, '2024-06-25 16:43:30', 'admin_emiliano', '2024-06-25 16:43:30', 'admin_emiliano'),
(206, 'NOVOA RODRIGO', 'Rodrigo.NovoA@tsoftglobal.com', '', 10424, 1, 3, 1, 1, 207, 16, '2024-06-25 16:45:37', 'admin_emiliano', '2024-06-25 16:45:37', 'admin_emiliano'),
(207, 'OJEDA HERNANDEZ BARTOLOME OSVALDO', 'Bartolome.Ojeda@tsoftglobal.com', '', 17859, 1, 3, 1, 1, 208, 16, '2024-06-25 16:45:53', 'admin_emiliano', '2024-06-25 16:45:53', 'admin_emiliano'),
(208, 'OLAVE HENRÍQUEZ CAROLINA NATALIA', 'Carolina.Olave@tsoftglobal.com', '', 10577, 1, 3, 1, 1, 209, 16, '2024-06-25 16:46:07', 'admin_emiliano', '2024-06-25 16:46:07', 'admin_emiliano'),
(209, 'OLEJNIK ALIZO BENJAMIN FRANKLIN', 'Benjamin.Olejnik@tsoftglobal.com', '', 9413, 1, 3, 1, 1, 210, 16, '2024-06-25 16:46:23', 'admin_emiliano', '2024-06-25 16:46:23', 'admin_emiliano'),
(210, 'OLGUIN LOBOS RICARDO EDUARDO', 'Ricardo.Olguin@tsoftglobal.com', '', 7187, 1, 3, 1, 1, 211, 16, '2024-06-25 16:47:59', 'admin_emiliano', '2024-06-25 16:47:59', 'admin_emiliano'),
(211, 'OLIVARES MORALES GONZALO RUBEN', 'Gonzalo.Olivares@tsoftglobal.com', '', 6795, 1, 3, 1, 1, 212, 16, '2024-06-25 16:48:48', 'admin_emiliano', '2024-06-25 16:48:48', 'admin_emiliano'),
(212, 'ORTEGA FIGUEROA LUIS MANUEL', 'Luis.Ortega@tsoftglobal.com', '', 8244, 1, 3, 1, 1, 213, 16, '2024-06-25 16:49:06', 'admin_emiliano', '2024-06-25 16:49:06', 'admin_emiliano'),
(213, 'ORTIZ PABLO', 'Pablo.Ortiz@tsoftglobal.com', '', 9288, 1, 3, 1, 1, 214, 16, '2024-06-25 16:49:27', 'admin_emiliano', '2024-06-25 16:49:27', 'admin_emiliano'),
(214, 'OSORIO DARIO', 'Dario.Osorio@tsoftglobal.com', '', 10155, 1, 3, 1, 1, 215, 16, '2024-06-25 16:49:46', 'admin_emiliano', '2024-06-25 16:49:46', 'admin_emiliano'),
(215, 'OYANEDER JOFRÉ GABRIELA DIYARELLY', 'Gabriela.Oyaneder@tsoftglobal.com', '', 10598, 1, 3, 1, 1, 216, 16, '2024-06-25 16:50:02', 'admin_emiliano', '2024-06-25 16:50:02', 'admin_emiliano'),
(216, 'OZIMISA GRIMAL GINA MICHELLE', 'Gina.Ozimisa@tsoftglobal.com', '', 8775, 1, 3, 1, 1, 217, 16, '2024-06-25 16:50:20', 'admin_emiliano', '2024-06-25 16:50:20', 'admin_emiliano'),
(217, 'PAGANO MUNOZ MARCELO', 'Marcelo.Pagano@tsoftglobal.com', '', 10977, 1, 3, 1, 1, 218, 16, '2024-06-25 16:50:44', 'admin_emiliano', '2024-06-25 16:50:44', 'admin_emiliano'),
(218, 'PALMA CANTO CRISTIAN PATRICIO', 'Cristian.Palma@tsoftglobal.com', '', 4642, 1, 3, 1, 1, 219, 16, '2024-06-25 16:51:02', 'admin_emiliano', '2024-06-25 16:51:02', 'admin_emiliano'),
(219, 'PATETE AROCHA FELIX GIOVANNY', 'Felix.Patete@tsoftglobal.com', '', 8583, 1, 3, 1, 1, 220, 16, '2024-06-25 16:51:32', 'admin_emiliano', '2024-06-25 16:51:32', 'admin_emiliano'),
(220, 'PAVEZ GALLEGOS CRISTIAN PATRICIO', 'Cristian.Pavez@tsoftglobal.com', '', 10662, 1, 3, 1, 1, 221, 16, '2024-06-25 16:52:53', 'admin_emiliano', '2024-06-25 16:52:53', 'admin_emiliano'),
(221, 'PEDERNERA BRAVO NICOLÁS ANDRÉS', 'NicolAs.Pedernera@tsoftglobal.com', '', 7292, 1, 3, 1, 1, 222, 16, '2024-06-25 16:53:20', 'admin_emiliano', '2024-06-25 16:53:20', 'admin_emiliano'),
(222, 'PENA KEVIN', 'Kevin.PenA@tsoftglobal.com', '', 4092, 1, 3, 1, 1, 223, 16, '2024-06-25 16:54:12', 'admin_emiliano', '2024-06-25 16:54:12', 'admin_emiliano'),
(223, 'PEREZ DEL CANTO DIEGO ESTEBAN', 'Diego.Perez@tsoftglobal.com', '', 8021, 1, 3, 1, 1, 224, 16, '2024-06-25 16:54:29', 'admin_emiliano', '2024-06-25 16:54:29', 'admin_emiliano'),
(224, 'PEREZ DIAZ CAMILO LUIS', 'Camilo.Perez@tsoftglobal.com', '', 8587, 1, 3, 1, 1, 225, 16, '2024-06-25 16:54:43', 'admin_emiliano', '2024-06-25 16:54:43', 'admin_emiliano'),
(225, 'PÉREZ GINNARI MARÍA GABRIELA', 'MarIa.PErez@tsoftglobal.com', '', 6503, 1, 3, 1, 1, 226, 16, '2024-06-25 16:55:18', 'admin_emiliano', '2024-06-25 16:55:18', 'admin_emiliano'),
(226, 'PEREZ MARQUEZ IGNACIO JOEL', 'Ignacio.Perez@tsoftglobal.com', '', 9293, 1, 3, 1, 1, 227, 16, '2024-06-25 16:55:32', 'admin_emiliano', '2024-06-25 16:55:32', 'admin_emiliano'),
(227, 'PEREZ PINTO JUAN FERNANDO', 'Juan.Perez@tsoftglobal.com', '', 11088, 1, 3, 1, 1, 228, 16, '2024-06-25 16:55:48', 'admin_emiliano', '2024-06-25 16:55:48', 'admin_emiliano'),
(228, 'PEREZ JAVIER', 'Javier.Perez@tsoftglobal.com', '', 11907, 1, 3, 1, 1, 229, 16, '2024-06-25 16:56:11', 'admin_emiliano', '2024-06-25 16:56:11', 'admin_emiliano'),
(229, 'PINO ROJO BÁRBARA MERCEDEZ', 'BArbara.Pino@tsoftglobal.com', '', 6656, 1, 3, 1, 1, 230, 16, '2024-06-25 16:56:31', 'admin_emiliano', '2024-06-25 16:56:31', 'admin_emiliano'),
(230, 'PINO JORGE', 'Jorge.Pino@tsoftglobal.com', '', 4079, 1, 3, 1, 1, 231, 16, '2024-06-25 16:57:11', 'admin_emiliano', '2024-06-25 16:57:11', 'admin_emiliano'),
(231, 'PIZARRO VARAS MARIO RODRIGO', 'Mario.Pizarro@tsoftglobal.com', '', 11045, 1, 3, 1, 1, 232, 16, '2024-06-25 16:57:28', 'admin_emiliano', '2024-06-25 16:57:28', 'admin_emiliano'),
(232, 'PONCE AVILA CAMILA LILIANA', 'Camila.Ponce@tsoftglobal.com', '', 9088, 1, 3, 1, 1, 233, 16, '2024-06-25 16:57:42', 'admin_emiliano', '2024-06-25 16:57:42', 'admin_emiliano'),
(233, 'PONCE LORENA', 'Lorena.Ponce@tsoftglobal.com', '', 8993, 1, 3, 1, 1, 234, 16, '2024-06-25 16:58:42', 'admin_emiliano', '2024-06-25 16:58:42', 'admin_emiliano'),
(234, 'PORTILLA OLIVARES CHRISTIAN ANDRÉS', 'Christian.Portilla@tsoftglobal.com', '', 8887, 1, 3, 1, 1, 235, 16, '2024-06-25 16:59:10', 'admin_emiliano', '2024-06-25 16:59:10', 'admin_emiliano'),
(235, 'PRIETO JOSE', 'Jose.Prieto@tsoftglobal.com', '', 13732, 1, 3, 1, 1, 236, 16, '2024-06-25 16:59:35', 'admin_emiliano', '2024-06-25 16:59:35', 'admin_emiliano'),
(236, 'QUIROZ MEDINA MAURICIO ALEJANDRO', 'Mauricio.Quiroz@tsoftglobal.com', '', 10763, 1, 3, 1, 1, 237, 16, '2024-06-25 17:00:01', 'admin_emiliano', '2024-06-25 17:00:01', 'admin_emiliano'),
(237, 'RAMÍREZ LEMUS GABRIEL IGNACIO', 'Gabriel.RamIrez@tsoftglobal.com', '', 13091, 1, 3, 1, 1, 238, 16, '2024-06-25 17:00:18', 'admin_emiliano', '2024-06-25 17:00:18', 'admin_emiliano'),
(238, 'RAMIREZ MONCADA MIGUEL ÁNGEL', 'Miguel.Ramirez@tsoftglobal.com', '', 7577, 1, 3, 1, 1, 239, 16, '2024-06-25 17:00:55', 'admin_emiliano', '2024-06-25 17:00:55', 'admin_emiliano'),
(239, 'RAMIREZ SANCHEZ JUAN', 'Juan.Ramirez@tsoftglobal.com', '', 8721, 1, 3, 1, 1, 240, 16, '2024-06-25 17:01:43', 'admin_emiliano', '2024-06-25 17:01:43', 'admin_emiliano'),
(240, 'REINOSO MUÑOZ CINTIA MELANIA', 'Cintia.Reinoso@tsoftglobal.com', '', 2795, 1, 3, 1, 1, 241, 16, '2024-06-25 17:01:58', 'admin_emiliano', '2024-06-25 17:01:58', 'admin_emiliano'),
(241, 'REYES DUARTE GERARDO', 'Gerardo.Reyes@tsoftglobal.com', '', 13592, 1, 3, 1, 1, 242, 16, '2024-06-25 17:02:14', 'admin_emiliano', '2024-06-25 17:02:14', 'admin_emiliano'),
(242, 'REYES LAZO, CARLOS ANTONIO', 'Carlos.Reyes@tsoftglobal.com', '', 15285, 1, 3, 1, 1, 243, 16, '2024-06-25 17:03:12', 'admin_emiliano', '2024-06-25 17:03:12', 'admin_emiliano'),
(243, 'REYES NAVARRETE STEPHANIE ANDREA', 'Stephanie.Reyes@tsoftglobal.com', '', 9131, 1, 3, 1, 1, 244, 16, '2024-06-25 17:03:27', 'admin_emiliano', '2024-06-25 17:03:27', 'admin_emiliano'),
(244, 'REYES SOTO GUILLERMO ANTONIO', 'Guillermo.Reyes@tsoftglobal.com', '', 9871, 1, 3, 1, 1, 245, 16, '2024-06-25 17:03:44', 'admin_emiliano', '2024-06-25 17:03:44', 'admin_emiliano'),
(245, 'RICCI PABLO', 'Pablo.Ricci@tsoftglobal.com', '', 6456, 1, 3, 1, 1, 246, 16, '2024-06-25 17:04:00', 'admin_emiliano', '2024-06-25 17:04:00', 'admin_emiliano'),
(246, 'RINCONES COLMENARES MIGUEL ALEJANDRO', 'Miguel.Rincones@tsoftglobal.com', '', 9024, 1, 3, 1, 1, 247, 16, '2024-06-25 17:04:17', 'admin_emiliano', '2024-06-25 17:04:17', 'admin_emiliano'),
(247, 'RIOS PASSTENI PABLO ANDRES', 'Pablo.Rios@tsoftglobal.com', '', 8658, 1, 3, 1, 1, 248, 16, '2024-06-25 17:04:35', 'admin_emiliano', '2024-06-25 17:04:35', 'admin_emiliano'),
(248, 'RIQUELME RODRIGUEZ CLAUDIO NICOLAS', 'Claudio.Riquelme@tsoftglobal.com', '', 8599, 1, 3, 1, 1, 249, 16, '2024-06-25 17:07:51', 'admin_emiliano', '2024-06-25 17:07:51', 'admin_emiliano'),
(249, 'RIVAS ZACARÍAS TOMÁS ALBERTO', 'TomAs.Rivas@tsoftglobal.com', '', 15653, 1, 3, 1, 1, 250, 16, '2024-06-25 17:08:14', 'admin_emiliano', '2024-06-25 17:08:14', 'admin_emiliano'),
(250, 'ROA BRIZUELA KARELIS ALCIBEL', 'Karelis.Roa@tsoftglobal.com', '', 12020, 1, 3, 1, 1, 251, 16, '2024-06-25 17:08:34', 'admin_emiliano', '2024-06-25 17:08:34', 'admin_emiliano'),
(251, 'RODRÍGUEZ QUINTANA EDUARDO DE JESÚS', 'Eduardo.Rodriguez@tsoftglobal.com', '', 8093, 1, 3, 1, 1, 252, 16, '2024-06-25 17:08:59', 'admin_emiliano', '2024-06-25 17:08:59', 'admin_emiliano'),
(252, 'ROJAS ESPINOSA EUGENIA SOLEDAD', 'Eugenia.Rojas@tsoftglobal.com', '', 9653, 1, 3, 1, 1, 253, 16, '2024-06-25 17:09:25', 'admin_emiliano', '2024-06-25 17:09:25', 'admin_emiliano'),
(253, 'ROJAS MATIAS', 'Matias.Rojas@tsoftglobal.com', '', 9102, 1, 3, 1, 1, 254, 16, '2024-06-25 17:11:18', 'admin_emiliano', '2024-06-25 17:11:18', 'admin_emiliano'),
(254, 'RONCO JOSE', 'Jose.Ronco@tsoftglobal.com', '', 6452, 1, 3, 1, 1, 255, 16, '2024-06-25 17:11:36', 'admin_emiliano', '2024-06-25 17:11:36', 'admin_emiliano'),
(255, 'RUIZ DAGOSTINO ANGEL', 'Angel.Ruiz@tsoftglobal.com', '', 5408, 1, 3, 1, 1, 256, 16, '2024-06-25 17:12:15', 'admin_emiliano', '2024-06-25 17:12:15', 'admin_emiliano'),
(256, 'SALAZAR EGAS CAROLINA', 'Carolina.Salazar@tsoftglobal.com', '', 8976, 1, 3, 1, 1, 257, 16, '2024-06-25 17:12:29', 'admin_emiliano', '2024-06-25 17:12:29', 'admin_emiliano'),
(257, 'SALDÍAS CONTRERAS ÁLVARO', 'Alvaro.SaldIas@tsoftglobal.com', '', 14053, 1, 3, 1, 1, 258, 16, '2024-06-25 17:13:08', 'admin_emiliano', '2024-06-25 17:13:08', 'admin_emiliano'),
(258, 'SALDIVAR SALAS PABLO ANTONIO', 'Pablo.Saldivar@tsoftglobal.com', '', 13431, 1, 3, 1, 1, 259, 16, '2024-06-25 17:13:34', 'admin_emiliano', '2024-06-25 17:13:34', 'admin_emiliano'),
(259, 'SALLES PÉREZ SILVANA DENI', 'Silvana.Salles@tsoftglobal.com', '', 11739, 1, 3, 1, 1, 260, 16, '2024-06-25 17:13:51', 'admin_emiliano', '2024-06-25 17:13:51', 'admin_emiliano'),
(260, 'SANCHEZ OLGUIN ALEJANDRO SEGUNDO', 'Alejandro.Sanchez@tsoftglobal.com', '', 8373, 1, 3, 1, 1, 261, 16, '2024-06-25 17:14:20', 'admin_emiliano', '2024-06-25 17:14:20', 'admin_emiliano'),
(261, 'SANCHEZ SANZ GABRIELA ROXANA', 'Gabriela.Sanchez@tsoftglobal.com', '', 10419, 1, 3, 1, 1, 262, 16, '2024-06-25 17:16:38', 'admin_emiliano', '2024-06-25 17:16:38', 'admin_emiliano'),
(262, 'SANDOVAL FLORES MARCO ANDRE', 'Marco.Sandoval@tsoftglobal.com', '', 3534, 1, 3, 1, 1, 263, 16, '2024-06-25 17:16:55', 'admin_emiliano', '2024-06-25 17:16:55', 'admin_emiliano'),
(263, 'SANTANDER GONGORA MAURICIO ANDRES', 'Mauricio.Santander@tsoftglobal.com', '', 12213, 1, 3, 1, 1, 264, 16, '2024-06-25 17:17:18', 'admin_emiliano', '2024-06-25 17:17:18', 'admin_emiliano'),
(264, 'SANTANDER MIRANDA NICOLÁS ENRIQUE', 'NicolAs.Santander@tsoftglobal.com', '', 6347, 1, 3, 1, 1, 265, 16, '2024-06-25 17:17:58', 'admin_emiliano', '2024-06-25 17:17:58', 'admin_emiliano'),
(265, 'SANTOS JONATHAN EMANUEL', 'Jonathan.Santos@tsoftglobal.com', '', 16969, 1, 3, 1, 1, 266, 16, '2024-06-25 17:18:15', 'admin_emiliano', '2024-06-25 17:18:15', 'admin_emiliano'),
(266, 'SARAOS GARCIA FRANCISCO JAVIER', 'Francisco.Saraos@tsoftglobal.com', '', 10930, 1, 3, 1, 1, 267, 16, '2024-06-25 17:18:34', 'admin_emiliano', '2024-06-25 17:18:34', 'admin_emiliano'),
(267, 'SEGURA CORREA CARLOS ANDRES', 'Carlos.Segura@tsoftglobal.com', '', 9204, 1, 3, 1, 1, 268, 16, '2024-06-25 17:18:50', 'admin_emiliano', '2024-06-25 17:18:50', 'admin_emiliano'),
(268, 'SEPULVEDA ORTEGA ALVARO JESUS', 'Alvaro.Sepulveda@tsoftglobal.com', '', 12627, 1, 3, 1, 1, 269, 16, '2024-06-25 17:19:15', 'admin_emiliano', '2024-06-25 17:19:15', 'admin_emiliano'),
(269, 'SEPULVEDA TOLEDO KAREN ANDREA', 'Karen.Sepulveda@tsoftglobal.com', '', 20733, 1, 3, 1, 1, 270, 16, '2024-06-25 17:19:30', 'admin_emiliano', '2024-06-25 17:19:30', 'admin_emiliano'),
(270, 'SEPULVEDA VERGARA LUIS ANTONIO', 'Luis.Sepulveda@tsoftglobal.com', '', 15627, 1, 3, 1, 1, 271, 16, '2024-06-25 17:20:22', 'admin_emiliano', '2024-06-25 17:20:22', 'admin_emiliano'),
(271, 'SILVA LOPEZ LUIS ALEJANDRO', 'Luis.Silva@tsoftglobal.com', '', 16721, 1, 3, 1, 1, 272, 16, '2024-06-25 17:20:36', 'admin_emiliano', '2024-06-25 17:20:36', 'admin_emiliano'),
(272, 'SILVA SANTIBAÑEZ GASTÓN ALEJANDRO', 'GastOn.Silva@tsoftglobal.com', '', 10417, 1, 3, 1, 1, 273, 16, '2024-06-25 17:21:02', 'admin_emiliano', '2024-06-25 17:21:02', 'admin_emiliano'),
(273, 'SILVA VERGARA PATRICIA ALEJANDRA', 'Patricia.Silva@tsoftglobal.com', '', 7956, 1, 3, 1, 1, 274, 16, '2024-06-25 17:21:27', 'admin_emiliano', '2024-06-25 17:21:27', 'admin_emiliano'),
(274, 'SILVA PABLO', 'Pablo.Silva@tsoftglobal.com', '', 7498, 1, 3, 1, 1, 275, 16, '2024-06-25 17:21:42', 'admin_emiliano', '2024-06-25 17:21:42', 'admin_emiliano'),
(275, 'SOLIS JARA MATIAS EDUARDO', 'Matias.Solis@tsoftglobal.com', '', 8597, 1, 3, 1, 1, 276, 16, '2024-06-25 17:21:55', 'admin_emiliano', '2024-06-25 17:21:55', 'admin_emiliano'),
(276, 'SOTO ELGUETA CARLOS', 'Carlos.Soto@tsoftglobal.com', '', 10580, 1, 3, 1, 1, 277, 16, '2024-06-25 17:22:13', 'admin_emiliano', '2024-06-25 17:22:13', 'admin_emiliano'),
(277, 'SOTO LORCA SAMUEL ANDRÉS', 'Samuel.Soto@tsoftglobal.com', '', 6449, 1, 3, 1, 1, 278, 16, '2024-06-25 17:22:49', 'admin_emiliano', '2024-06-25 17:22:49', 'admin_emiliano'),
(278, 'STEFONI CARREÑO GINO ANGELO', 'Gino.Stefoni@tsoftglobal.com', '', 7985, 1, 3, 1, 1, 279, 16, '2024-06-25 17:23:09', 'admin_emiliano', '2024-06-25 17:23:09', 'admin_emiliano');
INSERT INTO `empleado` (`idEmpleado`, `nomEmpleado`, `correoEmpleado`, `telefonoEmpleado`, `valorHH`, `isActive`, `idPais`, `idArea`, `idCargo`, `idLoginUsuario`, `idCliente`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(279, 'SUAREZ CHACON CRISTOPHER MILIANKO', 'Cristopher.Suarez@tsoftglobal.com', '', 10817, 1, 3, 1, 1, 280, 16, '2024-06-25 17:23:25', 'admin_emiliano', '2024-06-25 17:23:25', 'admin_emiliano'),
(280, 'TAPIA MELLA ALAN JOHN', 'Alan.Tapia@tsoftglobal.com', '', 7569, 1, 3, 1, 1, 281, 16, '2024-06-25 17:23:42', 'admin_emiliano', '2024-06-25 17:23:42', 'admin_emiliano'),
(281, 'TAPIA PINTO NELSON ORLANDO', 'Nelson.Tapia@tsoftglobal.com', '', 6996, 1, 3, 1, 1, 282, 16, '2024-06-25 17:23:59', 'admin_emiliano', '2024-06-25 17:23:59', 'admin_emiliano'),
(282, 'TAVANO DINO', 'Dino.Tavano@tsoftglobal.com', '', 9125, 1, 3, 1, 1, 283, 16, '2024-06-25 17:24:24', 'admin_emiliano', '2024-06-25 17:24:24', 'admin_emiliano'),
(283, 'TOLOSA DIEGO SEBASTIAN', 'Diego.Tolosa@tsoftglobal.com', '', 13771, 1, 3, 1, 1, 284, 16, '2024-06-25 17:24:41', 'admin_emiliano', '2024-06-25 17:24:41', 'admin_emiliano'),
(284, 'TONCETICH ENDRINA', 'Endrina.Toncetich@tsoftglobal.com', '', 3477, 1, 3, 1, 1, 285, 16, '2024-06-25 17:25:00', 'admin_emiliano', '2024-06-25 17:25:00', 'admin_emiliano'),
(285, 'TORO CERDA FELIPE ANDRES', 'Felipe.Toro@tsoftglobal.com', '', 10508, 1, 3, 1, 1, 286, 16, '2024-06-25 17:25:21', 'admin_emiliano', '2024-06-25 17:25:21', 'admin_emiliano'),
(286, 'TORRES GARCÍA ISAIDY ALEJANDRA', 'Isaidy.Torres@tsoftglobal.com', '', 9007, 1, 3, 1, 1, 287, 16, '2024-06-25 17:25:37', 'admin_emiliano', '2024-06-25 17:25:37', 'admin_emiliano'),
(287, 'TORRES MAURICIO', 'Mauricio.Torres@tsoftglobal.com', '', 8270, 1, 3, 1, 1, 288, 16, '2024-06-25 17:25:58', 'admin_emiliano', '2024-06-25 17:25:58', 'admin_emiliano'),
(288, 'URETA RICHARD', 'Richard.Ureta@tsoftglobal.com', '', 11195, 1, 3, 1, 1, 289, 16, '2024-06-25 17:26:12', 'admin_emiliano', '2024-06-25 17:26:12', 'admin_emiliano'),
(289, 'URRA PICÓN FRANCISCO ANTONIO', 'Francisco.Urra@tsoftglobal.com', '', 6202, 1, 3, 1, 1, 290, 16, '2024-06-25 17:26:51', 'admin_emiliano', '2024-06-25 17:26:51', 'admin_emiliano'),
(290, 'URZUA MARABOLI MARISOL', 'Marisol.Urzua@tsoftglobal.com', '', 11535, 1, 3, 1, 1, 291, 16, '2024-06-25 17:27:25', 'admin_emiliano', '2024-06-25 17:27:25', 'admin_emiliano'),
(291, 'VALDÉS ARCE ESTEFANI ALEJANDRA', 'Estefani.ValdEs@tsoftglobal.com', '', 9575, 1, 3, 1, 1, 292, 16, '2024-06-25 17:27:44', 'admin_emiliano', '2024-06-25 17:27:44', 'admin_emiliano'),
(292, 'VALDÉS SOTO PABLO', 'Pablo.ValdEs@tsoftglobal.com', '', 13047, 1, 3, 1, 1, 293, 16, '2024-06-25 17:28:13', 'admin_emiliano', '2024-06-25 17:28:13', 'admin_emiliano'),
(293, 'VALDIVIA ARMIJO ALEJANDRO FRANCISCO', 'Alejandro.Valdivia@tsoftglobal.com', '', 6795, 1, 3, 1, 1, 294, 16, '2024-06-25 17:28:35', 'admin_emiliano', '2024-06-25 17:28:35', 'admin_emiliano'),
(294, 'VARGAS SANHUEZA MARCOS PATRICIO', 'Marcos.Vargas@tsoftglobal.com', '', 8238, 1, 3, 1, 1, 295, 16, '2024-06-25 17:28:55', 'admin_emiliano', '2024-06-25 17:28:55', 'admin_emiliano'),
(295, 'VASQUEZ SAAVEDRA VICTOR EZEQUIEL', 'Victor.Vasquez@tsoftglobal.com', '', 13855, 1, 3, 1, 1, 296, 16, '2024-06-25 17:29:17', 'admin_emiliano', '2024-06-25 17:29:17', 'admin_emiliano'),
(296, 'VEGA QUIROZ IGNACIO PATRICIO', 'Ignacio.Vega@tsoftglobal.com', '', 10455, 1, 3, 1, 1, 297, 16, '2024-06-25 17:29:56', 'admin_emiliano', '2024-06-25 17:29:56', 'admin_emiliano'),
(297, 'VELA ARAYA GUSTAVO ADOLFO', 'Gustavo.Vela@tsoftglobal.com', '', 7242, 1, 3, 1, 1, 298, 16, '2024-06-25 17:30:22', 'admin_emiliano', '2024-06-25 17:30:22', 'admin_emiliano'),
(298, 'VELASCO ARGUELLO FRANCISCO JAVIER', 'Francisco.Velasco@tsoftglobal.com', '', 16067, 1, 3, 1, 1, 299, 16, '2024-06-25 17:30:39', 'admin_emiliano', '2024-06-25 17:30:39', 'admin_emiliano'),
(299, 'VELAZCO MORALES DERBIS MANUEL', 'Derbis.Velazco@tsoftglobal.com', '', 12338, 1, 3, 1, 1, 300, 16, '2024-06-25 17:30:59', 'admin_emiliano', '2024-06-25 17:30:59', 'admin_emiliano'),
(300, 'VENEGAS RAUL', 'Raul.Venegas@tsoftglobal.com', '', 7249, 1, 3, 1, 1, 301, 16, '2024-06-25 17:31:22', 'admin_emiliano', '2024-06-25 17:31:22', 'admin_emiliano'),
(301, 'VERAS RODRÍGUEZ DOUGLAS AUGUSTO', 'Douglas.Veras@tsoftglobal.com', '', 12910, 1, 3, 1, 1, 302, 16, '2024-06-25 17:31:37', 'admin_emiliano', '2024-06-25 17:31:37', 'admin_emiliano'),
(302, 'VERGARA BELMAR DIANA CRISTINA', 'Diana.Vergara@tsoftglobal.com', '', 9257, 1, 3, 1, 1, 303, 16, '2024-06-25 17:32:03', 'admin_emiliano', '2024-06-25 17:32:03', 'admin_emiliano'),
(303, 'VERGARA CASTILLO CARLOS', 'Carlos.Vergara@tsoftglobal.com', '', 10459, 1, 3, 1, 1, 304, 16, '2024-06-25 17:32:21', 'admin_emiliano', '2024-06-25 17:32:21', 'admin_emiliano'),
(304, 'VEZGA BUSTIOS JUAN PABLO', 'Juan.Vezga@tsoftglobal.com', '', 4381, 1, 3, 1, 1, 305, 16, '2024-06-25 17:32:38', 'admin_emiliano', '2024-06-25 17:32:38', 'admin_emiliano'),
(305, 'VIDAL VIVANCO LEOPOLDO', 'Leopoldo.Vidal@tsoftglobal.com', '', 12306, 1, 3, 1, 1, 306, 16, '2024-06-25 17:33:00', 'admin_emiliano', '2024-06-25 17:33:00', 'admin_emiliano'),
(306, 'VILLA RIQUELME WILFREDO ANTONIO', 'Wilfredo.Villa@tsoftglobal.com', '', 9007, 1, 3, 1, 1, 307, 16, '2024-06-25 17:33:24', 'admin_emiliano', '2024-06-25 17:33:24', 'admin_emiliano'),
(307, 'VIÑARTA VERGARA ESTEBAN FERNANDOA CAMILO ANDRÉS', 'Esteban.ViNarta@tsoftglobal.com', '', 15190, 1, 3, 1, 1, 308, 16, '2024-06-25 17:34:11', 'admin_emiliano', '2024-06-25 17:34:11', 'admin_emiliano'),
(308, 'VIVANCO AGUIRRE MAURICIO ALFONSO', 'Mauricio.Vivanco@tsoftglobal.com', '', 5800, 1, 3, 1, 1, 309, 16, '2024-06-25 17:34:26', 'admin_emiliano', '2024-06-25 17:34:26', 'admin_emiliano'),
(309, 'VIVANCO AGUIRRE MIGUEL ALEJANDRO', 'Miguel.Vivanco@tsoftglobal.com', '', 24321, 1, 3, 1, 1, 310, 16, '2024-06-25 17:35:08', 'admin_emiliano', '2024-06-25 17:35:08', 'admin_emiliano'),
(310, 'VIZCARRA TORRES RICARDO EMILIO', 'Ricardo.Vizcarra@tsoftglobal.com', '', 8597, 1, 3, 1, 1, 311, 16, '2024-06-25 17:35:23', 'admin_emiliano', '2024-06-25 17:35:23', 'admin_emiliano'),
(311, 'WENNERSTROM PADILLA CARLOS ANDRE', 'Carlos.Wennerstrom@tsoftglobal.com', '', 6105, 1, 3, 1, 1, 312, 16, '2024-06-25 17:35:43', 'admin_emiliano', '2024-06-25 17:35:43', 'admin_emiliano'),
(312, 'YAÑEZ GONZALEZ DIEGO IGNACIO', 'Diego.YaNez@tsoftglobal.com', '', 7164, 1, 3, 1, 1, 313, 16, '2024-06-25 17:36:13', 'admin_emiliano', '2024-06-25 17:36:13', 'admin_emiliano'),
(313, 'YAÑEZ GONZALEZ FABIAN ARTURO', 'Fabian.YaNez@tsoftglobal.com', '', 6656, 1, 3, 1, 1, 314, 16, '2024-06-25 17:36:35', 'admin_emiliano', '2024-06-25 17:36:35', 'admin_emiliano'),
(314, 'YUBERO YEVENES ALVARO ALONSO', 'Alvaro.Yubero@tsoftglobal.com', '', 11378, 1, 3, 1, 1, 315, 16, '2024-06-25 17:36:51', 'admin_emiliano', '2024-06-25 17:36:51', 'admin_emiliano'),
(315, 'ZAVALA GARCIA ROBERTO MIGUEL', 'Roberto.Zavala@tsoftglobal.com', '', 3394, 1, 3, 1, 1, 316, 16, '2024-06-25 17:37:19', 'admin_emiliano', '2024-06-25 17:37:19', 'admin_emiliano'),
(316, 'ZURITA BAHAMONDES FERNANDA JAVIERA', 'Fernanda.Zurita@tsoftglobal.com', '', 11766, 1, 3, 1, 1, 317, 16, '2024-06-25 17:37:35', 'admin_emiliano', '2024-06-25 17:37:35', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `empsubsist`
--

CREATE TABLE `empsubsist` (
  `idEmpSubsist` int(11) NOT NULL,
  `idEmpleado` int(11) NOT NULL,
  `idSubsistema` int(11) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `emptipoperfil`
--

CREATE TABLE `emptipoperfil` (
  `idEmpTipoPerfil` int(11) NOT NULL,
  `idEmpleado` int(11) NOT NULL,
  `idTipoPerfil` int(11) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhacop`
--

CREATE TABLE `ihhacop` (
  `idAcop` int(11) NOT NULL,
  `idProyecto` int(11) NOT NULL,
  `presupuestoTotal` double NOT NULL,
  `cantTotalMeses` int(11) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `ihhacop`
--

INSERT INTO `ihhacop` (`idAcop`, `idProyecto`, `presupuestoTotal`, `cantTotalMeses`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 1, 17899800, 12, 1, '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano'),
(2, 2, 21441000, 12, 1, '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano'),
(3, 3, 375638784, 12, 1, '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano'),
(4, 4, 2979700, 12, 1, '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano'),
(5, 5, 15979900, 7, 1, '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano'),
(6, 6, 2365100, 7, 1, '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano'),
(7, 7, 1162500, 9, 1, '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano'),
(8, 8, 5642200, 12, 1, '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano'),
(9, 9, 35326900, 6, 1, '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano'),
(10, 10, 3209200, 15, 1, '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano'),
(11, 11, 6372000, 5, 1, '2024-06-24 16:08:48', 'admin_emiliano', '2024-06-24 16:08:48', 'admin_emiliano'),
(12, 12, 3161900, 4, 1, '2024-06-24 16:35:32', 'admin_emiliano', '2024-06-24 16:35:32', 'admin_emiliano'),
(13, 13, 7398400, 13, 1, '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano'),
(14, 14, 149658800, 12, 1, '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano'),
(15, 15, 32721600, 12, 1, '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano'),
(16, 16, 3240800, 3, 1, '2024-06-24 16:57:54', 'admin_emiliano', '2024-06-24 16:57:54', 'admin_emiliano'),
(17, 17, 1000000000, 96, 1, '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhdocumentos`
--

CREATE TABLE `ihhdocumentos` (
  `idDocumento` int(11) NOT NULL,
  `nomDocumento` varchar(50) NOT NULL,
  `ruta` varchar(50) NOT NULL,
  `tipo` varchar(10) NOT NULL,
  `descripcion` varchar(250) DEFAULT NULL,
  `version` int(11) NOT NULL,
  `nomTabla` varchar(50) NOT NULL,
  `idRegistro` int(11) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(30) NOT NULL,
  `fechaModificacion` datetime DEFAULT NULL,
  `usuarioModificacion` varchar(30) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `ihhdocumentos`
--

INSERT INTO `ihhdocumentos` (`idDocumento`, `nomDocumento`, `ruta`, `tipo`, `descripcion`, `version`, `nomTabla`, `idRegistro`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'dashResumenEval_REFERENTE_20231221180455.pdf', 'files/ihh/acop', 'pdf', 'test 1', 3, 'ihh_listadoAcop', 1, 1, '2024-03-19 17:57:48', 'Emi', '2024-03-20 10:53:21', 'Emi'),
(2, 'dashResumenEval_REFERENTE_20231221180455.pdf', 'C:/xampp/htdocs/entornoTsoft/files/ihh/acop/', 'pdf', 'test 1', 2, 'ihh_listadoAcop', 1, 1, '2024-03-20 10:51:42', 'Emi', '2024-03-20 10:53:21', 'Emi'),
(3, 'dashResumenEval_REFERENTE_20231207155103.pdf', 'C:/xampp/htdocs/entornoTsoft/files/ihh/acop/', 'pdf', 'test 3', 2, 'ihh_listadoAcop', 3, 1, '2024-03-20 11:59:44', 'Emi', '2024-03-20 12:07:36', 'Emi'),
(6, 'dashResumenEval_REFERENTE_20231220185614.pdf', 'C:/xampp/htdocs/entornoTsoft/files/ihh/acop/', 'pdf', 'ihh_listadoAcop', 1, 'ihh_listadoAcop', 14, 1, '2024-03-21 16:40:38', 'admin_emiliano', '2024-03-21 16:40:38', 'admin_emiliano'),
(7, 'dashResumenEval_REFERENTE_20231207165441.pdf', 'C:/xampp/htdocs/entornoTsoft/files/ihh/acop/', 'pdf', 'ihh_listadoAcop', 1, 'ihh_listadoAcop', 14, 1, '2024-03-21 17:43:04', 'admin_emiliano', '2024-03-21 17:43:04', 'admin_emiliano'),
(8, 'Plantilla_carga_masiva_Entorno_Tsoft.xlsx', 'C:/xampp/htdocs/entornoTsoft/files/cargaRegistros/', 'xlsx', 'plantilla_carga_registros', 1, 'plantilla_carga_registros', 1, 1, '2024-06-05 15:41:36', 'admin_emiliano', '2024-06-05 15:41:36', 'admin_emiliano'),
(9, 'Plantilla_carga_IHH.xlsx', 'C:/xampp/htdocs/entornoTsoft/files/cargaRegistros/', 'xlsx', 'plantilla_carga_IHH', 1, 'plantilla_carga_IHH', 1, 1, '2024-06-05 15:41:36', 'admin_emiliano', '2024-06-05 15:41:36', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhelementoimp`
--

CREATE TABLE `ihhelementoimp` (
  `idElementoImp` int(11) NOT NULL,
  `idTipoElemento` int(11) NOT NULL,
  `nomElemento` text NOT NULL,
  `descripcion` varchar(230) DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `ihhelementoimp`
--

INSERT INTO `ihhelementoimp` (`idElementoImp`, `idTipoElemento`, `nomElemento`, `descripcion`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 1, 'LICENCIA (VACACIONES)', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin eu lobortis purus, dignissim elementum ligula. Vivamus nec sagittis lectus. Aenean posuere et quam ut tempus. Sed lacinia enim venenatis quam convallis suscipit.', 1, '2023-12-19 16:41:15', 'admin_emiliano', '2024-03-14 11:56:52', 'admin_emiliano'),
(4, 1, 'LICENCIA (ENFERMEDAD)', 'Licencia por enfermedad', 1, '2024-03-08 13:32:20', 'admin_emiliano', '2024-03-08 13:33:50', 'admin_emiliano'),
(5, 1, 'AJUSTES KH (SOLO SPMO)', 'APLICABLE SOLO A SPMO', 1, '2024-03-08 13:33:59', 'admin_emiliano', '2024-03-14 14:56:20', 'admin_emiliano'),
(6, 1, 'Jornada normal', 'INGRESE UNA NUEVA DESCRIPCIÓN', 1, '2024-03-15 15:35:04', 'admin_emiliano', '2024-03-15 15:36:40', 'admin_emiliano'),
(7, 1, 'Autocapacitación (no mayor a 5hs mensuales)', 'Ingrese una nueva descripción', 1, '2024-04-25 15:40:53', 'admin_emiliano', '2024-04-25 15:40:53', 'admin_emiliano'),
(8, 1, 'Beneficio - 24 hs Madres y Padres (Solo Chile)', 'Ingrese una nueva descripción', 1, '2024-04-25 15:41:52', 'admin_emiliano', '2024-04-25 15:41:52', 'admin_emiliano'),
(9, 1, 'Beneficio - Dia de cumpleanios', 'Ingrese una nueva descripción', 1, '2024-04-25 15:43:15', 'admin_emiliano', '2024-04-25 15:43:15', 'admin_emiliano'),
(10, 1, 'Beneficio - Dia de la Familia (Solo Colombia)', 'Ingrese una nueva descripción', 1, '2024-04-25 15:48:59', 'admin_emiliano', '2024-04-25 15:48:59', 'admin_emiliano'),
(11, 1, 'Beneficio - Dia de la Mudanza (Solo Colombia)', 'Ingrese una nueva descripción', 1, '2024-04-25 15:50:15', 'admin_emiliano', '2024-04-25 15:50:15', 'admin_emiliano'),
(12, 1, 'Beneficio - Dias Administrativos (Solo Chile)', 'Ingrese una nueva descripción', 1, '2024-04-25 15:50:48', 'admin_emiliano', '2024-04-25 15:50:48', 'admin_emiliano'),
(13, 1, 'BENEFICIO - SEMANA TSOFT (SOLO ARGENTINA)', 'INGRESE UNA NUEVA DESCRIPCIÓN', 1, '2024-04-25 15:52:52', 'admin_emiliano', '2024-04-25 15:53:10', 'admin_emiliano'),
(14, 1, 'Bootcamp de ingreso a Tsoft', 'Ingrese una nueva descripción', 1, '2024-04-25 15:56:32', 'admin_emiliano', '2024-04-25 15:56:32', 'admin_emiliano'),
(15, 1, 'Eventos Corporativos', 'Ingrese una nueva descripción', 1, '2024-04-25 15:57:38', 'admin_emiliano', '2024-04-25 15:57:38', 'admin_emiliano'),
(16, 1, 'Formación para actualización tecnología', 'Ingrese una nueva descripción', 1, '2024-04-25 15:58:22', 'admin_emiliano', '2024-04-25 15:58:22', 'admin_emiliano'),
(17, 1, 'Formación para desarrollo de Capacidades varias', 'Ingrese una nueva descripción', 1, '2024-04-25 15:58:47', 'admin_emiliano', '2024-04-25 15:58:47', 'admin_emiliano'),
(18, 1, 'Formación para examen o certificación', 'Ingrese una nueva descripción', 1, '2024-04-25 15:58:58', 'admin_emiliano', '2024-04-25 15:58:58', 'admin_emiliano'),
(19, 1, 'Gestión de la producción', 'Ingrese una nueva descripción', 1, '2024-04-25 15:59:08', 'admin_emiliano', '2024-04-25 15:59:08', 'admin_emiliano'),
(20, 1, 'Horas no aplicadas a Proyectos (solo SPMO)', 'Ingrese una nueva descripción', 1, '2024-04-25 15:59:27', 'admin_emiliano', '2024-04-25 15:59:27', 'admin_emiliano'),
(21, 1, 'Licencia (Días de estudio)', 'Ingrese una nueva descripción', 1, '2024-04-25 15:59:56', 'admin_emiliano', '2024-04-25 15:59:56', 'admin_emiliano'),
(22, 1, 'Licencia con goce de sueldo', 'Ingrese una nueva descripción', 1, '2024-04-25 16:00:07', 'admin_emiliano', '2024-04-25 16:00:07', 'admin_emiliano'),
(23, 1, 'Licencia sin goce de sueldo', 'Ingrese una nueva descripción', 1, '2024-04-25 16:00:16', 'admin_emiliano', '2024-04-25 16:00:16', 'admin_emiliano'),
(24, 1, 'Licencias Legales', 'Ingrese una nueva descripción', 1, '2024-04-25 16:00:22', 'admin_emiliano', '2024-04-25 16:00:22', 'admin_emiliano'),
(25, 1, 'Organización Interna', 'Ingrese una nueva descripción', 1, '2024-04-25 16:01:44', 'admin_emiliano', '2024-04-25 16:01:44', 'admin_emiliano'),
(26, 1, 'Proceso de Selección de RRHH', 'Ingrese una nueva descripción', 1, '2024-04-25 16:01:58', 'admin_emiliano', '2024-04-25 16:01:58', 'admin_emiliano'),
(27, 1, 'Reuniones Generales', 'Ingrese una nueva descripción', 1, '2024-04-25 16:02:06', 'admin_emiliano', '2024-04-25 16:02:06', 'admin_emiliano'),
(28, 1, 'Sin Asignación', 'Ingrese una nueva descripción', 1, '2024-04-25 16:02:13', 'admin_emiliano', '2024-04-25 16:02:13', 'admin_emiliano'),
(29, 1, 'Soporte People', 'Ingrese una nueva descripción', 1, '2024-04-25 16:02:19', 'admin_emiliano', '2024-04-25 16:02:19', 'admin_emiliano'),
(30, 1, 'T-One / Dictado de formaciones e inducciones técnicas', 'Ingrese una nueva descripción', 1, '2024-04-25 16:02:37', 'admin_emiliano', '2024-04-25 16:02:37', 'admin_emiliano'),
(31, 1, 'T-One / Preparación de Materiales de Capacitación', 'Ingrese una nueva descripción', 1, '2024-04-25 16:02:52', 'admin_emiliano', '2024-04-25 16:02:52', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhimpugnacionemp`
--

CREATE TABLE `ihhimpugnacionemp` (
  `idImpugnacionEmp` int(11) NOT NULL,
  `idEmpleado` int(11) NOT NULL,
  `idElemento` int(11) DEFAULT NULL,
  `idPeriodo` int(11) DEFAULT NULL,
  `cantHorasPeriodo` int(11) NOT NULL,
  `cantHorasExtra` int(11) DEFAULT NULL,
  `valorHH` double NOT NULL,
  `idAcop` int(11) NOT NULL,
  `idresumenperproy` int(11) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhnotaimpugnacion`
--

CREATE TABLE `ihhnotaimpugnacion` (
  `idNotaImpugnacion` int(11) NOT NULL,
  `idImpugnacionEmp` int(11) NOT NULL,
  `nota` varchar(200) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhperiodo`
--

CREATE TABLE `ihhperiodo` (
  `idPeriodo` int(11) NOT NULL,
  `idTipoPeriodo` int(11) NOT NULL,
  `nomPeriodo` varchar(50) NOT NULL,
  `descripcion` varchar(230) DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `ihhperiodo`
--

INSERT INTO `ihhperiodo` (`idPeriodo`, `idTipoPeriodo`, `nomPeriodo`, `descripcion`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 2, 'TESTEO 1', 'LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT. PROIN EU LOBORTIS PURUS, DIGNISSIM ELEMENTUM LIGULA. VIVAMUS NEC SAGITTIS LECTUS. AENEAN POSUERE ET QUAM UT TEMPUS. SED LACINIA ENIM VENENATIS QUAM CONVALLIS SUSCIPIT. CRAS ', 1, '2023-12-19 16:30:21', 'admin_emiliano', '2024-03-14 15:02:07', 'admin_emiliano'),
(3, 1, 'Hola', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin eu lobortis purus, dignissim elementum ligula. Vivamus nec sagittis lectus. Aenean posuere et quam ut tempus. Sed lacinia enim venenatis quam convallis suscipit. Cras ', 1, '2024-03-12 17:26:21', 'admin_emiliano', '2024-03-12 17:26:21', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhresumenperiodoproyecto`
--

CREATE TABLE `ihhresumenperiodoproyecto` (
  `idresumenperproy` int(11) NOT NULL,
  `mes` varchar(50) NOT NULL,
  `presupuestoMensual` double NOT NULL,
  `presupuestoAcumulado` double DEFAULT NULL,
  `costoMensual` double DEFAULT NULL,
  `saldoMensual` double DEFAULT NULL,
  `saldoPresupuesto` double DEFAULT NULL,
  `idProyecto` int(11) NOT NULL,
  `valorUfPesos` double DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `usuarioCreacion` varchar(50) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioModificacion` varchar(50) NOT NULL,
  `fechaModificacion` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `ihhresumenperiodoproyecto`
--

INSERT INTO `ihhresumenperiodoproyecto` (`idresumenperproy`, `mes`, `presupuestoMensual`, `presupuestoAcumulado`, `costoMensual`, `saldoMensual`, `saldoPresupuesto`, `idProyecto`, `valorUfPesos`, `isActive`, `usuarioCreacion`, `fechaCreacion`, `usuarioModificacion`, `fechaModificacion`) VALUES
(1, '202401', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(2, '202402', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(3, '202403', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(4, '202404', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(5, '202405', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(6, '202406', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(7, '202407', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(8, '202408', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(9, '202409', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(10, '202410', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(11, '202411', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(12, '202412', 1491650, NULL, NULL, NULL, NULL, 1, NULL, 1, 'admin_emiliano', '2024-06-24 13:52:49', 'admin_emiliano', '2024-06-24 13:52:49'),
(13, '202401', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(14, '202402', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(15, '202403', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(16, '202404', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(17, '202405', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(18, '202406', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(19, '202407', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(20, '202408', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(21, '202409', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(22, '202410', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(23, '202411', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(24, '202412', 1786750, NULL, NULL, NULL, NULL, 2, NULL, 1, 'admin_emiliano', '2024-06-24 15:17:16', 'admin_emiliano', '2024-06-24 15:17:16'),
(25, '202401', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(26, '202402', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(27, '202403', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(28, '202404', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(29, '202405', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(30, '202406', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(31, '202407', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(32, '202408', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(33, '202409', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(34, '202410', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(35, '202411', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(36, '202412', 31303233.33, NULL, NULL, NULL, NULL, 3, NULL, 1, 'admin_emiliano', '2024-06-24 15:21:35', 'admin_emiliano', '2024-06-24 15:21:35'),
(37, '202404', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(38, '202405', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(39, '202406', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(40, '202407', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(41, '202408', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(42, '202409', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(43, '202410', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(44, '202411', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(45, '202412', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(46, '202501', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(47, '202502', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(48, '202503', 248308.33, NULL, NULL, NULL, NULL, 4, NULL, 1, 'admin_emiliano', '2024-06-24 15:23:13', 'admin_emiliano', '2024-06-24 15:23:13'),
(49, '202302', 2282842.86, NULL, NULL, NULL, NULL, 5, NULL, 1, 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48'),
(50, '202303', 2282842.86, NULL, NULL, NULL, NULL, 5, NULL, 1, 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48'),
(51, '202304', 2282842.86, NULL, NULL, NULL, NULL, 5, NULL, 1, 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48'),
(52, '202305', 2282842.86, NULL, NULL, NULL, NULL, 5, NULL, 1, 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48'),
(53, '202306', 2282842.86, NULL, NULL, NULL, NULL, 5, NULL, 1, 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48'),
(54, '202307', 2282842.86, NULL, NULL, NULL, NULL, 5, NULL, 1, 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48'),
(55, '202308', 2282842.86, NULL, NULL, NULL, NULL, 5, NULL, 1, 'admin_emiliano', '2024-06-24 15:27:48', 'admin_emiliano', '2024-06-24 15:27:48'),
(56, '202401', 337871.43, NULL, NULL, NULL, NULL, 6, NULL, 1, 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34'),
(57, '202402', 337871.43, NULL, NULL, NULL, NULL, 6, NULL, 1, 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34'),
(58, '202403', 337871.43, NULL, NULL, NULL, NULL, 6, NULL, 1, 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34'),
(59, '202404', 337871.43, NULL, NULL, NULL, NULL, 6, NULL, 1, 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34'),
(60, '202405', 337871.43, NULL, NULL, NULL, NULL, 6, NULL, 1, 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34'),
(61, '202406', 337871.43, NULL, NULL, NULL, NULL, 6, NULL, 1, 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34'),
(62, '202407', 337871.43, NULL, NULL, NULL, NULL, 6, NULL, 1, 'admin_emiliano', '2024-06-24 15:32:34', 'admin_emiliano', '2024-06-24 15:32:34'),
(63, '202310', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(64, '202311', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(65, '202312', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(66, '202401', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(67, '202402', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(68, '202403', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(69, '202404', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(70, '202405', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(71, '202406', 129166.67, NULL, NULL, NULL, NULL, 7, NULL, 1, 'admin_emiliano', '2024-06-24 15:38:00', 'admin_emiliano', '2024-06-24 15:38:00'),
(72, '202401', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(73, '202402', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(74, '202403', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(75, '202404', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(76, '202405', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(77, '202406', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(78, '202407', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(79, '202408', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(80, '202409', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(81, '202410', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(82, '202411', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(83, '202412', 470183.33, NULL, NULL, NULL, NULL, 8, NULL, 1, 'admin_emiliano', '2024-06-24 15:42:11', 'admin_emiliano', '2024-06-24 15:42:11'),
(84, '202401', 5887816.67, NULL, NULL, NULL, NULL, 9, NULL, 1, 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58'),
(85, '202402', 5887816.67, NULL, NULL, NULL, NULL, 9, NULL, 1, 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58'),
(86, '202403', 5887816.67, NULL, NULL, NULL, NULL, 9, NULL, 1, 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58'),
(87, '202404', 5887816.67, NULL, NULL, NULL, NULL, 9, NULL, 1, 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58'),
(88, '202405', 5887816.67, NULL, NULL, NULL, NULL, 9, NULL, 1, 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58'),
(89, '202406', 5887816.67, NULL, NULL, NULL, NULL, 9, NULL, 1, 'admin_emiliano', '2024-06-24 16:01:58', 'admin_emiliano', '2024-06-24 16:01:58'),
(90, '202306', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(91, '202307', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(92, '202308', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(93, '202309', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(94, '202310', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(95, '202311', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(96, '202312', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(97, '202401', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(98, '202402', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(99, '202403', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(100, '202404', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(101, '202405', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(102, '202406', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(103, '202407', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(104, '202408', 213946.67, NULL, NULL, NULL, NULL, 10, NULL, 1, 'admin_emiliano', '2024-06-24 16:04:26', 'admin_emiliano', '2024-06-24 16:04:26'),
(105, '202404', 1274400, NULL, NULL, NULL, NULL, 11, NULL, 1, 'admin_emiliano', '2024-06-24 16:08:48', 'admin_emiliano', '2024-06-24 16:08:48'),
(106, '202405', 1274400, NULL, NULL, NULL, NULL, 11, NULL, 1, 'admin_emiliano', '2024-06-24 16:08:48', 'admin_emiliano', '2024-06-24 16:08:48'),
(107, '202406', 1274400, NULL, NULL, NULL, NULL, 11, NULL, 1, 'admin_emiliano', '2024-06-24 16:08:48', 'admin_emiliano', '2024-06-24 16:08:48'),
(108, '202407', 1274400, NULL, NULL, NULL, NULL, 11, NULL, 1, 'admin_emiliano', '2024-06-24 16:08:48', 'admin_emiliano', '2024-06-24 16:08:48'),
(109, '202408', 1274400, NULL, NULL, NULL, NULL, 11, NULL, 1, 'admin_emiliano', '2024-06-24 16:08:48', 'admin_emiliano', '2024-06-24 16:08:48'),
(110, '202404', 20, NULL, NULL, NULL, NULL, 12, NULL, 1, 'admin_emiliano', '2024-06-24 16:35:32', 'admin_emiliano', '2024-06-24 16:35:44'),
(111, '202405', 790475, NULL, NULL, NULL, NULL, 12, NULL, 1, 'admin_emiliano', '2024-06-24 16:35:32', 'admin_emiliano', '2024-06-24 16:35:32'),
(112, '202406', 790475, NULL, NULL, NULL, NULL, 12, NULL, 1, 'admin_emiliano', '2024-06-24 16:35:32', 'admin_emiliano', '2024-06-24 16:35:32'),
(113, '202407', 790475, NULL, NULL, NULL, NULL, 12, NULL, 1, 'admin_emiliano', '2024-06-24 16:35:32', 'admin_emiliano', '2024-06-24 16:35:32'),
(114, '202310', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(115, '202311', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(116, '202312', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(117, '202401', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(118, '202402', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(119, '202403', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(120, '202404', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(121, '202405', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(122, '202406', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(123, '202407', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(124, '202408', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(125, '202409', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(126, '202410', 569107.69, NULL, NULL, NULL, NULL, 13, NULL, 1, 'admin_emiliano', '2024-06-24 16:37:09', 'admin_emiliano', '2024-06-24 16:37:09'),
(127, '202401', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(128, '202402', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(129, '202403', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(130, '202404', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(131, '202405', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(132, '202406', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(133, '202407', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(134, '202408', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(135, '202409', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(136, '202410', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(137, '202411', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(138, '202412', 12471566.67, NULL, NULL, NULL, NULL, 14, NULL, 1, 'admin_emiliano', '2024-06-24 16:54:06', 'admin_emiliano', '2024-06-24 16:54:06'),
(139, '202401', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(140, '202402', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(141, '202403', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(142, '202404', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(143, '202405', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(144, '202406', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(145, '202407', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(146, '202408', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(147, '202409', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(148, '202410', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(149, '202411', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(150, '202412', 2726800, NULL, NULL, NULL, NULL, 15, NULL, 1, 'admin_emiliano', '2024-06-24 16:56:29', 'admin_emiliano', '2024-06-24 16:56:29'),
(151, '202405', 1080266.67, NULL, NULL, NULL, NULL, 16, NULL, 1, 'admin_emiliano', '2024-06-24 16:57:54', 'admin_emiliano', '2024-06-24 16:57:54'),
(152, '202406', 1080266.67, NULL, NULL, NULL, NULL, 16, NULL, 1, 'admin_emiliano', '2024-06-24 16:57:54', 'admin_emiliano', '2024-06-24 16:57:54'),
(153, '202407', 1080266.67, NULL, NULL, NULL, NULL, 16, NULL, 1, 'admin_emiliano', '2024-06-24 16:57:54', 'admin_emiliano', '2024-06-24 16:57:54'),
(154, '202301', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(155, '202302', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(156, '202303', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(157, '202304', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(158, '202305', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(159, '202306', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(160, '202307', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(161, '202308', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(162, '202309', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(163, '202310', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(164, '202311', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(165, '202312', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(166, '202401', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(167, '202402', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(168, '202403', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(169, '202404', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(170, '202405', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(171, '202406', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(172, '202407', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(173, '202408', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(174, '202409', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(175, '202410', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(176, '202411', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(177, '202412', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(178, '202501', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(179, '202502', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(180, '202503', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(181, '202504', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(182, '202505', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(183, '202506', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(184, '202507', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(185, '202508', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(186, '202509', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(187, '202510', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(188, '202511', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(189, '202512', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(190, '202601', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(191, '202602', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(192, '202603', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(193, '202604', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(194, '202605', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(195, '202606', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(196, '202607', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(197, '202608', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(198, '202609', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(199, '202610', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(200, '202611', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(201, '202612', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(202, '202701', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(203, '202702', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(204, '202703', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(205, '202704', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(206, '202705', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(207, '202706', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(208, '202707', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(209, '202708', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(210, '202709', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(211, '202710', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(212, '202711', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(213, '202712', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(214, '202801', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(215, '202802', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(216, '202803', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(217, '202804', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(218, '202805', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(219, '202806', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(220, '202807', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(221, '202808', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(222, '202809', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(223, '202810', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(224, '202811', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(225, '202812', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(226, '202901', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(227, '202902', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(228, '202903', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(229, '202904', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(230, '202905', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(231, '202906', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(232, '202907', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(233, '202908', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(234, '202909', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(235, '202910', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(236, '202911', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(237, '202912', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(238, '203001', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(239, '203002', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(240, '203003', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(241, '203004', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(242, '203005', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(243, '203006', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(244, '203007', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(245, '203008', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(246, '203009', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(247, '203010', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(248, '203011', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36'),
(249, '203012', 10416666.66, NULL, NULL, NULL, NULL, 17, NULL, 1, 'admin_emiliano', '2024-06-24 17:03:36', 'admin_emiliano', '2024-06-24 17:03:36');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhtipoelemento`
--

CREATE TABLE `ihhtipoelemento` (
  `idTipoElemento` int(11) NOT NULL,
  `nomTipoElemento` varchar(100) NOT NULL,
  `descripcion` varchar(230) DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ihhtipoperiodo`
--

CREATE TABLE `ihhtipoperiodo` (
  `idTipoPeriodo` int(11) NOT NULL,
  `nomTipoPeriodo` varchar(100) NOT NULL,
  `dias` int(11) NOT NULL,
  `descripcion` varchar(230) DEFAULT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `logerroresobj`
--

CREATE TABLE `logerroresobj` (
  `idLogErrorObj` int(11) NOT NULL,
  `nomObjeto` varchar(50) NOT NULL,
  `codError` varchar(5) DEFAULT NULL,
  `descError` varchar(500) DEFAULT NULL,
  `fechaHoraError` datetime NOT NULL,
  `codErrorInterno` char(2) DEFAULT NULL,
  `descErrorInterno` varchar(1000) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `logerroresobj`
--

INSERT INTO `logerroresobj` (`idLogErrorObj`, `nomObjeto`, `codError`, `descError`, `fechaHoraError`, `codErrorInterno`, `descErrorInterno`) VALUES
(1, 'SP_insertarCliente', '23000', 'Duplicate entry \'GRUPO SECURITY\' for key \'ndx_cliente_nomCliente\'', '2024-06-24 13:11:50', '13', 'SP_insertarCliente: Error al insertar registro --> IN_nomCliente: [GRUPO SECURITY] - IN_direccionCliente: [dirección desconocida] - IN_idPais: [1] - IN_usuarioAdmin: [admin_emiliano]'),
(2, 'SP_insertarEmpleado', '23000', 'Duplicate entry \'Sin.correo@ejemplo.com\' for key \'ndx_empleado_correoEmpleado\'', '2024-06-24 18:26:35', '13', 'SP_insertarEmpleado: Error al insertar registro --> IN_nomEmpleado: [Acevedo Parra José Alexander] - IN_correoEmpleado: [Sin.correo@ejemplo.com] - IN_telefonoEmpleado: [] - IN_idPais: [3] - IN_idArea: [1] - IN_idCargo: [1] - IN_idCliente: [16] - IN_usuario: [jose.acevedo] - IN_password: [JOSE.ACEVEDO] - IN_tipoUsuario: [EMPLEADO] - IN_usuarioAdmin: [admin_emiliano] - IN_rolUsuario: [6]');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `loginusuario`
--

CREATE TABLE `loginusuario` (
  `idLoginUsuario` int(11) NOT NULL,
  `usuario` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `tipoUsuario` varchar(10) DEFAULT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idRolUsuario` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `loginusuario`
--

INSERT INTO `loginusuario` (`idLoginUsuario`, `usuario`, `password`, `tipoUsuario`, `isActive`, `idRolUsuario`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'admin_emiliano', 'c27b302e118e35dee1cdc20111bb48c8385b2b66', 'empleado', 1, 1, '2023-08-14 19:42:27', 'admin_florencia', '2023-08-14 19:42:27', ''),
(3, 'Marcelo.Marcelo', '1ff50d79c18e166e2cb8207bac3f017db5c5b966', 'empleado', 1, 3, '2024-06-06 15:23:24', 'admin_sistema', '2024-06-06 15:23:24', 'admin_sistema'),
(4, 'marco.vergara', '1036d24b9bb9aff363f61df9dc22825a1746c164', 'EMPLEADO', 1, 6, '2024-06-24 18:19:07', 'admin_emiliano', '2024-06-24 18:19:07', 'admin_emiliano'),
(6, 'jose.acevedo', '3d09218d1e40566241d1fc77b177dcf1a641e71a', 'EMPLEADO', 1, 6, '2024-06-24 18:27:52', 'admin_emiliano', '2024-06-24 18:27:52', 'admin_emiliano'),
(7, 'INTI.ACOSTAY', 'fc28d417090966ceeb6c7393f6c49a8493712c7e', 'EMPLEADO', 1, 6, '2024-06-24 18:28:51', 'admin_emiliano', '2024-06-24 18:28:51', 'admin_emiliano'),
(8, 'jose.acuna', 'fa72ab5b4ff607c8c45d8d6bfa0c781557cfed58', 'EMPLEADO', 1, 6, '2024-06-24 18:30:01', 'admin_emiliano', '2024-06-24 18:30:01', 'admin_emiliano'),
(9, 'carlos.aedo', 'a544a6fce380da09de64764e8df241e83c6a1b84', 'EMPLEADO', 1, 6, '2024-06-24 18:30:34', 'admin_emiliano', '2024-06-24 18:30:34', 'admin_emiliano'),
(10, 'angela.aguila', 'b765ef868a1c2b4254eca4d0993e55151214794f', 'EMPLEADO', 1, 6, '2024-06-24 18:30:59', 'admin_emiliano', '2024-06-24 18:30:59', 'admin_emiliano'),
(11, 'paris.aguilera', 'a93a85595394f042fdc3e9e08000d7cc55a0d77f', 'EMPLEADO', 1, 6, '2024-06-24 18:31:16', 'admin_emiliano', '2024-06-24 18:31:16', 'admin_emiliano'),
(12, 'matias.albornoz', 'a8f3a28ddbf4cc1471202cd20e1fc477c1baa1bb', 'EMPLEADO', 1, 6, '2024-06-24 18:31:46', 'admin_emiliano', '2024-06-24 18:31:46', 'admin_emiliano'),
(13, 'armando.albornoz', '6d18ce17612b653e2c2270de24d475cff00b6314', 'EMPLEADO', 1, 6, '2024-06-24 18:32:27', 'admin_emiliano', '2024-06-24 18:32:27', 'admin_emiliano'),
(14, 'KARLA.ALVAREZ', '19f9c6f026a7d7a1d9c36e8b45b2e1ed8bb8e570', 'EMPLEADO', 1, 6, '2024-06-24 18:33:29', 'admin_emiliano', '2024-06-24 18:33:29', 'admin_emiliano'),
(15, 'GERARDO.ALVAREZ', 'bd6d7f638eb6ae77c45db858c4636b97d21a0eaf', 'EMPLEADO', 1, 6, '2024-06-24 18:33:59', 'admin_emiliano', '2024-06-24 18:33:59', 'admin_emiliano'),
(16, 'MARICEL.AMESTICA', 'e6246c36fa94e1ade835b122cc1ba4cb844ce8ad', 'EMPLEADO', 1, 6, '2024-06-24 18:34:19', 'admin_emiliano', '2024-06-24 18:34:19', 'admin_emiliano'),
(17, 'CARLOS.ANDERS', 'c26ca1ab8802ed762b8a8a31848e69c122927925', 'EMPLEADO', 1, 6, '2024-06-24 18:34:47', 'admin_emiliano', '2024-06-24 18:34:47', 'admin_emiliano'),
(18, 'EDUARDO.ARANGUI', '6dad6e8f2d3c854eea25a5f58969c66092eee531', 'EMPLEADO', 1, 6, '2024-06-24 18:35:12', 'admin_emiliano', '2024-06-24 18:35:12', 'admin_emiliano'),
(19, 'DEBORA.ARAVENA', '2a6cc9b42209e01c04d8bd7cd8a8efca75298fcc', 'EMPLEADO', 1, 6, '2024-06-24 18:35:35', 'admin_emiliano', '2024-06-24 18:35:35', 'admin_emiliano'),
(20, 'EDUARDO.ARAYA', 'f8dd443e156853fae20718542c06897cbf25691a', 'EMPLEADO', 1, 6, '2024-06-24 18:36:10', 'admin_emiliano', '2024-06-24 18:36:10', 'admin_emiliano'),
(21, 'PAOLA.ARCE', '68565d10f9f97fd40509458f6ccfe83754d92070', 'EMPLEADO', 1, 6, '2024-06-24 18:36:32', 'admin_emiliano', '2024-06-24 18:36:32', 'admin_emiliano'),
(22, 'FREDDY.ARCHILE', '473f1a98983d6628df311b845a0a63c315281041', 'EMPLEADO', 1, 6, '2024-06-24 18:36:55', 'admin_emiliano', '2024-06-24 18:36:55', 'admin_emiliano'),
(23, 'NICOLAS.ARCOS', '74a08afc2eee070129dee5729f8180a3570fe0e0', 'EMPLEADO', 1, 6, '2024-06-24 18:38:10', 'admin_emiliano', '2024-06-24 18:38:10', 'admin_emiliano'),
(24, 'CAROLINA.ASTORGA', 'd8b2c7cdc9b5df523fc064d678e8b4c0d3aeef9d', 'EMPLEADO', 1, 6, '2024-06-24 18:41:31', 'admin_emiliano', '2024-06-24 18:41:31', 'admin_emiliano'),
(25, 'JAIME.ASTUDILLO', 'd18cb20c4fd2268ea365ce1b5d8f3a16de4adc0e', 'EMPLEADO', 1, 6, '2024-06-24 18:42:11', 'admin_emiliano', '2024-06-24 18:42:11', 'admin_emiliano'),
(26, 'JONATHAN.AVALOS', '04e6ce80e2d11a306d6a1d89c035fb1f5a2e73de', 'EMPLEADO', 1, 6, '2024-06-24 18:42:28', 'admin_emiliano', '2024-06-24 18:42:28', 'admin_emiliano'),
(27, 'ALI.AYALA', 'cea29d47bbc0c010b417e5af1634a0b070a4cda0', 'EMPLEADO', 1, 6, '2024-06-24 18:42:46', 'admin_emiliano', '2024-06-24 18:42:46', 'admin_emiliano'),
(28, 'JAVIER.BAHAMOND', 'ed4970bd17dfd5707d180d0b9e78b160e2a28b6c', 'EMPLEADO', 1, 6, '2024-06-24 18:43:02', 'admin_emiliano', '2024-06-24 18:43:02', 'admin_emiliano'),
(29, 'VICTORIA.BANDA', '0e9f30d4c9be9d2d8e83c009f1fa4095f35587be', 'EMPLEADO', 1, 6, '2024-06-24 18:43:23', 'admin_emiliano', '2024-06-24 18:43:23', 'admin_emiliano'),
(30, 'DAVID.BARCIA', 'd13278f0444e4b74cdd7e357ec99542655d2d161', 'EMPLEADO', 1, 6, '2024-06-24 18:43:43', 'admin_emiliano', '2024-06-24 18:43:43', 'admin_emiliano'),
(31, 'AARON.BARRA', '5b823fc88b52cad754fe2f5df5d8713b660811d8', 'EMPLEADO', 1, 6, '2024-06-24 18:44:06', 'admin_emiliano', '2024-06-24 18:44:06', 'admin_emiliano'),
(32, 'DANIEL.BARRERA', 'c569ef1c50a381825ad3b9181c5df455a3492867', 'EMPLEADO', 1, 6, '2024-06-24 18:45:27', 'admin_emiliano', '2024-06-24 18:45:27', 'admin_emiliano'),
(33, 'DIEGO.BARRERA', '0342072f11b0b816566acad647059162c50264a5', 'EMPLEADO', 1, 6, '2024-06-24 18:45:48', 'admin_emiliano', '2024-06-24 18:45:48', 'admin_emiliano'),
(34, 'ANDRES.BASÁEZ', '888a76e660235124f2288d8b416fb1438776e040', 'EMPLEADO', 1, 6, '2024-06-24 18:46:05', 'admin_emiliano', '2024-06-24 18:46:05', 'admin_emiliano'),
(35, 'DIEGO.BASAURE', '1a44fa8dbeddb9078832811c53887c5e92d08449', 'EMPLEADO', 1, 6, '2024-06-24 18:46:27', 'admin_emiliano', '2024-06-24 18:46:27', 'admin_emiliano'),
(36, 'DENISSE.BASUALTO', '382a857cb389254b2e4be15d3b8ecaca26391780', 'EMPLEADO', 1, 6, '2024-06-24 18:46:45', 'admin_emiliano', '2024-06-24 18:46:45', 'admin_emiliano'),
(37, 'GUILLERMO.BATEMAN', '76e2d6e6ad851ddd0b5041310dfbb7b315229070', 'EMPLEADO', 1, 6, '2024-06-24 18:47:07', 'admin_emiliano', '2024-06-24 18:47:07', 'admin_emiliano'),
(38, 'CAMILO.BECERRA', '2e52b3475b16059695a96d561a8ffb1e25f8b277', 'EMPLEADO', 1, 6, '2024-06-24 18:47:36', 'admin_emiliano', '2024-06-24 18:47:36', 'admin_emiliano'),
(39, 'BRAULIO.BENARDIS', '4df28b63c99c17ef3ea1b0ab0db70d21e9f96cdc', 'EMPLEADO', 1, 6, '2024-06-24 18:48:12', 'admin_emiliano', '2024-06-24 18:48:12', 'admin_emiliano'),
(40, 'FRANCISCA.BENAVIDES', 'cd7901c338088a872761bdbde311014f2c205f3f', 'EMPLEADO', 1, 6, '2024-06-24 18:48:31', 'admin_emiliano', '2024-06-24 18:48:31', 'admin_emiliano'),
(41, 'ABRIL.BRACAMONTE', '256d67c26664502d2a72e300ab84ed09e17f7aa0', 'EMPLEADO', 1, 6, '2024-06-24 18:49:07', 'admin_emiliano', '2024-06-24 18:49:07', 'admin_emiliano'),
(42, 'OSCAR.BRAVO', '8c6f75c03fa6e98c0b1c803aefbb8b116f105c07', 'EMPLEADO', 1, 6, '2024-06-24 18:49:33', 'admin_emiliano', '2024-06-24 18:49:33', 'admin_emiliano'),
(43, 'ALEX.BRAVO', '13a7a55ea08391e3a1f2fbca40ddab96b1ca351d', 'EMPLEADO', 1, 6, '2024-06-24 18:49:50', 'admin_emiliano', '2024-06-24 18:49:50', 'admin_emiliano'),
(44, 'EMANUEL.BRAVO', '8afad038817caf96b1cf3595d83aa8602fc85bdb', 'EMPLEADO', 1, 6, '2024-06-25 12:26:33', 'admin_emiliano', '2024-06-25 12:26:33', 'admin_emiliano'),
(45, 'DANIELA.BRITO', '806adcfbbdebad3866d5b44659983a56625bdf8e', 'EMPLEADO', 1, 6, '2024-06-25 12:27:02', 'admin_emiliano', '2024-06-25 12:27:02', 'admin_emiliano'),
(46, 'ESTEFANIA.BUGUENO', 'e052b991ff78b2576dd04fe993df2c4d414b1024', 'EMPLEADO', 1, 6, '2024-06-25 12:32:42', 'admin_emiliano', '2024-06-25 12:32:42', 'admin_emiliano'),
(47, 'PABLO.CABRERA', '89905273595c9f14330a87abcd3e5d968001dadf', 'EMPLEADO', 1, 6, '2024-06-25 12:33:54', 'admin_emiliano', '2024-06-25 12:33:54', 'admin_emiliano'),
(48, 'ARMANDO.CABRERA', '06c87aa695596858414dc6a37412bc0d433dd5d8', 'EMPLEADO', 1, 6, '2024-06-25 12:34:17', 'admin_emiliano', '2024-06-25 12:34:17', 'admin_emiliano'),
(49, 'PABLO.REYES', 'c9700f8358ef31b1c896b957debcc626de022f89', 'EMPLEADO', 1, 6, '2024-06-25 12:35:03', 'admin_emiliano', '2024-06-25 12:35:03', 'admin_emiliano'),
(50, 'ESTEBAN.CACERES', '7f3d9ef7355c58171b73c1c363db36dd1c453908', 'EMPLEADO', 1, 6, '2024-06-25 12:35:29', 'admin_emiliano', '2024-06-25 12:35:29', 'admin_emiliano'),
(51, 'GUADALUPE.CAMACHO', '0652388e3fe99dcab91fecc0e87a28d5cfc5b1ac', 'EMPLEADO', 1, 6, '2024-06-25 12:35:47', 'admin_emiliano', '2024-06-25 12:35:47', 'admin_emiliano'),
(52, 'LORENA.CAMPILLAY', '36946122002849cebb5e9c529ab1ad63fb5c975a', 'EMPLEADO', 1, 6, '2024-06-25 12:36:11', 'admin_emiliano', '2024-06-25 12:36:11', 'admin_emiliano'),
(53, 'RODOLFO.CANCINO', '23bc261c0f28e1aed8278fb16e7edcac1b89e30a', 'EMPLEADO', 1, 6, '2024-06-25 12:36:32', 'admin_emiliano', '2024-06-25 12:36:32', 'admin_emiliano'),
(54, 'SEBASTIAN.CANDIA', 'd398732b47506eddde96cc3e0894d8603afe0ac3', 'EMPLEADO', 1, 6, '2024-06-25 12:36:48', 'admin_emiliano', '2024-06-25 12:36:48', 'admin_emiliano'),
(55, 'JUAN.CANIULAO', '8e648eb78190b6abe2f21a4bbbe360792606234c', 'EMPLEADO', 1, 6, '2024-06-25 12:37:04', 'admin_emiliano', '2024-06-25 12:37:04', 'admin_emiliano'),
(56, 'GABRIELA.CARDOZO', '595e320f96ffd6256909de0cf8b7e8b390d163cb', 'EMPLEADO', 1, 6, '2024-06-25 12:37:20', 'admin_emiliano', '2024-06-25 12:37:20', 'admin_emiliano'),
(57, 'MANUEL.CARRASCO', '03d62996afdf2b279db1f55189fe223b901a0ac8', 'EMPLEADO', 1, 6, '2024-06-25 12:37:41', 'admin_emiliano', '2024-06-25 12:37:41', 'admin_emiliano'),
(58, 'MAXIMILIANO.CARRILLO', '57195c9348c647d76c49431fbc767f9d12c6536f', 'EMPLEADO', 1, 6, '2024-06-25 12:38:04', 'admin_emiliano', '2024-06-25 12:38:04', 'admin_emiliano'),
(59, 'MATIAS.CARTER', 'e4a188b5cf8004c44ee1c4486a6239e89d96dda8', 'EMPLEADO', 1, 6, '2024-06-25 12:38:22', 'admin_emiliano', '2024-06-25 12:38:22', 'admin_emiliano'),
(60, 'LOURDES.CASTILLO', 'f9a42f48bcd220d0dc3e2861d8143462d7400b37', 'EMPLEADO', 1, 6, '2024-06-25 12:38:40', 'admin_emiliano', '2024-06-25 12:38:40', 'admin_emiliano'),
(61, 'YUSMIRA.CASTILLO', 'a3775c5dc9c8750c957116c2bd00125ee9844653', 'EMPLEADO', 1, 6, '2024-06-25 12:38:54', 'admin_emiliano', '2024-06-25 12:38:54', 'admin_emiliano'),
(62, 'DANIEL.CASTILLO', 'eb127c93a3d65b408a1d98887871c79fdc3776d2', 'EMPLEADO', 1, 6, '2024-06-25 12:39:10', 'admin_emiliano', '2024-06-25 12:39:10', 'admin_emiliano'),
(63, 'GERARDO.CASTILLO', '93904f4953c0a1d127ac38d86634f75e0b587e5b', 'EMPLEADO', 1, 6, '2024-06-25 12:39:22', 'admin_emiliano', '2024-06-25 12:39:22', 'admin_emiliano'),
(64, 'RICHARD.CHAMORRO', '10c3819c1c72dfa981128761c5fd2d46ad058a9a', 'EMPLEADO', 1, 6, '2024-06-25 12:39:37', 'admin_emiliano', '2024-06-25 12:39:37', 'admin_emiliano'),
(65, 'RONALDO.CHAVEZ', 'dec1f0d9804d3d6ffd362761f45fe3b899b30195', 'EMPLEADO', 1, 6, '2024-06-25 12:39:54', 'admin_emiliano', '2024-06-25 12:39:54', 'admin_emiliano'),
(66, 'MARIA.CLAVO', '8786fb6c98c78eef8014eba352876d1522bd44ae', 'EMPLEADO', 1, 6, '2024-06-25 12:40:15', 'admin_emiliano', '2024-06-25 12:40:15', 'admin_emiliano'),
(67, 'ADOLFO.COMAS', '3f3eb26ef3e990d1bb9d1372ffdf7c00a7f0e286', 'EMPLEADO', 1, 6, '2024-06-25 12:40:38', 'admin_emiliano', '2024-06-25 12:40:38', 'admin_emiliano'),
(68, 'OLGA.CONCHA', 'f97e6cc999b3a2418d16ccd148859ccc75440381', 'EMPLEADO', 1, 6, '2024-06-25 12:41:45', 'admin_emiliano', '2024-06-25 12:41:45', 'admin_emiliano'),
(69, 'FRANCISCO.CONTRERAS', '2f6412de5980a59b882501e4c659c506316c8cd9', 'EMPLEADO', 1, 6, '2024-06-25 12:42:05', 'admin_emiliano', '2024-06-25 12:42:05', 'admin_emiliano'),
(70, 'PALOMA.CONTRERAS', '1ce61a0b88f19bd6739cd465adb12cd0b61203cb', 'EMPLEADO', 1, 6, '2024-06-25 12:42:21', 'admin_emiliano', '2024-06-25 12:42:21', 'admin_emiliano'),
(71, 'MARCO.CONTRERAS', 'abbcf9edc704b51fd7ff8d2f46a00b593fd275c6', 'EMPLEADO', 1, 6, '2024-06-25 12:42:49', 'admin_emiliano', '2024-06-25 12:42:49', 'admin_emiliano'),
(72, 'CRISTIAN.CONTRERAS', '88bc4f5e85c6f0f14a0d955ba611709c56349cf6', 'EMPLEADO', 1, 6, '2024-06-25 12:43:07', 'admin_emiliano', '2024-06-25 12:43:07', 'admin_emiliano'),
(73, 'PABLO.CONTRERAS', '50719e81bdc375ae123c4d84ee60d9d0fb6a46b1', 'EMPLEADO', 1, 6, '2024-06-25 12:43:24', 'admin_emiliano', '2024-06-25 12:43:24', 'admin_emiliano'),
(74, 'CLAUDIA.CORREA', 'fd83326a9eae0e92a02132a2b439be53e822d3f0', 'EMPLEADO', 1, 6, '2024-06-25 12:43:54', 'admin_emiliano', '2024-06-25 12:43:54', 'admin_emiliano'),
(75, 'MARCELO.CORTES', 'e1424235166798707796502f97b6e388a608a655', 'EMPLEADO', 1, 6, '2024-06-25 12:44:11', 'admin_emiliano', '2024-06-25 12:44:11', 'admin_emiliano'),
(76, 'ARIEL.CORTEZ', '5adaef6aed269bc826e5366f040dbbced092a369', 'EMPLEADO', 1, 6, '2024-06-25 12:44:29', 'admin_emiliano', '2024-06-25 12:44:29', 'admin_emiliano'),
(77, 'MICHEL.CRUZ', '6a738f920846f3b7144d6cd3a6e3525ed3d69bbd', 'EMPLEADO', 1, 6, '2024-06-25 12:44:51', 'admin_emiliano', '2024-06-25 12:44:51', 'admin_emiliano'),
(78, 'FRANCO.CUEVAS', 'd247488e2ac696d583a790004bea73c0fe70ee5c', 'EMPLEADO', 1, 6, '2024-06-25 12:45:27', 'admin_emiliano', '2024-06-25 12:45:27', 'admin_emiliano'),
(79, 'FRANCO.DAZA', 'd10426564d6d69a984466d3d3ee90530dbdd6990', 'EMPLEADO', 1, 6, '2024-06-25 12:45:41', 'admin_emiliano', '2024-06-25 12:45:41', 'admin_emiliano'),
(80, 'SEBASTIAN.DEVIA', '27626b6cb09d52bd5ed9ede7afb2d123e8058c49', 'EMPLEADO', 1, 6, '2024-06-25 12:46:04', 'admin_emiliano', '2024-06-25 12:46:04', 'admin_emiliano'),
(81, 'RODRIGO.DIAZ', 'afb3e1ca577ee388044fe5485efbe1cc45125975', 'EMPLEADO', 1, 6, '2024-06-25 12:46:21', 'admin_emiliano', '2024-06-25 12:46:21', 'admin_emiliano'),
(82, 'MARCIA.DONOSO', '1759d876c5c81cf36a0adc6706d3ace63b896c11', 'EMPLEADO', 1, 6, '2024-06-25 12:47:15', 'admin_emiliano', '2024-06-25 12:47:15', 'admin_emiliano'),
(83, 'GUSTAVO.DURAND', '4a24009fdeb0232088975ef6f86e6f611d4d168b', 'EMPLEADO', 1, 6, '2024-06-25 12:47:30', 'admin_emiliano', '2024-06-25 12:47:30', 'admin_emiliano'),
(84, 'JOYCE.ESCALONA', '8c7bced0cda6fc294cee2ce378294b52ab62bfc7', 'EMPLEADO', 1, 6, '2024-06-25 12:47:56', 'admin_emiliano', '2024-06-25 12:47:56', 'admin_emiliano'),
(85, 'MAURICIO.ESCOBAR', 'f6b43d1257811f789fb2a2261bd36087296f2e4d', 'EMPLEADO', 1, 6, '2024-06-25 12:48:10', 'admin_emiliano', '2024-06-25 12:48:10', 'admin_emiliano'),
(86, 'SIMON.ESCOBAR', '42e4291fea7bf74da49bd0174a097076642c153c', 'EMPLEADO', 1, 6, '2024-06-25 12:48:24', 'admin_emiliano', '2024-06-25 12:48:24', 'admin_emiliano'),
(87, 'GREGORY.FERNANDEZ', 'e4cb5c44443c2fd1f763b78ca15ba7837d9d3445', 'EMPLEADO', 1, 6, '2024-06-25 12:48:42', 'admin_emiliano', '2024-06-25 12:48:42', 'admin_emiliano'),
(88, 'JAVIER.FERNANDEZ', '75b135cfc18cbfe211e2e35e2525c698f2867597', 'EMPLEADO', 1, 6, '2024-06-25 12:48:55', 'admin_emiliano', '2024-06-25 12:48:55', 'admin_emiliano'),
(89, 'RENAN.FERNANDEZ', '1ee40691387bdaedcc2fab1944ee2fb6dd730244', 'EMPLEADO', 1, 6, '2024-06-25 12:49:08', 'admin_emiliano', '2024-06-25 12:49:08', 'admin_emiliano'),
(90, 'CLAUDIO.FERRADA', '110fc59ca576155063e7fe712b73d9d479774fee', 'EMPLEADO', 1, 6, '2024-06-25 12:49:24', 'admin_emiliano', '2024-06-25 12:49:24', 'admin_emiliano'),
(91, 'JUAN.FERREIRA', '11a6f315c0c0568eec2467aa6a37f03603bf8900', 'EMPLEADO', 1, 6, '2024-06-25 12:49:43', 'admin_emiliano', '2024-06-25 12:49:43', 'admin_emiliano'),
(92, 'SAMUEL.FIERRO', '56a6f39abbc6fd00a09f4e60f3bbe1dcf69abdbe', 'EMPLEADO', 1, 6, '2024-06-25 12:50:06', 'admin_emiliano', '2024-06-25 12:50:06', 'admin_emiliano'),
(93, 'CRISTOBAL.FLORES', 'e19c70f3a14ea8cd1aa3ba89616a5dbc6bff9f42', 'EMPLEADO', 1, 6, '2024-06-25 12:50:27', 'admin_emiliano', '2024-06-25 12:50:27', 'admin_emiliano'),
(94, 'MATIAS.FLORES', 'db571bc32968d47af1329be668059067fa39db99', 'EMPLEADO', 1, 6, '2024-06-25 12:50:48', 'admin_emiliano', '2024-06-25 12:50:48', 'admin_emiliano'),
(95, 'DANIELA.FREDES', '598ea8a5d2a32da29da9e7d124dfcc7c20609c76', 'EMPLEADO', 1, 6, '2024-06-25 12:51:24', 'admin_emiliano', '2024-06-25 12:51:24', 'admin_emiliano'),
(96, 'JOSE.FUENTES', '797a6d1a02ae68985f83c3a4894a0e9a49f1243a', 'EMPLEADO', 1, 6, '2024-06-25 12:51:42', 'admin_emiliano', '2024-06-25 12:51:42', 'admin_emiliano'),
(97, 'YERKO.FUENTES', '50b63f231fb4c09ad68cfc27bdd5a0f7930900be', 'EMPLEADO', 1, 6, '2024-06-25 12:52:02', 'admin_emiliano', '2024-06-25 12:52:02', 'admin_emiliano'),
(98, 'RAUL.FUENTES', '8607e9c42f4defb8be8efc018ff6383e192ef9f1', 'EMPLEADO', 1, 6, '2024-06-25 12:52:18', 'admin_emiliano', '2024-06-25 12:52:18', 'admin_emiliano'),
(99, 'ALEX.FUENTES', '9989b937a4293d2cec1e71b64e9b787f94e7d69b', 'EMPLEADO', 1, 6, '2024-06-25 12:52:31', 'admin_emiliano', '2024-06-25 12:52:31', 'admin_emiliano'),
(100, 'CARLOS.FUENTES', '14460e22aa64c711fd47e81ff958f6f1a0aaa056', 'EMPLEADO', 1, 6, '2024-06-25 15:44:03', 'admin_emiliano', '2024-06-25 15:44:03', 'admin_emiliano'),
(101, 'CAMILA.FUENZALIDA', '0c8dd06984a237409313ae4a5b7467f39bc20435', 'EMPLEADO', 1, 6, '2024-06-25 15:44:37', 'admin_emiliano', '2024-06-25 15:44:37', 'admin_emiliano'),
(102, 'DANIELA.FUENZALIDA', '7f737866e720357b5dd9f6e343846e6bfa907299', 'EMPLEADO', 1, 6, '2024-06-25 15:45:02', 'admin_emiliano', '2024-06-25 15:45:02', 'admin_emiliano'),
(103, 'RICARDO.FUENZALIDA', 'c12263d93bd7611993a78d138949d12eca3642cd', 'EMPLEADO', 1, 6, '2024-06-25 15:45:24', 'admin_emiliano', '2024-06-25 15:45:24', 'admin_emiliano'),
(104, 'ISMAEL.GAETE', '71f59034e87ba395e5bdb34ea17983a6c9aabf1b', 'EMPLEADO', 1, 6, '2024-06-25 15:45:44', 'admin_emiliano', '2024-06-25 15:45:44', 'admin_emiliano'),
(105, 'CHRISTINA.GALLARDO', '7ce57c5092d2522bfb1c8f75f5f5d8291af775e6', 'EMPLEADO', 1, 6, '2024-06-25 15:46:11', 'admin_emiliano', '2024-06-25 15:46:11', 'admin_emiliano'),
(106, 'MARCO.GALLARDO', '21cb8c2656ebeed8df4d5f0f94a80ba3b254d8ee', 'EMPLEADO', 1, 6, '2024-06-25 15:46:29', 'admin_emiliano', '2024-06-25 15:46:29', 'admin_emiliano'),
(107, 'CARLOS.GANDOLFO', '5c64b1b32236f635901ef0cf4d38f0964f83acc3', 'EMPLEADO', 1, 6, '2024-06-25 15:46:57', 'admin_emiliano', '2024-06-25 15:46:57', 'admin_emiliano'),
(108, 'ISRAEL.GARATE', '48f3b43e31a8c3bf4db00eb2b0c16312f3280045', 'EMPLEADO', 1, 6, '2024-06-25 15:47:18', 'admin_emiliano', '2024-06-25 15:47:18', 'admin_emiliano'),
(109, 'RODRIGO.GARCIA', '296a5a9c6cccf19fdf60ca03263edd4b9a410628', 'EMPLEADO', 1, 6, '2024-06-25 15:47:34', 'admin_emiliano', '2024-06-25 15:47:34', 'admin_emiliano'),
(110, 'KAREN.GIL', '7cce12aaa50ecadf6a7b6a94a61128d798887b46', 'EMPLEADO', 1, 6, '2024-06-25 15:47:53', 'admin_emiliano', '2024-06-25 15:47:53', 'admin_emiliano'),
(111, 'LEONEL.GODOY', '7a64888c8b120b2972a1c5c478082942e5075228', 'EMPLEADO', 1, 6, '2024-06-25 15:48:29', 'admin_emiliano', '2024-06-25 15:48:29', 'admin_emiliano'),
(112, 'HUGO.GODOY', '4fe31a2cfa6758acd9ca8d07e852c996732fb548', 'EMPLEADO', 1, 6, '2024-06-25 15:48:44', 'admin_emiliano', '2024-06-25 15:48:44', 'admin_emiliano'),
(113, 'FELIPE.GONZALEZ', '4af303d5e0d709b40427b3ef694aacc4f5024891', 'EMPLEADO', 1, 6, '2024-06-25 15:48:59', 'admin_emiliano', '2024-06-25 15:48:59', 'admin_emiliano'),
(114, 'MANUEL.GONZALEZ', '41dee7c651020a29eba7f880bea58213be682a5c', 'EMPLEADO', 1, 6, '2024-06-25 15:49:15', 'admin_emiliano', '2024-06-25 15:49:15', 'admin_emiliano'),
(115, 'MARLENE.GONZALEZ', 'b303a3e310844ef825ba82851c1d7d50b93d119a', 'EMPLEADO', 1, 6, '2024-06-25 15:49:30', 'admin_emiliano', '2024-06-25 15:49:30', 'admin_emiliano'),
(116, 'GABRIELA.GONZALEZ', 'af66c42057bc3cdeb2ecaf23bd03a087cc650919', 'EMPLEADO', 1, 6, '2024-06-25 15:50:17', 'admin_emiliano', '2024-06-25 15:50:17', 'admin_emiliano'),
(117, 'YOCELYN.GONZALEZ', '0af9613c7b510adfdb3527757d542234b8f035c1', 'EMPLEADO', 1, 6, '2024-06-25 15:50:35', 'admin_emiliano', '2024-06-25 15:50:35', 'admin_emiliano'),
(118, 'CLAUDIO.GONZALEZ', '5a5b95bab3813eb1aab9ccb7a70f0853e449c6c5', 'EMPLEADO', 1, 6, '2024-06-25 15:50:48', 'admin_emiliano', '2024-06-25 15:50:48', 'admin_emiliano'),
(119, 'JONATHAN.GONZALEZ', '6c506f0e458575eadf7dc60b82167a1c23a79693', 'EMPLEADO', 1, 6, '2024-06-25 15:51:07', 'admin_emiliano', '2024-06-25 15:51:07', 'admin_emiliano'),
(120, 'DENNIS.GONZALEZ', 'aed4529d349c6464f3c2f923c79ab523e9911f7d', 'EMPLEADO', 1, 6, '2024-06-25 15:51:35', 'admin_emiliano', '2024-06-25 15:51:35', 'admin_emiliano'),
(121, 'CLAUDIA.GONZALEZ', 'ce1ea8733a1f0f5589c1d0ee82f6b7a4e213ee6f', 'EMPLEADO', 1, 6, '2024-06-25 15:51:51', 'admin_emiliano', '2024-06-25 15:51:51', 'admin_emiliano'),
(122, 'FEDERICO.GUGGERI', 'cf3bc77cc6fb711cb74d9288398dbc55d2caa092', 'EMPLEADO', 1, 6, '2024-06-25 15:52:24', 'admin_emiliano', '2024-06-25 15:52:24', 'admin_emiliano'),
(123, 'JUAN.GUTIERREZ', 'c394e7a7d721cf5eac9c4eeee60871ad31e4a499', 'EMPLEADO', 1, 6, '2024-06-25 15:52:38', 'admin_emiliano', '2024-06-25 15:52:38', 'admin_emiliano'),
(124, 'JONATHAN.GUTIERREZ', '02423d55d05cfd8c450430daa8479c979c75c75b', 'EMPLEADO', 1, 6, '2024-06-25 15:52:55', 'admin_emiliano', '2024-06-25 15:52:55', 'admin_emiliano'),
(125, 'LESME.GUTIERREZ', 'acf52dc32c0988ded020275d852b400aaddcf65c', 'EMPLEADO', 1, 6, '2024-06-25 15:53:25', 'admin_emiliano', '2024-06-25 15:53:25', 'admin_emiliano'),
(126, 'MANUEL.GUZMAN', '39f327664e705c5b47ca5832bd387e3ee25cd0dd', 'EMPLEADO', 1, 6, '2024-06-25 15:53:45', 'admin_emiliano', '2024-06-25 15:53:45', 'admin_emiliano'),
(127, 'EDUARDO.HENRIQUEZ', '42fc05303797de69328a94ff735c30614c9e3aab', 'EMPLEADO', 1, 6, '2024-06-25 15:54:04', 'admin_emiliano', '2024-06-25 15:54:04', 'admin_emiliano'),
(128, 'CARLOS.HENRIQUEZ', '4f78c5c7809c20cc103524f67bb8142ba6886036', 'EMPLEADO', 1, 6, '2024-06-25 15:54:21', 'admin_emiliano', '2024-06-25 15:54:21', 'admin_emiliano'),
(129, 'MAXIMILIANO.HERNANDE', '992250d00e7625b058fef92a13c90557c1ba2172', 'EMPLEADO', 1, 6, '2024-06-25 15:54:57', 'admin_emiliano', '2024-06-25 15:54:57', 'admin_emiliano'),
(130, 'EDITH.HERNANDEZ', '0980963eb9dd9f25d499cf0d53ff5c44345a5a63', 'EMPLEADO', 1, 6, '2024-06-25 15:55:32', 'admin_emiliano', '2024-06-25 15:55:32', 'admin_emiliano'),
(131, 'ANDRES.HERNANDEZ', '3b5b99de194f7dd10dab81d4f101e7881f4dd117', 'EMPLEADO', 1, 6, '2024-06-25 15:55:50', 'admin_emiliano', '2024-06-25 15:55:50', 'admin_emiliano'),
(132, 'ALEXIS.HERNANDEZ', '4a510ab467783e7d1c2510e463e29912d68f6e4b', 'EMPLEADO', 1, 6, '2024-06-25 15:56:07', 'admin_emiliano', '2024-06-25 15:56:07', 'admin_emiliano'),
(133, 'GERARDO.HERNANDEZ', 'a8048a8edbe8fd46572fb1d1bcc0bd239b39d01a', 'EMPLEADO', 1, 6, '2024-06-25 15:56:28', 'admin_emiliano', '2024-06-25 15:56:28', 'admin_emiliano'),
(134, 'JOSE.HERRERA', '06f160125e10b446df902544c6cf1cd10e909763', 'EMPLEADO', 1, 6, '2024-06-25 15:57:42', 'admin_emiliano', '2024-06-25 15:57:42', 'admin_emiliano'),
(135, 'JUAN.HERRERA', '6cadc580aeb4927f4f4442ac4f9692cec090455f', 'EMPLEADO', 1, 6, '2024-06-25 15:58:14', 'admin_emiliano', '2024-06-25 15:58:14', 'admin_emiliano'),
(136, 'SEBASTIAN.HERRERA', '1f76ce1fbd4b9c3c7b7fb293e9730400dd75d480', 'EMPLEADO', 1, 6, '2024-06-25 15:58:34', 'admin_emiliano', '2024-06-25 15:58:34', 'admin_emiliano'),
(137, 'JOSE.HIDALGO', 'e1eddd79480dcf3ea725cb21abff39f23d145f9f', 'EMPLEADO', 1, 6, '2024-06-25 15:59:19', 'admin_emiliano', '2024-06-25 15:59:19', 'admin_emiliano'),
(138, 'YEISY.IBARRA', 'd62fd133d40c6c27654cd7ecd99ee24a0abf7485', 'EMPLEADO', 1, 6, '2024-06-25 16:00:22', 'admin_emiliano', '2024-06-25 16:00:22', 'admin_emiliano'),
(139, 'ARIANA.INFANTE', 'cafb7d9b6b65f3be75a2e148395ef6afdc3d993c', 'EMPLEADO', 1, 6, '2024-06-25 16:00:37', 'admin_emiliano', '2024-06-25 16:00:37', 'admin_emiliano'),
(140, 'JORDAN.JIMENEZ', 'cdf0d03af1556dc430da1e448f8bee4306b3206e', 'EMPLEADO', 1, 6, '2024-06-25 16:00:50', 'admin_emiliano', '2024-06-25 16:00:50', 'admin_emiliano'),
(141, 'LUISINA.KELLY', 'eb11c98a393c1bc4d9bc128db788a8237de129db', 'EMPLEADO', 1, 6, '2024-06-25 16:01:08', 'admin_emiliano', '2024-06-25 16:01:08', 'admin_emiliano'),
(142, 'PABLO.LAGOS', 'a9b289811c801f1e90886586ac13598997deea45', 'EMPLEADO', 1, 6, '2024-06-25 16:01:27', 'admin_emiliano', '2024-06-25 16:01:27', 'admin_emiliano'),
(143, 'FRANCISCA.LASTRA', '38ad535eb9a9c40bba5c3cae6c76fb9ec04a0053', 'EMPLEADO', 1, 6, '2024-06-25 16:02:39', 'admin_emiliano', '2024-06-25 16:02:39', 'admin_emiliano'),
(144, 'NAYADETH.LEFICOY', '41a36c2d038c2a4091fe14cf8bff7762c6a106d7', 'EMPLEADO', 1, 6, '2024-06-25 16:03:00', 'admin_emiliano', '2024-06-25 16:03:00', 'admin_emiliano'),
(145, 'CAROL.LEIVA', '018c498457b6157f80024664630d4a49fe7ea528', 'EMPLEADO', 1, 6, '2024-06-25 16:03:16', 'admin_emiliano', '2024-06-25 16:03:16', 'admin_emiliano'),
(146, 'GABRIEL.LETELIER', '460f6590a7a46122431d53e60964de61b65c1ca7', 'EMPLEADO', 1, 6, '2024-06-25 16:04:25', 'admin_emiliano', '2024-06-25 16:04:25', 'admin_emiliano'),
(147, 'LUCIA.LICANQUEO', 'aaac19f490622acea41f12a309e994b98bc929c4', 'EMPLEADO', 1, 6, '2024-06-25 16:04:55', 'admin_emiliano', '2024-06-25 16:04:55', 'admin_emiliano'),
(148, 'FELIPE.LILLO', '6eacae23f170de9433b69cedce38f76ca8b1343d', 'EMPLEADO', 1, 6, '2024-06-25 16:05:13', 'admin_emiliano', '2024-06-25 16:05:13', 'admin_emiliano'),
(149, 'JOSE.LLANTEN', '408e5a41d35734fa2f88d07d053b46403a488dc1', 'EMPLEADO', 1, 6, '2024-06-25 16:05:33', 'admin_emiliano', '2024-06-25 16:05:33', 'admin_emiliano'),
(150, 'CHRISTIAN.LOPEZ', 'a813ee4626fa21832fd4ec73fc58cfbe7b2dbbb7', 'EMPLEADO', 1, 6, '2024-06-25 16:05:48', 'admin_emiliano', '2024-06-25 16:05:48', 'admin_emiliano'),
(151, 'DOMINIQUE.LOPEZ', 'ec4a33ff311d208a2c9cbe85f24b13c0a260780a', 'EMPLEADO', 1, 6, '2024-06-25 16:07:09', 'admin_emiliano', '2024-06-25 16:07:09', 'admin_emiliano'),
(152, 'ANDRES.LOPEZ', 'e0cf659e7e30dd0f61144b69beef365491d606b3', 'EMPLEADO', 1, 6, '2024-06-25 16:07:31', 'admin_emiliano', '2024-06-25 16:07:31', 'admin_emiliano'),
(153, 'JAIME.LORCA', '1a46bd719c903a883567349484449519dcbd6fd8', 'EMPLEADO', 1, 6, '2024-06-25 16:08:52', 'admin_emiliano', '2024-06-25 16:08:52', 'admin_emiliano'),
(154, 'DAVID.LORCA', '9ec09c6b1ef954825eefed751b5cd53e74d3de25', 'EMPLEADO', 1, 6, '2024-06-25 16:09:08', 'admin_emiliano', '2024-06-25 16:09:08', 'admin_emiliano'),
(155, 'PAMELA.LUNA', '830b5f1af6969056a4e15db1cbf9c00f88507555', 'EMPLEADO', 1, 6, '2024-06-25 16:09:25', 'admin_emiliano', '2024-06-25 16:09:25', 'admin_emiliano'),
(156, 'DIEGO.MADARIAGA', '031cd3cf391a1da4faf533558891425af3b98b07', 'EMPLEADO', 1, 6, '2024-06-25 16:09:43', 'admin_emiliano', '2024-06-25 16:09:43', 'admin_emiliano'),
(157, 'JESUS.MADURO', '97c083a8d9f722319f643a91654ce7141d07c7a6', 'EMPLEADO', 1, 6, '2024-06-25 16:09:56', 'admin_emiliano', '2024-06-25 16:09:56', 'admin_emiliano'),
(158, 'TANIA.MALDONADO', '00482742a3c68d4e1baf8fb9a27222b962881070', 'EMPLEADO', 1, 6, '2024-06-25 16:10:14', 'admin_emiliano', '2024-06-25 16:10:14', 'admin_emiliano'),
(159, 'HECTOR.MANRIQUEZ', '8c68c22b42a1cff4f52079d3f55f8f38504b663e', 'EMPLEADO', 1, 6, '2024-06-25 16:10:35', 'admin_emiliano', '2024-06-25 16:10:35', 'admin_emiliano'),
(160, 'GUSTAVO.MANRIQUEZ', '9ba0abb89562ede56267f72eea3cf5ab83cbd938', 'EMPLEADO', 1, 6, '2024-06-25 16:10:52', 'admin_emiliano', '2024-06-25 16:10:52', 'admin_emiliano'),
(161, 'SALVADOR.MANZANILLA', '6166fcafbdacedcf99cf60b0641ceae6096b2cc6', 'EMPLEADO', 1, 6, '2024-06-25 16:11:20', 'admin_emiliano', '2024-06-25 16:11:20', 'admin_emiliano'),
(162, 'DANIEL.MANZO', 'adb3054b356700275a4a31d57312634dc5051aa2', 'EMPLEADO', 1, 6, '2024-06-25 16:11:34', 'admin_emiliano', '2024-06-25 16:11:34', 'admin_emiliano'),
(163, 'NAYP.MARAMBIO', '89efe7fd337969532d5ea0484fcac85be0d67f19', 'EMPLEADO', 1, 6, '2024-06-25 16:11:49', 'admin_emiliano', '2024-06-25 16:11:49', 'admin_emiliano'),
(164, 'EDGAR.MARIN', '9f24329cf737f0315b1a2cbc77ada9e493bb9397', 'EMPLEADO', 1, 6, '2024-06-25 16:12:13', 'admin_emiliano', '2024-06-25 16:12:13', 'admin_emiliano'),
(165, 'MATIAS.MARIN', 'de160daa01eebe61fd9b2b774606df3df2df303c', 'EMPLEADO', 1, 6, '2024-06-25 16:12:38', 'admin_emiliano', '2024-06-25 16:12:38', 'admin_emiliano'),
(166, 'CRISTOPHER.MARTINEZ', 'c895790cd47bea0da647cd8b4e3299965869747a', 'EMPLEADO', 1, 6, '2024-06-25 16:12:56', 'admin_emiliano', '2024-06-25 16:12:56', 'admin_emiliano'),
(167, 'PABLO.MARTINEZ', 'cc7853489201d929f063679f06098d0a7092a623', 'EMPLEADO', 1, 6, '2024-06-25 16:13:12', 'admin_emiliano', '2024-06-25 16:13:12', 'admin_emiliano'),
(168, 'FRANCISCO.MARTINEZ', 'e8aa192b9a00e9885811163ac8a630464760d47a', 'EMPLEADO', 1, 6, '2024-06-25 16:13:32', 'admin_emiliano', '2024-06-25 16:13:32', 'admin_emiliano'),
(169, 'VALERIA.MARTINEZ', '35e86f0b32d0932b370ae0e57e289da4d6f037d8', 'EMPLEADO', 1, 6, '2024-06-25 16:14:29', 'admin_emiliano', '2024-06-25 16:14:29', 'admin_emiliano'),
(170, 'ESTEBAN.MASIAS', '8a3103e238aef25273e77fc5f80a2c18e64f6066', 'EMPLEADO', 1, 6, '2024-06-25 16:14:55', 'admin_emiliano', '2024-06-25 16:14:55', 'admin_emiliano'),
(171, 'DOUGLEXYS.MATHEUS', '84e98e2bbcf58c36d356e62870ace56fc0efae37', 'EMPLEADO', 1, 6, '2024-06-25 16:16:54', 'admin_emiliano', '2024-06-25 16:16:54', 'admin_emiliano'),
(172, 'BASTIAN.MAURE', 'e9885edb91c727adcd436013fa048cd72d741490', 'EMPLEADO', 1, 6, '2024-06-25 16:17:34', 'admin_emiliano', '2024-06-25 16:17:34', 'admin_emiliano'),
(173, 'MIRIAM.MAYOLAFQUEN', 'ba79df2ee9824f1b84c4936380721a3218db51d1', 'EMPLEADO', 1, 6, '2024-06-25 16:17:48', 'admin_emiliano', '2024-06-25 16:17:48', 'admin_emiliano'),
(174, 'MARIO.MAZZINI', 'a8359a66faf253202c356a49c6b2d60793f32060', 'EMPLEADO', 1, 6, '2024-06-25 16:18:07', 'admin_emiliano', '2024-06-25 16:18:07', 'admin_emiliano'),
(175, 'CRISTIAN.MEDINA', '99a9749b5a443c18dcc0609e449fc7b38e98a9f3', 'EMPLEADO', 1, 6, '2024-06-25 16:18:22', 'admin_emiliano', '2024-06-25 16:18:22', 'admin_emiliano'),
(176, 'HECTOR.MEJIAS', '31eb85c3b4089d7260639ba703f6255572e566b0', 'EMPLEADO', 1, 6, '2024-06-25 16:18:55', 'admin_emiliano', '2024-06-25 16:18:55', 'admin_emiliano'),
(177, 'FRANCISCO.MELLA', '601775bffcaa5e0671b76080533b47dc2ddafb79', 'EMPLEADO', 1, 6, '2024-06-25 16:19:37', 'admin_emiliano', '2024-06-25 16:19:37', 'admin_emiliano'),
(178, 'JOSE.MENDEZ', 'e336d824353cc14e4d3191be6573346adecb191d', 'EMPLEADO', 1, 6, '2024-06-25 16:20:01', 'admin_emiliano', '2024-06-25 16:20:01', 'admin_emiliano'),
(179, 'CLAUDIA.MEZA', '9b08d4d7df995d8aaffecd9c4786838835dd7d62', 'EMPLEADO', 1, 6, '2024-06-25 16:20:20', 'admin_emiliano', '2024-06-25 16:20:20', 'admin_emiliano'),
(180, 'JAASIEL.MIRANDA', '9cc69e48a2312f59175a254c8952fccc5eaee3b7', 'EMPLEADO', 1, 6, '2024-06-25 16:20:39', 'admin_emiliano', '2024-06-25 16:20:39', 'admin_emiliano'),
(181, 'RAFAEL.MIRANDA', '7c02a6f6576017dcb1e3716afe0c518ed04e4c7b', 'EMPLEADO', 1, 6, '2024-06-25 16:20:59', 'admin_emiliano', '2024-06-25 16:20:59', 'admin_emiliano'),
(182, 'VICTOR.MOLINA', '64702090680190dd322ceb18f53e1fadaf16b472', 'EMPLEADO', 1, 6, '2024-06-25 16:21:19', 'admin_emiliano', '2024-06-25 16:21:19', 'admin_emiliano'),
(183, 'JOSE.MOLINARI', 'e911db23f73f756b67895c2bcc6d1a416324f19e', 'EMPLEADO', 1, 6, '2024-06-25 16:23:17', 'admin_emiliano', '2024-06-25 16:23:17', 'admin_emiliano'),
(184, 'JACKSON.MONSALVE', '69efe02f1720aa42b289cfcd7777c51403b327df', 'EMPLEADO', 1, 6, '2024-06-25 16:23:40', 'admin_emiliano', '2024-06-25 16:23:40', 'admin_emiliano'),
(185, 'HECTOR.MONTECINOS', '9b3a47c9626787cadd4e897923530409db5f5f46', 'EMPLEADO', 1, 6, '2024-06-25 16:23:55', 'admin_emiliano', '2024-06-25 16:23:55', 'admin_emiliano'),
(186, 'MAYLEE.MORA', '82f8a6d3b4eb72eb7b33de6207df9db803a760cf', 'EMPLEADO', 1, 6, '2024-06-25 16:24:11', 'admin_emiliano', '2024-06-25 16:24:11', 'admin_emiliano'),
(187, 'CRISTIAN.MORAGA', '5a31cba7fcded7bc01c3a3a94cb9fc30652ed86d', 'EMPLEADO', 1, 6, '2024-06-25 16:24:31', 'admin_emiliano', '2024-06-25 16:24:31', 'admin_emiliano'),
(188, 'EDUARDO.MORAGA', 'cb56713e034dfdd608d6fd575d69e8ec7a08e692', 'EMPLEADO', 1, 6, '2024-06-25 16:24:53', 'admin_emiliano', '2024-06-25 16:24:53', 'admin_emiliano'),
(189, 'ALEJANDRO.MORALES', '33075c322663a983f4a26f4932ca462f6fbc74e5', 'EMPLEADO', 1, 6, '2024-06-25 16:25:37', 'admin_emiliano', '2024-06-25 16:25:37', 'admin_emiliano'),
(190, 'BETZABET.MORALES', '6636ceb7597f3bf502f1dcc57d37266d218aa519', 'EMPLEADO', 1, 6, '2024-06-25 16:25:56', 'admin_emiliano', '2024-06-25 16:25:56', 'admin_emiliano'),
(191, 'MARCO.MORENO', '0fb5de1def4ca89fbd1c62534db694d46074b8c3', 'EMPLEADO', 1, 6, '2024-06-25 16:33:59', 'admin_emiliano', '2024-06-25 16:33:59', 'admin_emiliano'),
(192, 'MARIAN.MORENO', 'b4323bf1031f0644eb855ffabf0ed7d8fa408c18', 'EMPLEADO', 1, 6, '2024-06-25 16:34:12', 'admin_emiliano', '2024-06-25 16:34:12', 'admin_emiliano'),
(193, 'BEXIMAR.MORENO', 'b94bca5b7e41609a06b2276a77e5fe8bde8ef751', 'EMPLEADO', 1, 6, '2024-06-25 16:34:30', 'admin_emiliano', '2024-06-25 16:34:30', 'admin_emiliano'),
(194, 'NAYARETT.MOSCOSO', '14282925bd9723315e6a619f12e66b557c045adc', 'EMPLEADO', 1, 6, '2024-06-25 16:34:45', 'admin_emiliano', '2024-06-25 16:34:45', 'admin_emiliano'),
(195, 'ZULEMA.MOSQUEIRA', 'a370ece66231bcae2926455d9ee484293f5af413', 'EMPLEADO', 1, 6, '2024-06-25 16:36:11', 'admin_emiliano', '2024-06-25 16:36:11', 'admin_emiliano'),
(196, 'PAOLA.MOYA', '179c9a3436b6695c9b62ffcc6046b37ec75f2a2e', 'EMPLEADO', 1, 6, '2024-06-25 16:36:27', 'admin_emiliano', '2024-06-25 16:36:27', 'admin_emiliano'),
(197, 'ALEXIS.MUNOZ', 'dfd56bb73e135105f862df7bfba5b536bb7a693f', 'EMPLEADO', 1, 6, '2024-06-25 16:36:41', 'admin_emiliano', '2024-06-25 16:36:41', 'admin_emiliano'),
(198, 'JUANA.MUNOZ', 'e9d000d14cc8fb83ab65ca91d87cfdbfb9ffae3c', 'EMPLEADO', 1, 6, '2024-06-25 16:37:03', 'admin_emiliano', '2024-06-25 16:37:03', 'admin_emiliano'),
(199, 'ALEX.MUNOZ', 'ec18bce7dc702da2c27f15a67d0a8b0e02018e6d', 'EMPLEADO', 1, 6, '2024-06-25 16:37:35', 'admin_emiliano', '2024-06-25 16:37:35', 'admin_emiliano'),
(200, 'GONZALO.MUNOZ', 'f19d50c83602a8ea4c36ca3828e9c985f005c0c2', 'EMPLEADO', 1, 6, '2024-06-25 16:38:21', 'admin_emiliano', '2024-06-25 16:38:21', 'admin_emiliano'),
(201, 'BRANDON.MUNOZ', '662a8198c78a2448351e1dbfb282c18882004ed7', 'EMPLEADO', 1, 6, '2024-06-25 16:38:44', 'admin_emiliano', '2024-06-25 16:38:44', 'admin_emiliano'),
(202, 'CARLOS.MUNOZ', '8be4fac747198488e2f3036648b3769aeb20493e', 'EMPLEADO', 1, 6, '2024-06-25 16:40:44', 'admin_emiliano', '2024-06-25 16:40:44', 'admin_emiliano'),
(203, 'JUAN.NAHUELNIR', 'dbd5e5840aa6fcb5126082bfaa5155ee9c484132', 'EMPLEADO', 1, 6, '2024-06-25 16:41:11', 'admin_emiliano', '2024-06-25 16:41:11', 'admin_emiliano'),
(204, 'MARIA.NAVARRO', '894531864fdbff9e4bafc896e180fbd98725096a', 'EMPLEADO', 1, 6, '2024-06-25 16:41:32', 'admin_emiliano', '2024-06-25 16:41:32', 'admin_emiliano'),
(205, 'JONATHAN.NEIRA', '489bd883f96c7d0a9d4ec103a46ac93fdb7be1b8', 'EMPLEADO', 1, 6, '2024-06-25 16:43:03', 'admin_emiliano', '2024-06-25 16:43:03', 'admin_emiliano'),
(206, 'DANIEL.NILO', '79de3a4bfa7284318e341494beb65a04bc279ec1', 'EMPLEADO', 1, 6, '2024-06-25 16:43:30', 'admin_emiliano', '2024-06-25 16:43:30', 'admin_emiliano'),
(207, 'RODRIGO.NOVOA', '37ad41d422cbc6a5abe8a6e4a24dcba6d7e62135', 'EMPLEADO', 1, 6, '2024-06-25 16:45:37', 'admin_emiliano', '2024-06-25 16:45:37', 'admin_emiliano'),
(208, 'BARTOLOME.OJEDA', '1e938a5ad419571e67e5bf27d2ad6f666f537bf2', 'EMPLEADO', 1, 6, '2024-06-25 16:45:53', 'admin_emiliano', '2024-06-25 16:45:53', 'admin_emiliano'),
(209, 'CAROLINA.OLAVE', 'a0dcf55c2dbd56383b2f3b7ca65b18d2d05a969a', 'EMPLEADO', 1, 6, '2024-06-25 16:46:07', 'admin_emiliano', '2024-06-25 16:46:07', 'admin_emiliano'),
(210, 'BENJAMIN.OLEJNIK', 'e0085d9b965fe47f2a696b5922e8b76e9f57c402', 'EMPLEADO', 1, 6, '2024-06-25 16:46:23', 'admin_emiliano', '2024-06-25 16:46:23', 'admin_emiliano'),
(211, 'RICARDO.OLGUIN', 'd209b828558c781affacf519b6a856c67ba3370c', 'EMPLEADO', 1, 6, '2024-06-25 16:47:59', 'admin_emiliano', '2024-06-25 16:47:59', 'admin_emiliano'),
(212, 'GONZALO.OLIVARES', 'c5b2459c070ce00a3377037c084900d896662f3b', 'EMPLEADO', 1, 6, '2024-06-25 16:48:48', 'admin_emiliano', '2024-06-25 16:48:48', 'admin_emiliano'),
(213, 'LUIS.ORTEGA', 'a371413ff7cb5a5807f6bc6e21f7881005a46ed9', 'EMPLEADO', 1, 6, '2024-06-25 16:49:06', 'admin_emiliano', '2024-06-25 16:49:06', 'admin_emiliano'),
(214, 'PABLO.ORTIZ', '9655edf961cdf605acafb71ca4fcf500cf496d4f', 'EMPLEADO', 1, 6, '2024-06-25 16:49:27', 'admin_emiliano', '2024-06-25 16:49:27', 'admin_emiliano'),
(215, 'DARIO.OSORIO', 'ce82247eba9fd93790a597eda0c1ef63201c904d', 'EMPLEADO', 1, 6, '2024-06-25 16:49:46', 'admin_emiliano', '2024-06-25 16:49:46', 'admin_emiliano'),
(216, 'GABRIELA.OYANEDER', '701efec7b5bf70a4a7fcd796e3de86027053c663', 'EMPLEADO', 1, 6, '2024-06-25 16:50:02', 'admin_emiliano', '2024-06-25 16:50:02', 'admin_emiliano'),
(217, 'GINA.OZIMISA', '8b1fd1f790a9c60bea10b54bce37fccf3b5732ff', 'EMPLEADO', 1, 6, '2024-06-25 16:50:20', 'admin_emiliano', '2024-06-25 16:50:20', 'admin_emiliano'),
(218, 'MARCELO.PAGANO', '231eac310fbdc2468f0be64f4b9fecceded8f466', 'EMPLEADO', 1, 6, '2024-06-25 16:50:44', 'admin_emiliano', '2024-06-25 16:50:44', 'admin_emiliano'),
(219, 'CRISTIAN.PALMA', '0b9cf310a89825647445e223d761f1449628eeeb', 'EMPLEADO', 1, 6, '2024-06-25 16:51:02', 'admin_emiliano', '2024-06-25 16:51:02', 'admin_emiliano'),
(220, 'FELIX.PATETE', 'b0750d0ccdf392008bc790b5ceb66f4a77c4a2ab', 'EMPLEADO', 1, 6, '2024-06-25 16:51:32', 'admin_emiliano', '2024-06-25 16:51:32', 'admin_emiliano'),
(221, 'CRISTIAN.PAVEZ', '08b06ba795655a44d74433dd815cafe2cb5da1f2', 'EMPLEADO', 1, 6, '2024-06-25 16:52:53', 'admin_emiliano', '2024-06-25 16:52:53', 'admin_emiliano'),
(222, 'NICOLAS.PEDERNERA', '723a25563faebe9ab8453dd098d696eb9926ac3f', 'EMPLEADO', 1, 6, '2024-06-25 16:53:20', 'admin_emiliano', '2024-06-25 16:53:20', 'admin_emiliano'),
(223, 'KEVIN.PENA', 'ec3761ad4b7188bb60f330f3d9082b4b6489f41b', 'EMPLEADO', 1, 6, '2024-06-25 16:54:12', 'admin_emiliano', '2024-06-25 16:54:12', 'admin_emiliano'),
(224, 'DIEGO.PEREZ', '59867ba26767aa0544e2b415dc30d5b2ef9b9b1d', 'EMPLEADO', 1, 6, '2024-06-25 16:54:29', 'admin_emiliano', '2024-06-25 16:54:29', 'admin_emiliano'),
(225, 'CAMILO.PEREZ', '9c42a65d9bf3100d49516240e4835a89c4ab0027', 'EMPLEADO', 1, 6, '2024-06-25 16:54:43', 'admin_emiliano', '2024-06-25 16:54:43', 'admin_emiliano'),
(226, 'MARIA.PEREZ', 'db171bdd4cc6c9222c1479140691a443338d81bb', 'EMPLEADO', 1, 6, '2024-06-25 16:55:18', 'admin_emiliano', '2024-06-25 16:55:18', 'admin_emiliano'),
(227, 'IGNACIO.PEREZ', '0f1cbe120b21899ed0354180bbbf617638fed9ee', 'EMPLEADO', 1, 6, '2024-06-25 16:55:32', 'admin_emiliano', '2024-06-25 16:55:32', 'admin_emiliano'),
(228, 'JUAN.PEREZ', '66da1463b8c8aa096d3c981f00aca067206e238e', 'EMPLEADO', 1, 6, '2024-06-25 16:55:48', 'admin_emiliano', '2024-06-25 16:55:48', 'admin_emiliano'),
(229, 'JAVIER.PEREZ', '0af221bb014b93d335e714a58309c2e0684a6e27', 'EMPLEADO', 1, 6, '2024-06-25 16:56:11', 'admin_emiliano', '2024-06-25 16:56:11', 'admin_emiliano'),
(230, 'BARBARA.PINO', 'eb9dfdf9242fb324cb1558aa537fe41a3cb271a5', 'EMPLEADO', 1, 6, '2024-06-25 16:56:31', 'admin_emiliano', '2024-06-25 16:56:31', 'admin_emiliano'),
(231, 'JORGE.PINO', '0b5592e98fb9c00775d2722733c262cac21ae5e2', 'EMPLEADO', 1, 6, '2024-06-25 16:57:11', 'admin_emiliano', '2024-06-25 16:57:11', 'admin_emiliano'),
(232, 'MARIO.PIZARRO', '4de170b0e6e947b9155fbb03596e01331c931734', 'EMPLEADO', 1, 6, '2024-06-25 16:57:28', 'admin_emiliano', '2024-06-25 16:57:28', 'admin_emiliano'),
(233, 'CAMILA.PONCE', 'd25b20d4f170064175f74f5d2d724af87e4f5a38', 'EMPLEADO', 1, 6, '2024-06-25 16:57:42', 'admin_emiliano', '2024-06-25 16:57:42', 'admin_emiliano'),
(234, 'LORENA.PONCE', 'e7a7c69fad5758dcf7f8960b189dd13d13d306e5', 'EMPLEADO', 1, 6, '2024-06-25 16:58:42', 'admin_emiliano', '2024-06-25 16:58:42', 'admin_emiliano'),
(235, 'CHRISTIAN.PORTILLA', 'f12f38efbf4a1399b24a222ed702d208cd29a7e3', 'EMPLEADO', 1, 6, '2024-06-25 16:59:10', 'admin_emiliano', '2024-06-25 16:59:10', 'admin_emiliano'),
(236, 'JOSE.PRIETO', '876ff929cfccd226a6b7c9cad0028aa2f0e29c73', 'EMPLEADO', 1, 6, '2024-06-25 16:59:35', 'admin_emiliano', '2024-06-25 16:59:35', 'admin_emiliano'),
(237, 'MAURICIO.QUIROZ', '4969400b1ec31554062c04b481f76e4c34bc9f1a', 'EMPLEADO', 1, 6, '2024-06-25 17:00:01', 'admin_emiliano', '2024-06-25 17:00:01', 'admin_emiliano'),
(238, 'GABRIEL.RAMIREZ', '45f3339e28dc400e431d1508ecf91feffe01b373', 'EMPLEADO', 1, 6, '2024-06-25 17:00:18', 'admin_emiliano', '2024-06-25 17:00:18', 'admin_emiliano'),
(239, 'MIGUEL.RAMIREZ', 'b5670e85c251a47603e6203ac5bfd4597e8a8835', 'EMPLEADO', 1, 6, '2024-06-25 17:00:55', 'admin_emiliano', '2024-06-25 17:00:55', 'admin_emiliano'),
(240, 'JUAN.RAMIREZ', 'ec8f1fac5a8ad119739359f6e3dcea50bbd29d8b', 'EMPLEADO', 1, 6, '2024-06-25 17:01:43', 'admin_emiliano', '2024-06-25 17:01:43', 'admin_emiliano'),
(241, 'CINTIA.REINOSO', 'e4d92ecb73610c9cdd9f4fd4f2584388ff7316c7', 'EMPLEADO', 1, 6, '2024-06-25 17:01:58', 'admin_emiliano', '2024-06-25 17:01:58', 'admin_emiliano'),
(242, 'GERARDO.REYES', 'f84cf3f5e6899c32548b8d99c4f8669a2a5048a2', 'EMPLEADO', 1, 6, '2024-06-25 17:02:14', 'admin_emiliano', '2024-06-25 17:02:14', 'admin_emiliano'),
(243, 'CARLOS.REYES', 'c939d51ad7d363bb4c2fe2e59298d0c72c5afb28', 'EMPLEADO', 1, 6, '2024-06-25 17:03:12', 'admin_emiliano', '2024-06-25 17:03:12', 'admin_emiliano'),
(244, 'STEPHANIE.REYES', 'c3cddc3caccc560de17bc135cf2d764a655b59bc', 'EMPLEADO', 1, 6, '2024-06-25 17:03:27', 'admin_emiliano', '2024-06-25 17:03:27', 'admin_emiliano'),
(245, 'GUILLERMO.REYES', 'c83661d9e74a8d9c62c75887ee67ef520aadcfe5', 'EMPLEADO', 1, 6, '2024-06-25 17:03:44', 'admin_emiliano', '2024-06-25 17:03:44', 'admin_emiliano'),
(246, 'PABLO.RICCI', 'efdd09b57dea71db66007aab7d8c42a72a536bbe', 'EMPLEADO', 1, 6, '2024-06-25 17:04:00', 'admin_emiliano', '2024-06-25 17:04:00', 'admin_emiliano'),
(247, 'MIGUEL.RINCONES', '564007f3b8916d389ce1f7073aa945501cf71c43', 'EMPLEADO', 1, 6, '2024-06-25 17:04:17', 'admin_emiliano', '2024-06-25 17:04:17', 'admin_emiliano'),
(248, 'PABLO.RIOS', '1f3361f065a3d57dd807a89df9dadd7004af9e0c', 'EMPLEADO', 1, 6, '2024-06-25 17:04:35', 'admin_emiliano', '2024-06-25 17:04:35', 'admin_emiliano'),
(249, 'CLAUDIO.RIQUELME', 'b95387d1b9d59889a624f95263459dccd095f4fb', 'EMPLEADO', 1, 6, '2024-06-25 17:07:51', 'admin_emiliano', '2024-06-25 17:07:51', 'admin_emiliano'),
(250, 'TOMAS.RIVAS', '2b1617dd962caf075990337ff3bfb84dbdcf3ee9', 'EMPLEADO', 1, 6, '2024-06-25 17:08:14', 'admin_emiliano', '2024-06-25 17:08:14', 'admin_emiliano'),
(251, 'KARELIS.ROA', '2354831862b147fe16ad58fcf93e0a66f8f1c3b5', 'EMPLEADO', 1, 6, '2024-06-25 17:08:34', 'admin_emiliano', '2024-06-25 17:08:34', 'admin_emiliano'),
(252, 'EDUARDO.RODRIGUEZ', '890df46f3fc69aeab7596855fa42089c3ccf8144', 'EMPLEADO', 1, 6, '2024-06-25 17:08:59', 'admin_emiliano', '2024-06-25 17:08:59', 'admin_emiliano'),
(253, 'EUGENIA.ROJAS', '15b94dcee7e8dac170458c775e26b48f528bed96', 'EMPLEADO', 1, 6, '2024-06-25 17:09:25', 'admin_emiliano', '2024-06-25 17:09:25', 'admin_emiliano'),
(254, 'MATIAS.ROJAS', 'b2399e5f98efe19755e6b9ca1b52af59b732006a', 'EMPLEADO', 1, 6, '2024-06-25 17:11:18', 'admin_emiliano', '2024-06-25 17:11:18', 'admin_emiliano'),
(255, 'JOSE.RONCO', '860c2423d4ec18a21bf423a07fcac41cc855d544', 'EMPLEADO', 1, 6, '2024-06-25 17:11:36', 'admin_emiliano', '2024-06-25 17:11:36', 'admin_emiliano'),
(256, 'ANGEL.RUIZ', 'af60cf273ca3a9fc1f235c55861903eef34685c2', 'EMPLEADO', 1, 6, '2024-06-25 17:12:15', 'admin_emiliano', '2024-06-25 17:12:15', 'admin_emiliano'),
(257, 'CAROLINA.SALAZAR', '1fe47e3051bcf66578228f039ef5d908f4115339', 'EMPLEADO', 1, 6, '2024-06-25 17:12:29', 'admin_emiliano', '2024-06-25 17:12:29', 'admin_emiliano'),
(258, 'ALVARO.SALDIAS', '40caa7c8baa433f5e38cabd9649b99cffaea5e44', 'EMPLEADO', 1, 6, '2024-06-25 17:13:08', 'admin_emiliano', '2024-06-25 17:13:08', 'admin_emiliano'),
(259, 'PABLO.SALDIVAR', 'b207920041d5bdeba6535d803e42ebc74e84d37c', 'EMPLEADO', 1, 6, '2024-06-25 17:13:34', 'admin_emiliano', '2024-06-25 17:13:34', 'admin_emiliano'),
(260, 'SILVANA.SALLES', '04252f092c1fc7bdca5202819d2ed2a171b94b5e', 'EMPLEADO', 1, 6, '2024-06-25 17:13:51', 'admin_emiliano', '2024-06-25 17:13:51', 'admin_emiliano'),
(261, 'ALEJANDRO.SANCHEZ', '1f2eced5fb1fbb18e046e7eabac64f95ec5065ba', 'EMPLEADO', 1, 6, '2024-06-25 17:14:20', 'admin_emiliano', '2024-06-25 17:14:20', 'admin_emiliano'),
(262, 'GABRIELA.SANCHEZ', '639ea387f4cb5b1d0d1ace10d045682eb2f7dd00', 'EMPLEADO', 1, 6, '2024-06-25 17:16:38', 'admin_emiliano', '2024-06-25 17:16:38', 'admin_emiliano'),
(263, 'MARCO.SANDOVAL', '4450bec50f0877573cb0ce144e08e9d2b6542f65', 'EMPLEADO', 1, 6, '2024-06-25 17:16:55', 'admin_emiliano', '2024-06-25 17:16:55', 'admin_emiliano'),
(264, 'MAURICIO.SANTANDER', '3ca0d4178ec3aa9defef5fa3d05f2546ec0bd797', 'EMPLEADO', 1, 6, '2024-06-25 17:17:18', 'admin_emiliano', '2024-06-25 17:17:18', 'admin_emiliano'),
(265, 'NICOLAS.SANTANDER', 'ded16142dd013eee2be61813a8bfc6931f93f52b', 'EMPLEADO', 1, 6, '2024-06-25 17:17:58', 'admin_emiliano', '2024-06-25 17:17:58', 'admin_emiliano'),
(266, 'JONATHAN.SANTOS', 'e42c2bb04ddf9e7ade9a2048fbe59b672109e82a', 'EMPLEADO', 1, 6, '2024-06-25 17:18:15', 'admin_emiliano', '2024-06-25 17:18:15', 'admin_emiliano'),
(267, 'FRANCISCO.SARAOS', '09c56b1205cb83bf40117a7a3ac72c3d05595b37', 'EMPLEADO', 1, 6, '2024-06-25 17:18:34', 'admin_emiliano', '2024-06-25 17:18:34', 'admin_emiliano'),
(268, 'CARLOS.SEGURA', 'd34f7238a5132dac6e1e5f7e37ffccdaf1d33914', 'EMPLEADO', 1, 6, '2024-06-25 17:18:50', 'admin_emiliano', '2024-06-25 17:18:50', 'admin_emiliano'),
(269, 'ALVARO.SEPULVEDA', '53ac44dc4491f6dded2c7f047c995b186f6d479d', 'EMPLEADO', 1, 6, '2024-06-25 17:19:15', 'admin_emiliano', '2024-06-25 17:19:15', 'admin_emiliano'),
(270, 'KAREN.SEPULVEDA', 'ecde2b1d0543aaa64ef646bf6c0c462a8648801e', 'EMPLEADO', 1, 6, '2024-06-25 17:19:30', 'admin_emiliano', '2024-06-25 17:19:30', 'admin_emiliano'),
(271, 'LUIS.SEPULVEDA', 'c6430b8a7fbb3bad65bbd16f9a0586f9a1d522fd', 'EMPLEADO', 1, 6, '2024-06-25 17:20:22', 'admin_emiliano', '2024-06-25 17:20:22', 'admin_emiliano'),
(272, 'LUIS.SILVA', '84a8c2ec8c7a01314bdc7fdc7a0fed0c2d10c0ab', 'EMPLEADO', 1, 6, '2024-06-25 17:20:36', 'admin_emiliano', '2024-06-25 17:20:36', 'admin_emiliano'),
(273, 'GASTON.SILVA', '8181b6581fb29ed3f3ee9aa9b4a53637a508c23f', 'EMPLEADO', 1, 6, '2024-06-25 17:21:02', 'admin_emiliano', '2024-06-25 17:21:02', 'admin_emiliano'),
(274, 'PATRICIA.SILVA', '6ac3e3b56f2d4e836cd95467953d0e738dbf95d2', 'EMPLEADO', 1, 6, '2024-06-25 17:21:27', 'admin_emiliano', '2024-06-25 17:21:27', 'admin_emiliano'),
(275, 'PABLO.SILVA', '1f6b6eac2993daf9b9f0074815926ba91cbfd9bf', 'EMPLEADO', 1, 6, '2024-06-25 17:21:42', 'admin_emiliano', '2024-06-25 17:21:42', 'admin_emiliano'),
(276, 'MATIAS.SOLIS', '0957e2d95b6218644f7d4c1afe8fc7746c4c2f56', 'EMPLEADO', 1, 6, '2024-06-25 17:21:55', 'admin_emiliano', '2024-06-25 17:21:55', 'admin_emiliano'),
(277, 'CARLOS.SOTO', '57d767a0c5b14f78ed42b4437cf13717573f9a35', 'EMPLEADO', 1, 6, '2024-06-25 17:22:13', 'admin_emiliano', '2024-06-25 17:22:13', 'admin_emiliano'),
(278, 'SAMUEL.SOTO', 'efcc401777344843be176491a8fc1e205e68ede6', 'EMPLEADO', 1, 6, '2024-06-25 17:22:49', 'admin_emiliano', '2024-06-25 17:22:49', 'admin_emiliano'),
(279, 'GINO.STEFONI', 'fd63793d8081c964f2319bf129c105610c8f4795', 'EMPLEADO', 1, 6, '2024-06-25 17:23:09', 'admin_emiliano', '2024-06-25 17:23:09', 'admin_emiliano'),
(280, 'CRISTOPHER.SUAREZ', '992fcccb4653f9a7fcd03d60c25f8b1c620a2845', 'EMPLEADO', 1, 6, '2024-06-25 17:23:25', 'admin_emiliano', '2024-06-25 17:23:25', 'admin_emiliano'),
(281, 'ALAN.TAPIA', 'e29323ab08bec02b47b220b6dd8cebed8bd63716', 'EMPLEADO', 1, 6, '2024-06-25 17:23:42', 'admin_emiliano', '2024-06-25 17:23:42', 'admin_emiliano'),
(282, 'NELSON.TAPIA', '4ba420ec3d264e3974380aba570defef9c7e9e1b', 'EMPLEADO', 1, 6, '2024-06-25 17:23:59', 'admin_emiliano', '2024-06-25 17:23:59', 'admin_emiliano'),
(283, 'DINO.TAVANO', 'c196d8ec9da7e3723bc8f790f7954d8e469cbeea', 'EMPLEADO', 1, 6, '2024-06-25 17:24:24', 'admin_emiliano', '2024-06-25 17:24:24', 'admin_emiliano'),
(284, 'DIEGO.TOLOSA', 'f65d2b1848714f2c58c2857bc84934b75381141a', 'EMPLEADO', 1, 6, '2024-06-25 17:24:41', 'admin_emiliano', '2024-06-25 17:24:41', 'admin_emiliano'),
(285, 'ENDRINA.TONCETICH', '715e114064102124dce0e4b92113d64bc6e206c1', 'EMPLEADO', 1, 6, '2024-06-25 17:25:00', 'admin_emiliano', '2024-06-25 17:25:00', 'admin_emiliano'),
(286, 'FELIPE.TORO', '5f43a9dd011cdb8b22a8e472d66d792e802e375a', 'EMPLEADO', 1, 6, '2024-06-25 17:25:21', 'admin_emiliano', '2024-06-25 17:25:21', 'admin_emiliano'),
(287, 'ISAIDY.TORRES', '7992170c530692b4b219125aad13548707c574b7', 'EMPLEADO', 1, 6, '2024-06-25 17:25:37', 'admin_emiliano', '2024-06-25 17:25:37', 'admin_emiliano'),
(288, 'MAURICIO.TORRES', '63bf8f29b5a20e2f21212504b0d900da048c327e', 'EMPLEADO', 1, 6, '2024-06-25 17:25:58', 'admin_emiliano', '2024-06-25 17:25:58', 'admin_emiliano'),
(289, 'RICHARD.URETA', 'd24dbfedeb3cb0f356c47c86c83f57fd690088a9', 'EMPLEADO', 1, 6, '2024-06-25 17:26:12', 'admin_emiliano', '2024-06-25 17:26:12', 'admin_emiliano'),
(290, 'FRANCISCO.URRA', '30d071f116ac1481080ca1783442527356b4265f', 'EMPLEADO', 1, 6, '2024-06-25 17:26:51', 'admin_emiliano', '2024-06-25 17:26:51', 'admin_emiliano'),
(291, 'MARISOL.URZUA', '0838c3b8de5f6c3fdcb8949635fc05265569a3b1', 'EMPLEADO', 1, 6, '2024-06-25 17:27:25', 'admin_emiliano', '2024-06-25 17:27:25', 'admin_emiliano'),
(292, 'ESTEFANI.VALDES', '5ad842bc27e31301031dfcc55c612a9f2efd0d7e', 'EMPLEADO', 1, 6, '2024-06-25 17:27:44', 'admin_emiliano', '2024-06-25 17:27:44', 'admin_emiliano'),
(293, 'PABLO.VALDES', '8db015d6f2633c1d030aaebcca0afa5f5ac06a9c', 'EMPLEADO', 1, 6, '2024-06-25 17:28:13', 'admin_emiliano', '2024-06-25 17:28:13', 'admin_emiliano'),
(294, 'ALEJANDRO.VALDIVIA', '6a222af95c79b63ac6c38fec4125025a7210a063', 'EMPLEADO', 1, 6, '2024-06-25 17:28:35', 'admin_emiliano', '2024-06-25 17:28:35', 'admin_emiliano'),
(295, 'MARCOS.VARGAS', 'b5680261938e8c8296805c84911719a047391fe9', 'EMPLEADO', 1, 6, '2024-06-25 17:28:55', 'admin_emiliano', '2024-06-25 17:28:55', 'admin_emiliano'),
(296, 'VICTOR.VASQUEZ', '16b460117174d299a51f64c0db5478e953b0410a', 'EMPLEADO', 1, 6, '2024-06-25 17:29:17', 'admin_emiliano', '2024-06-25 17:29:17', 'admin_emiliano'),
(297, 'IGNACIO.VEGA', 'a4e9a0062f3884a7bde5224998b8bf38d301b8eb', 'EMPLEADO', 1, 6, '2024-06-25 17:29:56', 'admin_emiliano', '2024-06-25 17:29:56', 'admin_emiliano'),
(298, 'GUSTAVO.VELA', '9e9d86b93291c7615f92a5aa9a15bb27db271af8', 'EMPLEADO', 1, 6, '2024-06-25 17:30:22', 'admin_emiliano', '2024-06-25 17:30:22', 'admin_emiliano'),
(299, 'FRANCISCO.VELASCO', '37536a54c04cab433648a5b8b7bf7341ad00817c', 'EMPLEADO', 1, 6, '2024-06-25 17:30:39', 'admin_emiliano', '2024-06-25 17:30:39', 'admin_emiliano'),
(300, 'DERBIS.VELAZCO', '95ef19f7cf79c499f292c4c3607d573957246e4e', 'EMPLEADO', 1, 6, '2024-06-25 17:30:59', 'admin_emiliano', '2024-06-25 17:30:59', 'admin_emiliano'),
(301, 'RAUL.VENEGAS', '83e9278b2420f96350932d03861696ee5545dcff', 'EMPLEADO', 1, 6, '2024-06-25 17:31:22', 'admin_emiliano', '2024-06-25 17:31:22', 'admin_emiliano');
INSERT INTO `loginusuario` (`idLoginUsuario`, `usuario`, `password`, `tipoUsuario`, `isActive`, `idRolUsuario`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(302, 'DOUGLAS.VERAS', 'f265512a2e7051b67d49b9191e867d9afd24b64c', 'EMPLEADO', 1, 6, '2024-06-25 17:31:37', 'admin_emiliano', '2024-06-25 17:31:37', 'admin_emiliano'),
(303, 'DIANA.VERGARA', 'ad53c0002f203a174a4297ab0415baa9e86769f9', 'EMPLEADO', 1, 6, '2024-06-25 17:32:03', 'admin_emiliano', '2024-06-25 17:32:03', 'admin_emiliano'),
(304, 'CARLOS.VERGARA', '2b884c5bd1cdbbe5237bbd23d99439bc1885b8dd', 'EMPLEADO', 1, 6, '2024-06-25 17:32:21', 'admin_emiliano', '2024-06-25 17:32:21', 'admin_emiliano'),
(305, 'JUAN.VEZGA', '13a8d9134bf9ba85b52f7315ee943653a0b398f8', 'EMPLEADO', 1, 6, '2024-06-25 17:32:38', 'admin_emiliano', '2024-06-25 17:32:38', 'admin_emiliano'),
(306, 'LEOPOLDO.VIDAL', '9d1309b44fa51e2b0a2039b43d5ee4c06e44b2e5', 'EMPLEADO', 1, 6, '2024-06-25 17:33:00', 'admin_emiliano', '2024-06-25 17:33:00', 'admin_emiliano'),
(307, 'WILFREDO.VILLA', 'fc0738c8a08793cee8deff8ab55a2e17b34b20d7', 'EMPLEADO', 1, 6, '2024-06-25 17:33:24', 'admin_emiliano', '2024-06-25 17:33:24', 'admin_emiliano'),
(308, 'ESTEBAN.VINARTA', '9ba15310f257bc94d86c451f80d3f519c47ee857', 'EMPLEADO', 1, 6, '2024-06-25 17:34:11', 'admin_emiliano', '2024-06-25 17:34:11', 'admin_emiliano'),
(309, 'MAURICIO.VIVANCO', '75660c7817ded5418e5d6e1a6c082c988bd914d2', 'EMPLEADO', 1, 6, '2024-06-25 17:34:26', 'admin_emiliano', '2024-06-25 17:34:26', 'admin_emiliano'),
(310, 'MIGUEL.VIVANCO', '33c93b6c14796ac0c258410d496c508def455d1f', 'EMPLEADO', 1, 6, '2024-06-25 17:35:08', 'admin_emiliano', '2024-06-25 17:35:08', 'admin_emiliano'),
(311, 'RICARDO.VIZCARRA', '206124f13ee871b2445cee7b2e8503ef7d2e2e52', 'EMPLEADO', 1, 6, '2024-06-25 17:35:23', 'admin_emiliano', '2024-06-25 17:35:23', 'admin_emiliano'),
(312, 'CARLOS.WENNERSTROM', 'a59565309f73b6687a9bbbfd7de5fdea04b41be4', 'EMPLEADO', 1, 6, '2024-06-25 17:35:43', 'admin_emiliano', '2024-06-25 17:35:43', 'admin_emiliano'),
(313, 'DIEGO.YANEZ', '6b8178032fc067afbdbd51ae3d3ee7c7a3c74268', 'EMPLEADO', 1, 6, '2024-06-25 17:36:13', 'admin_emiliano', '2024-06-25 17:36:13', 'admin_emiliano'),
(314, 'FABIAN.YANEZ', '28b5be8dc040167af76e6787b034738b04ac0369', 'EMPLEADO', 1, 6, '2024-06-25 17:36:35', 'admin_emiliano', '2024-06-25 17:36:35', 'admin_emiliano'),
(315, 'ALVARO.YUBERO', '1e529e6d0e01a559e620f41a461b262fe2e6dde3', 'EMPLEADO', 1, 6, '2024-06-25 17:36:51', 'admin_emiliano', '2024-06-25 17:36:51', 'admin_emiliano'),
(316, 'ROBERTO.ZAVALA', 'ab16f9f284af117d030bab03b5835339b7992114', 'EMPLEADO', 1, 6, '2024-06-25 17:37:19', 'admin_emiliano', '2024-06-25 17:37:19', 'admin_emiliano'),
(317, 'FERNANDA.ZURITA', '8597718fcfb884aeedb0548daff1682459fb3563', 'EMPLEADO', 1, 6, '2024-06-25 17:37:35', 'admin_emiliano', '2024-06-25 17:37:35', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `notaexamen`
--

CREATE TABLE `notaexamen` (
  `idNotaExamen` int(11) NOT NULL,
  `notaExamen` int(11) NOT NULL,
  `apruebaExamen` char(2) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idRamoExamen` int(11) NOT NULL,
  `idCursoAlumno` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `pais`
--

CREATE TABLE `pais` (
  `idPais` int(11) NOT NULL,
  `nomPais` varchar(50) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `pais`
--

INSERT INTO `pais` (`idPais`, `nomPais`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'CHILE', 1, '2024-06-06 15:23:24', 'admin_sistema', '2024-06-06 15:23:24', 'admin_sistema'),
(2, 'ARGENTINA', 1, '2024-06-24 17:57:23', 'admin_emiliano', '2024-06-24 17:57:23', 'admin_emiliano'),
(3, 'A confirmar', 1, '2024-06-24 17:57:23', 'admin_emiliano', '2024-06-24 17:57:23', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ramo`
--

CREATE TABLE `ramo` (
  `idRamo` int(11) NOT NULL,
  `codRamo` varchar(20) NOT NULL,
  `nomRamo` varchar(50) NOT NULL,
  `tipoRamo` varchar(10) NOT NULL,
  `tipoRamoHH` varchar(12) NOT NULL,
  `duracionRamoHH` double NOT NULL,
  `cantSesionesRamo` int(11) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idCurso` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ramoexamen`
--

CREATE TABLE `ramoexamen` (
  `idRamoExamen` int(11) NOT NULL,
  `nomExamen` varchar(50) NOT NULL,
  `fechaExamen` date NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idRamo` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `relatorramo`
--

CREATE TABLE `relatorramo` (
  `idRelatorRamo` int(11) NOT NULL,
  `fechaIni` date NOT NULL,
  `fechaFin` date NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idEmpleado` int(11) NOT NULL,
  `idRamo` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `reqcurso`
--

CREATE TABLE `reqcurso` (
  `idReqCurso` int(11) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idCurso` int(11) NOT NULL,
  `idCursoRequisito` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `rolusuario`
--

CREATE TABLE `rolusuario` (
  `idRolUsuario` int(11) NOT NULL,
  `nomRol` varchar(50) NOT NULL,
  `descripcion` varchar(500) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `rolusuario`
--

INSERT INTO `rolusuario` (`idRolUsuario`, `nomRol`, `descripcion`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'administrador', 'acceso total', 1, '2023-05-11 17:13:49', 'admin_emiliano', '2023-05-11 17:13:49', ''),
(2, 'people', 'visualizar', 1, '2023-07-24 17:49:29', 'admin_emiliano', '2023-07-24 17:49:29', 'admin_emiliano'),
(3, 'alumno', 'restringido', 1, '2023-07-24 17:49:29', 'admin_emiliano', '2023-07-24 17:49:29', 'admin_emiliano'),
(4, 'externo', 'llenado de formulario', 1, '2023-09-26 22:01:03', 'admin_florencia', '2023-09-26 22:01:03', 'admin_florencia'),
(5, 'relator', 'Rol destinado a los empleados que serán relatores de cursos', 1, '2024-02-20 11:44:59', 'admin_emiliano', '2024-02-20 11:44:59', 'admin_emiliano'),
(6, 'colaborador', 'Rol destinado a los empleados que serán colaboradores en un proyecto', 1, '2024-02-20 11:44:59', 'admin_emiliano', '2024-02-20 11:44:59', 'admin_emiliano'),
(7, 'referente', 'Rol destinado a los empleados que serán los referentes en un proyecto', 1, '2024-02-20 11:44:59', 'admin_emiliano', '2024-02-20 11:44:59', 'admin_emiliano'),
(8, 'gerencia', 'Destinado a la gerencia', 1, '2024-02-23 14:16:50', 'admin_emiliano', '2024-02-23 14:16:50', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `servicio`
--

CREATE TABLE `servicio` (
  `idServicio` int(11) NOT NULL,
  `nomServicio` varchar(50) NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idCliente` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `servicio`
--

INSERT INTO `servicio` (`idServicio`, `nomServicio`, `isActive`, `idCliente`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'BANCHILE', 1, 1, '2024-06-24 13:21:45', 'admin_emiliano', '2024-06-24 13:21:45', 'admin_emiliano'),
(2, 'BANCO RIPLEY CHILE', 1, 2, '2024-06-24 13:23:16', 'admin_emiliano', '2024-06-24 13:23:16', 'admin_emiliano'),
(3, 'BANCO SECURITY', 1, 3, '2024-06-24 13:23:22', 'admin_emiliano', '2024-06-24 13:23:22', 'admin_emiliano'),
(4, 'BCI BANCO CREDITO INVERSIONES', 1, 4, '2024-06-24 13:23:28', 'admin_emiliano', '2024-06-24 13:23:28', 'admin_emiliano'),
(5, 'BNP PARIBAS (CHILE)', 1, 5, '2024-06-24 13:23:34', 'admin_emiliano', '2024-06-24 13:23:34', 'admin_emiliano'),
(6, 'CONSORCIO FINANCIERO SA', 1, 6, '2024-06-24 13:23:39', 'admin_emiliano', '2024-06-24 13:23:39', 'admin_emiliano'),
(7, 'ECOS', 1, 7, '2024-06-24 13:23:45', 'admin_emiliano', '2024-06-24 13:23:45', 'admin_emiliano'),
(8, 'FALABELLA CHILE FINANCIERO', 1, 8, '2024-06-24 13:23:51', 'admin_emiliano', '2024-06-24 13:23:51', 'admin_emiliano'),
(9, 'GRUPO SECURITY', 1, 9, '2024-06-24 13:23:56', 'admin_emiliano', '2024-06-24 13:23:56', 'admin_emiliano'),
(10, 'ICB FOOD SERVICE', 1, 10, '2024-06-24 13:24:02', 'admin_emiliano', '2024-06-24 13:24:02', 'admin_emiliano'),
(11, 'PARQUE ARAUCO CL', 1, 11, '2024-06-24 13:24:07', 'admin_emiliano', '2024-06-24 13:24:07', 'admin_emiliano'),
(12, 'TANNER', 1, 12, '2024-06-24 13:24:13', 'admin_emiliano', '2024-06-24 13:24:13', 'admin_emiliano'),
(13, 'TRANSBANK S.A.', 1, 13, '2024-06-24 13:24:19', 'admin_emiliano', '2024-06-24 13:24:19', 'admin_emiliano'),
(14, 'VIDA SECURITY', 1, 14, '2024-06-24 13:24:28', 'admin_emiliano', '2024-06-24 13:24:28', 'admin_emiliano'),
(15, 'WORKMATE', 1, 15, '2024-06-24 13:24:34', 'admin_emiliano', '2024-06-24 13:24:34', 'admin_emiliano'),
(16, 'TSOFT', 1, 16, '2024-06-24 17:03:01', 'admin_emiliano', '2024-06-24 17:03:01', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `sesion`
--

CREATE TABLE `sesion` (
  `idSesion` int(11) NOT NULL,
  `nroSesion` int(11) NOT NULL,
  `nomSesion` varchar(50) NOT NULL,
  `tipoSesion` varchar(10) NOT NULL,
  `tipoSesionHH` varchar(12) NOT NULL,
  `duracionSesionHH` double NOT NULL,
  `isActive` tinyint(1) NOT NULL,
  `idRamo` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `subsistema`
--

CREATE TABLE `subsistema` (
  `idSubsistema` int(11) NOT NULL,
  `nomSubsistema` varchar(50) NOT NULL,
  `descripcion` varchar(500) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `subsistema`
--

INSERT INTO `subsistema` (`idSubsistema`, `nomSubsistema`, `descripcion`, `isActive`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'Academia de formación', 'Acceso a todos lo relacionado a la academia', 1, '2023-06-22 13:19:11', 'admin_emiliano', '2023-06-22 13:19:11', 'admin_emiliano'),
(2, 'Evaluaciones de desempeño', 'Acceso a estadísticas, resultados e informes sobre las evaluaciones de desempeño', 1, '2023-06-22 13:19:11', 'admin_emiliano', '2023-06-22 13:19:11', 'admin_emiliano');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tipoperfil`
--

CREATE TABLE `tipoperfil` (
  `idTipoPerfil` int(11) NOT NULL,
  `nomTipoPerfil` varchar(50) NOT NULL,
  `isActive` tinyint(4) NOT NULL,
  `idSubsistema` int(11) NOT NULL,
  `fechaCreacion` datetime NOT NULL,
  `usuarioCreacion` varchar(15) NOT NULL,
  `fechaModificacion` datetime NOT NULL,
  `usuarioModificacion` varchar(15) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla `tipoperfil`
--

INSERT INTO `tipoperfil` (`idTipoPerfil`, `nomTipoPerfil`, `isActive`, `idSubsistema`, `fechaCreacion`, `usuarioCreacion`, `fechaModificacion`, `usuarioModificacion`) VALUES
(1, 'Relator', 1, 1, '2023-07-11 17:08:31', 'admin_emiliano', '2023-07-11 17:08:31', 'admin_emiliano'),
(2, 'Alumno', 1, 1, '2023-07-11 17:08:31', 'admin_emiliano', '2023-07-11 17:08:31', 'admin_emiliano');

--
-- Índices para tablas volcadas
--

--
-- Indices de la tabla `area`
--
ALTER TABLE `area`
  ADD PRIMARY KEY (`idArea`),
  ADD UNIQUE KEY `ndx_area_nomArea` (`nomArea`);

--
-- Indices de la tabla `cargo`
--
ALTER TABLE `cargo`
  ADD PRIMARY KEY (`idCargo`),
  ADD UNIQUE KEY `ndx_cargo_nomCargo` (`nomCargo`);

--
-- Indices de la tabla `cliente`
--
ALTER TABLE `cliente`
  ADD PRIMARY KEY (`idCliente`),
  ADD UNIQUE KEY `ndx_cliente_nomCliente` (`nomCliente`),
  ADD KEY `fk_cliente_idPais` (`idPais`);

--
-- Indices de la tabla `confdatos`
--
ALTER TABLE `confdatos`
  ADD PRIMARY KEY (`idConfDatos`),
  ADD KEY `ndx_confDatos_tipoConfDato` (`tipoConfDato`),
  ADD KEY `ndx_confDatos_subTipoConfDato` (`subTipoConfDato`),
  ADD KEY `ndx_confDatos_datoVisible` (`datoVisible`),
  ADD KEY `ndx_confDatos_datoNoVisible` (`datoNoVisible`(768));

--
-- Indices de la tabla `contacto`
--
ALTER TABLE `contacto`
  ADD PRIMARY KEY (`idContacto`),
  ADD KEY `ndx_contacto_nomContacto` (`nomContacto`),
  ADD KEY `ndx_contacto_correoContacto` (`correoContacto`),
  ADD KEY `ndx_contacto_fechaIni_fechaFin` (`fechaIni`,`fechaFin`),
  ADD KEY `fk_contacto_idServicio` (`idServicio`);

--
-- Indices de la tabla `curso`
--
ALTER TABLE `curso`
  ADD PRIMARY KEY (`idCurso`),
  ADD UNIQUE KEY `ndx_curso_codCurso` (`codCurso`),
  ADD UNIQUE KEY `ndx_curso_nomCurso` (`nomCurso`);

--
-- Indices de la tabla `cursoalumno`
--
ALTER TABLE `cursoalumno`
  ADD PRIMARY KEY (`idCursoAlumno`),
  ADD UNIQUE KEY `ndx_cursoAlumno_idAlum_idCurso_fecIni_fecFin` (`idEmpleado`,`idCurso`,`fechaIni`,`fechaFin`),
  ADD KEY `fk_cursoAlumno_idAlumno_idCurso` (`idEmpleado`,`idCurso`),
  ADD KEY `fk_cursoAlumno_idAlumno` (`idEmpleado`),
  ADD KEY `fk_cursoAlumno_idCurso` (`idCurso`);

--
-- Indices de la tabla `cursoalumno_sesion`
--
ALTER TABLE `cursoalumno_sesion`
  ADD PRIMARY KEY (`idCursoAlumnoSesion`),
  ADD KEY `fk_cursoAlumnoSesion_idCursoAlumno` (`idCursoAlumno`),
  ADD KEY `fk_cursoAlumnoSesion_idSesion_idCursoAlumno` (`idSesion`,`idCursoAlumno`),
  ADD KEY `fk_cursoAlumnoSesion_idSesion` (`idSesion`);

--
-- Indices de la tabla `eddevalcompetencia`
--
ALTER TABLE `eddevalcompetencia`
  ADD PRIMARY KEY (`idEDDEvalCompetencia`),
  ADD KEY `ndx_eddEvalCompetencia_nomCompetencia` (`nomCompetencia`);

--
-- Indices de la tabla `eddevalpregunta`
--
ALTER TABLE `eddevalpregunta`
  ADD PRIMARY KEY (`idEDDEvalPregunta`),
  ADD KEY `ndx_eddEvalPregunta_nomPregunta` (`nomPregunta`),
  ADD KEY `ndx_eddEvalPregunta_idPregOrden` (`idEDDEvalPregunta`,`ordenPregunta`),
  ADD KEY `fk_eddEvalPregunta_idEDDEvaluacion` (`idEDDEvaluacion`),
  ADD KEY `fk_eddEvalPregunta_idEDDEvalCompetencia` (`idEDDEvalCompetencia`);

--
-- Indices de la tabla `eddevalproyemp`
--
ALTER TABLE `eddevalproyemp`
  ADD PRIMARY KEY (`idEDDEvalProyEmp`),
  ADD KEY `fk_eddEvalProyEmp_idEDDEvaluacion` (`idEDDEvaluacion`),
  ADD KEY `ndx_eddEvalProyEmp_evalRespondida` (`evalRespondida`),
  ADD KEY `fk_eddEvalProyEmp_idEDDProyEmpEvaluado` (`idEDDProyEmpEvaluado`),
  ADD KEY `fk_eddEvalProyEmp_idEDDProyEmpEvaluador` (`idEDDProyEmpEvaluador`),
  ADD KEY `ndx_eddEvalProyEmp_cicloEvaluacion` (`cicloEvaluacion`);

--
-- Indices de la tabla `eddevalproyresp`
--
ALTER TABLE `eddevalproyresp`
  ADD PRIMARY KEY (`idEDDEvalProyResp`),
  ADD KEY `fk_eddEvalProyResp_idEDDEvalProyEmp` (`idEDDEvalProyEmp`),
  ADD KEY `fk_eddEvalProyResp_idEDDEvalPregunta` (`idEDDEvalPregunta`),
  ADD KEY `fk_eddEvalProyResp_idEDDEvalRespPreg` (`idEDDEvalRespPreg`),
  ADD KEY `ndx_eddEvalProyResp_idEval_idProyEmp_idEvalPreg_idProyResp` (`idEDDEvaluacion`,`idEDDEvalProyEmp`,`idEDDEvalPregunta`,`idEDDEvalRespPreg`);

--
-- Indices de la tabla `eddevalresppreg`
--
ALTER TABLE `eddevalresppreg`
  ADD PRIMARY KEY (`idEDDEvalRespPreg`),
  ADD KEY `ndx_eddEvalRespPreg_nomRespPreg` (`nomRespPreg`),
  ADD KEY `ndx_eddEvalRespPreg_RespPregOrden` (`idEDDEvalRespPreg`,`ordenRespPreg`),
  ADD KEY `fk_eddEvalRespPreg_idEDDEvalPregunta` (`idEDDEvalPregunta`);

--
-- Indices de la tabla `eddevaluacion`
--
ALTER TABLE `eddevaluacion`
  ADD PRIMARY KEY (`idEDDEvaluacion`),
  ADD KEY `ndx_eddEvaluacion_nomEvaluacion` (`nomEvaluacion`),
  ADD KEY `ndx_eddEvaluacion_tipoEvaluacion` (`tipoEvaluacion`),
  ADD KEY `ndx_eddEvaluacion_fecha` (`fechaIni`,`fechaFin`);

--
-- Indices de la tabla `eddproyecto`
--
ALTER TABLE `eddproyecto`
  ADD PRIMARY KEY (`idEDDProyecto`),
  ADD KEY `ndx_eddProyecto_nomProyecto` (`nomProyecto`),
  ADD KEY `ndx_eddProyecto_fecha` (`fechaInicio`,`fechaFin`),
  ADD KEY `fk_eddProyecto_idServicio` (`idServicio`);

--
-- Indices de la tabla `eddproyemp`
--
ALTER TABLE `eddproyemp`
  ADD PRIMARY KEY (`idEDDProyEmp`),
  ADD KEY `fk_eddProyEmp_idProyecto` (`idProyecto`),
  ADD KEY `fk_eddProyEmp_idEmpleado` (`idEmpleado`),
  ADD KEY `ndx_eddProyEmp_cargoEnProy` (`cargoEnProy`);

--
-- Indices de la tabla `empleado`
--
ALTER TABLE `empleado`
  ADD PRIMARY KEY (`idEmpleado`),
  ADD UNIQUE KEY `ndx_empleado_nomEmpleado` (`nomEmpleado`),
  ADD KEY `fk_empleado_idArea` (`idArea`),
  ADD KEY `fk_empleado_idCargo` (`idCargo`),
  ADD KEY `fk_empleado_idLoginUsuario` (`idLoginUsuario`),
  ADD KEY `fk_empleado_idPais` (`idPais`),
  ADD KEY `fk_empleado_idCliente` (`idCliente`),
  ADD KEY `ndx_empleado_correoEmpleado` (`correoEmpleado`) USING BTREE;

--
-- Indices de la tabla `empsubsist`
--
ALTER TABLE `empsubsist`
  ADD PRIMARY KEY (`idEmpSubsist`),
  ADD KEY `ndx_empSubsist_idEmpleado` (`idEmpleado`),
  ADD KEY `fk_empSubsist_idSubsistema` (`idSubsistema`);

--
-- Indices de la tabla `emptipoperfil`
--
ALTER TABLE `emptipoperfil`
  ADD PRIMARY KEY (`idEmpTipoPerfil`),
  ADD KEY `fk_empTipoPerfil_idEmpleado` (`idEmpleado`),
  ADD KEY `fk_empTipoPerfil_idTipoPerfil` (`idTipoPerfil`);

--
-- Indices de la tabla `ihhacop`
--
ALTER TABLE `ihhacop`
  ADD PRIMARY KEY (`idAcop`),
  ADD UNIQUE KEY `ndx_ihhAcop_idProyecto` (`idProyecto`);

--
-- Indices de la tabla `ihhdocumentos`
--
ALTER TABLE `ihhdocumentos`
  ADD PRIMARY KEY (`idDocumento`);

--
-- Indices de la tabla `ihhelementoimp`
--
ALTER TABLE `ihhelementoimp`
  ADD PRIMARY KEY (`idElementoImp`),
  ADD KEY `ndx_ihhElementoImp_tipoElemento` (`idTipoElemento`) USING BTREE;

--
-- Indices de la tabla `ihhimpugnacionemp`
--
ALTER TABLE `ihhimpugnacionemp`
  ADD PRIMARY KEY (`idImpugnacionEmp`),
  ADD KEY `ndx_resumenperproy` (`idresumenperproy`),
  ADD KEY `ndx_ihhImpugnaEmp_idEmpleado` (`idEmpleado`) USING BTREE,
  ADD KEY `ndx_ihhImpugnaEmp_idPeriodo` (`idPeriodo`) USING BTREE,
  ADD KEY `ndx_ihhImpugnaEmp_idElemento` (`idElemento`) USING BTREE,
  ADD KEY `ndx_ihhImpugnaEmp_idAcop` (`idAcop`) USING BTREE;

--
-- Indices de la tabla `ihhnotaimpugnacion`
--
ALTER TABLE `ihhnotaimpugnacion`
  ADD PRIMARY KEY (`idNotaImpugnacion`),
  ADD UNIQUE KEY `ndx_notaImpugna_idImpugnacionEmp` (`idImpugnacionEmp`);

--
-- Indices de la tabla `ihhperiodo`
--
ALTER TABLE `ihhperiodo`
  ADD PRIMARY KEY (`idPeriodo`),
  ADD KEY `ndx_ihhPeriodo_tipoPeriodo` (`idTipoPeriodo`) USING BTREE;

--
-- Indices de la tabla `ihhresumenperiodoproyecto`
--
ALTER TABLE `ihhresumenperiodoproyecto`
  ADD PRIMARY KEY (`idresumenperproy`);

--
-- Indices de la tabla `ihhtipoelemento`
--
ALTER TABLE `ihhtipoelemento`
  ADD PRIMARY KEY (`idTipoElemento`);

--
-- Indices de la tabla `ihhtipoperiodo`
--
ALTER TABLE `ihhtipoperiodo`
  ADD PRIMARY KEY (`idTipoPeriodo`);

--
-- Indices de la tabla `logerroresobj`
--
ALTER TABLE `logerroresobj`
  ADD PRIMARY KEY (`idLogErrorObj`);

--
-- Indices de la tabla `loginusuario`
--
ALTER TABLE `loginusuario`
  ADD PRIMARY KEY (`idLoginUsuario`),
  ADD UNIQUE KEY `ndx_loginUsuario_usuario` (`usuario`),
  ADD KEY `fk_loginUsuario_idRolUsuario` (`idRolUsuario`);

--
-- Indices de la tabla `notaexamen`
--
ALTER TABLE `notaexamen`
  ADD PRIMARY KEY (`idNotaExamen`),
  ADD KEY `fk_notaExamen_idRamoExamen` (`idRamoExamen`),
  ADD KEY `fk_notaExamen_idCursoAlumno` (`idCursoAlumno`),
  ADD KEY `fk_notaExamen_idCursoAlumno_notaExamen` (`idCursoAlumno`,`notaExamen`);

--
-- Indices de la tabla `pais`
--
ALTER TABLE `pais`
  ADD PRIMARY KEY (`idPais`),
  ADD UNIQUE KEY `ndx_pais_nomPais` (`nomPais`);

--
-- Indices de la tabla `ramo`
--
ALTER TABLE `ramo`
  ADD PRIMARY KEY (`idRamo`),
  ADD UNIQUE KEY `ndx_ramo_codRamo` (`codRamo`),
  ADD UNIQUE KEY `ndx_ramo_nomRamo` (`nomRamo`),
  ADD KEY `fx_ramo_idCurso` (`idCurso`);

--
-- Indices de la tabla `ramoexamen`
--
ALTER TABLE `ramoexamen`
  ADD PRIMARY KEY (`idRamoExamen`),
  ADD KEY `fk_ramoExamen_idRamo` (`idRamo`),
  ADD KEY `ndx_ramoExamen_idRamo_nomExamen` (`idRamo`,`nomExamen`);

--
-- Indices de la tabla `relatorramo`
--
ALTER TABLE `relatorramo`
  ADD PRIMARY KEY (`idRelatorRamo`),
  ADD KEY `fk_relatorRamo_idRamo` (`idRamo`),
  ADD KEY `fk_relatorRamo_idEmpleado` (`idEmpleado`);

--
-- Indices de la tabla `reqcurso`
--
ALTER TABLE `reqcurso`
  ADD PRIMARY KEY (`idReqCurso`),
  ADD KEY `fk_reqCurso_idCurso` (`idCurso`),
  ADD KEY `fk_reqCurso_idCursoRequisito` (`idCursoRequisito`);

--
-- Indices de la tabla `rolusuario`
--
ALTER TABLE `rolusuario`
  ADD PRIMARY KEY (`idRolUsuario`),
  ADD UNIQUE KEY `ndx_rolUsuario_nomRol` (`nomRol`);

--
-- Indices de la tabla `servicio`
--
ALTER TABLE `servicio`
  ADD PRIMARY KEY (`idServicio`),
  ADD UNIQUE KEY `ndx_servicio_nomServicio` (`nomServicio`),
  ADD KEY `ndx_servicio_idCliente` (`idCliente`);

--
-- Indices de la tabla `sesion`
--
ALTER TABLE `sesion`
  ADD PRIMARY KEY (`idSesion`),
  ADD KEY `ndx_sesion_nomSesion` (`nomSesion`),
  ADD KEY `fk_sesion_idRamon` (`idRamo`),
  ADD KEY `fk_sesion_idRamo_nroSesion` (`idRamo`,`nroSesion`);

--
-- Indices de la tabla `subsistema`
--
ALTER TABLE `subsistema`
  ADD PRIMARY KEY (`idSubsistema`),
  ADD KEY `ndx_subsistema_nomSubsistema` (`nomSubsistema`);

--
-- Indices de la tabla `tipoperfil`
--
ALTER TABLE `tipoperfil`
  ADD PRIMARY KEY (`idTipoPerfil`),
  ADD KEY `ndx_tipoPerfil_nomTipoPerfil` (`nomTipoPerfil`),
  ADD KEY `fk_tipoPerfil_idSubsistema` (`idSubsistema`);

--
-- AUTO_INCREMENT de las tablas volcadas
--

--
-- AUTO_INCREMENT de la tabla `area`
--
ALTER TABLE `area`
  MODIFY `idArea` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT de la tabla `cargo`
--
ALTER TABLE `cargo`
  MODIFY `idCargo` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT de la tabla `cliente`
--
ALTER TABLE `cliente`
  MODIFY `idCliente` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT de la tabla `confdatos`
--
ALTER TABLE `confdatos`
  MODIFY `idConfDatos` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=48;

--
-- AUTO_INCREMENT de la tabla `contacto`
--
ALTER TABLE `contacto`
  MODIFY `idContacto` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `curso`
--
ALTER TABLE `curso`
  MODIFY `idCurso` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `cursoalumno`
--
ALTER TABLE `cursoalumno`
  MODIFY `idCursoAlumno` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `cursoalumno_sesion`
--
ALTER TABLE `cursoalumno_sesion`
  MODIFY `idCursoAlumnoSesion` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `eddevalcompetencia`
--
ALTER TABLE `eddevalcompetencia`
  MODIFY `idEDDEvalCompetencia` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;

--
-- AUTO_INCREMENT de la tabla `eddevalpregunta`
--
ALTER TABLE `eddevalpregunta`
  MODIFY `idEDDEvalPregunta` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `eddevalproyemp`
--
ALTER TABLE `eddevalproyemp`
  MODIFY `idEDDEvalProyEmp` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `eddevalproyresp`
--
ALTER TABLE `eddevalproyresp`
  MODIFY `idEDDEvalProyResp` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `eddevalresppreg`
--
ALTER TABLE `eddevalresppreg`
  MODIFY `idEDDEvalRespPreg` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `eddevaluacion`
--
ALTER TABLE `eddevaluacion`
  MODIFY `idEDDEvaluacion` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `eddproyecto`
--
ALTER TABLE `eddproyecto`
  MODIFY `idEDDProyecto` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=18;

--
-- AUTO_INCREMENT de la tabla `eddproyemp`
--
ALTER TABLE `eddproyemp`
  MODIFY `idEDDProyEmp` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `empleado`
--
ALTER TABLE `empleado`
  MODIFY `idEmpleado` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=317;

--
-- AUTO_INCREMENT de la tabla `empsubsist`
--
ALTER TABLE `empsubsist`
  MODIFY `idEmpSubsist` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `emptipoperfil`
--
ALTER TABLE `emptipoperfil`
  MODIFY `idEmpTipoPerfil` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `ihhacop`
--
ALTER TABLE `ihhacop`
  MODIFY `idAcop` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=18;

--
-- AUTO_INCREMENT de la tabla `ihhdocumentos`
--
ALTER TABLE `ihhdocumentos`
  MODIFY `idDocumento` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT de la tabla `ihhelementoimp`
--
ALTER TABLE `ihhelementoimp`
  MODIFY `idElementoImp` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=32;

--
-- AUTO_INCREMENT de la tabla `ihhimpugnacionemp`
--
ALTER TABLE `ihhimpugnacionemp`
  MODIFY `idImpugnacionEmp` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `ihhnotaimpugnacion`
--
ALTER TABLE `ihhnotaimpugnacion`
  MODIFY `idNotaImpugnacion` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `ihhperiodo`
--
ALTER TABLE `ihhperiodo`
  MODIFY `idPeriodo` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT de la tabla `ihhresumenperiodoproyecto`
--
ALTER TABLE `ihhresumenperiodoproyecto`
  MODIFY `idresumenperproy` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=250;

--
-- AUTO_INCREMENT de la tabla `ihhtipoelemento`
--
ALTER TABLE `ihhtipoelemento`
  MODIFY `idTipoElemento` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `ihhtipoperiodo`
--
ALTER TABLE `ihhtipoperiodo`
  MODIFY `idTipoPeriodo` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `logerroresobj`
--
ALTER TABLE `logerroresobj`
  MODIFY `idLogErrorObj` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT de la tabla `loginusuario`
--
ALTER TABLE `loginusuario`
  MODIFY `idLoginUsuario` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=318;

--
-- AUTO_INCREMENT de la tabla `notaexamen`
--
ALTER TABLE `notaexamen`
  MODIFY `idNotaExamen` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `pais`
--
ALTER TABLE `pais`
  MODIFY `idPais` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT de la tabla `ramo`
--
ALTER TABLE `ramo`
  MODIFY `idRamo` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `ramoexamen`
--
ALTER TABLE `ramoexamen`
  MODIFY `idRamoExamen` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `relatorramo`
--
ALTER TABLE `relatorramo`
  MODIFY `idRelatorRamo` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `reqcurso`
--
ALTER TABLE `reqcurso`
  MODIFY `idReqCurso` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `rolusuario`
--
ALTER TABLE `rolusuario`
  MODIFY `idRolUsuario` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT de la tabla `servicio`
--
ALTER TABLE `servicio`
  MODIFY `idServicio` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT de la tabla `sesion`
--
ALTER TABLE `sesion`
  MODIFY `idSesion` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT de la tabla `subsistema`
--
ALTER TABLE `subsistema`
  MODIFY `idSubsistema` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT de la tabla `tipoperfil`
--
ALTER TABLE `tipoperfil`
  MODIFY `idTipoPerfil` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
